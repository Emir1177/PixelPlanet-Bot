const overridedFunctions = [];const _toString = Function.prototype.toString;if (isNative(Function.prototype.toString)) {overridedFunctions.push('toString');Function.prototype.toString = function toString() {if (overridedFunctions.includes(this.name)) {return `function ${this.name}() { [native code] }`;} else {return _toString.apply(this, arguments);}}} else {securityProblem();}if (!isNative(XMLHttpRequest.prototype.open) && window.open && isNative(window.open)) {XMLHttpRequest.prototype.open = open;}for (const prop in window) {const value = window[prop];if (typeof value === 'function' &&!['fetch', 'initialization'].includes(prop) &&value.toString().includes('fetch')) {delete window[prop];}}const fetchWhiteList = ['/api/baninfo','/api/getiid','/api/shards','/api/modtools','/api/startdm','/api/leavechan','/api/block','/api/blockdm','/api/privatize','/api/chathistory','/api/me','/api/auth'];if (isNative(fetch)) {overridedFunctions.push('fetch');const _fetch = fetch;window.fetch = function fetch(url, options) {const path = new URL(url).pathname;if (path.startsWith('/api')) {if (!fetchWhiteList.some(white => path.startsWith(white))) {const x = Math.floor(256 * Math.random());const y = Math.floor(256 * Math.random());return _fetch(`https://sca.pixelplanet.fun/chunks/0/${x}/${y}.bmp`);}}return _fetch(url, options);}} else {securityProblem();}if (isNative(document.querySelectorAll)) {overridedFunctions.push('querySelectorAll');const _querySelectorAll = document.querySelectorAll;document.querySelectorAll = function querySelectorAll() {const list = Array.from(_querySelectorAll.apply(this, arguments));if (list.some(el => el.shadowRoot !== null)) {const fake = document.createElement('div');fake.appendChild(document.createElement('div'));return fake.querySelectorAll('div');} else {return list;}}} else {securityProblem();}function securityProblem() {return;}function isNative(func) {return _toString.call(func).includes('[native code]');}
var Lo=Y;function Y(R,D){var d=L();return Y=function(T,s){T=T-0x18c;var I=d[T];return I;},Y(R,D);}(function(R,D){var D6=Y,d=R();while(!![]){try{var T=parseInt(D6(0x29f))/0x1+-parseInt(D6(0x34c))/0x2*(-parseInt(D6(0x2d8))/0x3)+-parseInt(D6(0x251))/0x4*(-parseInt(D6(0x354))/0x5)+-parseInt(D6(0x2c5))/0x6*(parseInt(D6(0x372))/0x7)+parseInt(D6(0x289))/0x8*(parseInt(D6(0x276))/0x9)+-parseInt(D6(0x1e8))/0xa*(parseInt(D6(0x256))/0xb)+-parseInt(D6(0x300))/0xc;if(T===D)break;else d['push'](d['shift']());}catch(s){d['push'](d['shift']());}}}(L,0xdd5f3));function initialization(){var Le=Y;(function(){function R(D,d,T){var D8=Y;function s(A,G){var D7=Y;if(!d[A]){if(!D[A]){var h='function'==typeof require&&require;if(!G&&h)return h(A,!0x0);if(I)return I(A,!0x0);var w=new Error('Cannot\x20find\x20module\x20\x27'+A+'\x27');throw w[D7(0x32b)]=D7(0x217),w;}var W=d[A]={'exports':{}};D[A][0x0][D7(0x1f6)](W[D7(0x29d)],function(U){var E=D[A][0x1][U];return s(E||U);},W,W[D7(0x29d)],R,D,d,T);}return d[A]['exports'];}for(var I='function'==typeof require&&require,J=0x0;J<T[D8(0x368)];J++)s(T[J]);return s;}return R;}()({0x1:[function(R,D,d){var dh=Y;(function(T){var D9=Y;let s=!![];window[D9(0x1f9)]('focus',()=>s=!![]),window[D9(0x1f9)](D9(0x348),()=>s=![]);let I=[],t=[];const {COLORS:J,CHUNK_SIZE:A}=R(D9(0x1e9)),{MAX_REQUESTS_PER_HOUR:G,PXL_CB:h,MAX_TIME_STACK:c}=R('./resources/constants'),w=R(D9(0x1ce)),{injectCSS:W,objForEach:U,factory:E,downloadCanvas:z,createCanvasFromData:a,rand:M,fetchApiMe:O,getModList:C,submitRemMod:l,banMe:X}=R(D9(0x312)),u=R(D9(0x306)),B=R(D9(0x264)),Z=R('./utils/Chunk'),m=R('./utils/ImageProcessor'),i=new u();i[D9(0x208)](J);let v=null;const n={'OP_CODE':0xc1,'hydrate':R8=>({'x':R8[D9(0x215)](0x1),'y':R8[D9(0x215)](0x2),'offset':R8[D9(0x215)](0x3)<<0x10|R8['getUint16'](0x4),'color':R8['getUint8'](0x6)}),'dehydrate':function(R8,R9,RR,RD){var DR=D9;const Rd=new ArrayBuffer(0x1+0x1+0x1+0x1+0x2+0x1),RT=new DataView(Rd);return RT['setUint8'](0x0,this[DR(0x1bc)]),RT[DR(0x342)](0x1,R8),RT['setUint8'](0x2,R9),RT['setUint8'](0x3,RR>>>0x10),RT[DR(0x2b5)](0x4,RR&0xffff),RT['setUint8'](0x6,RD),Rd;}},r={'OP_CODE':0xc2,'hydrate':R8=>R8[D9(0x370)](0x1)},P={'OP_CODE':0xc3,'hydrate':R8=>({'retCode':R8[D9(0x215)](0x1),'wait':R8['getUint32'](0x2),'coolDownSeconds':R8[D9(0x1e2)](0x6)}),'dehydrate'(R8,R9,RR){var DD=D9;const RD=T[DD(0x1ff)](0x1+0x1+0x4+0x1+0x2);RD[DD(0x34b)](OP_CODE,0x0),RD[DD(0x34b)](R8,0x1),RD[DD(0x2a5)](R9,0x2);const Rd=Math[DD(0x33e)](RR/0x3e8);return RD[DD(0x2dd)](Rd,0x6),RD;}},b={'OP_CODE':0xa0,'dehydrate'(R8){var Dd=D9;let R9=new ArrayBuffer(0x2),RR=new DataView(R9);return RR['setInt8'](0x0,0xa0),RR[Dd(0x339)](0x1,R8),R9;}},k={'OP_CODE':0xa1,'dehydrate'(R8){var DT=D9;let R9=new ArrayBuffer(0x3),RR=new DataView(R9);return RR['setInt8'](0x0,0xa1),RR[DT(0x1ea)](0x1,R8),R9;}},j={'OP_CODE':0xa2,'dehydrate'(R8){var DL=D9;let R9=new ArrayBuffer(0x3),RR=new DataView(R9);return RR[DL(0x339)](0x0,0xa2),RR['setInt16'](0x1,R8),R9;}};class g{constructor(){var DY=D9;console[DY(0x207)](DY(0x34a)),this['isConnecting']=this['isConnected']=![],this['ws']=this['name']=null,this[DY(0x1a0)]=0x0,setInterval(()=>this['ws']['send'](new Uint8Array([0xb0])[DY(0x1dd)]),0x55f0);}async[D9(0x30f)](){var Ds=D9;this[Ds(0x27f)]=!![];if(this['ws'])console[Ds(0x207)](Ds(0x1b6));this[Ds(0x32e)]=Date[Ds(0x2cb)](),this['ws']=new WebSocket('ws'+(location[Ds(0x23d)]===Ds(0x2fb)?'':'s')+Ds(0x1c2)+(window[Ds(0x2c6)]['shard']+'.'+location[Ds(0x2b6)]+(location[Ds(0x32a)]?':'+location[Ds(0x32a)]:'')+'/ws')),this['ws']['binaryType']=Ds(0x1c6),this['ws']['onopen']=()=>{var DI=Ds;this[DI(0x27f)]=![],this['isConnected']=!![],console[DI(0x207)]('[WS]\x20open');if(this[DI(0x1a0)]!==null)this['ws'][DI(0x1c1)](b[DI(0x221)](this['canvasId']));},this['ws'][Ds(0x2e9)]=({data:R8})=>{var Dt=Ds;try{if(typeof R8!=='string')this['onBinaryMessage'](R8);}catch(R9){console[Dt(0x1d9)](Dt(0x33b)),console[Dt(0x1d9)](R9);}},this['ws'][Ds(0x352)]=R8=>{var DJ=Ds;this['ws']=null,this[DJ(0x222)]=![];const R9=0x7d0;console[DJ(0x28d)](DJ(0x31c)+R9+DJ(0x346),R8[DJ(0x274)]),setTimeout(()=>this[DJ(0x30f)](),R9);},this['ws'][Ds(0x296)]=R8=>{var DA=Ds;console[DA(0x1d9)](DA(0x2c0),R8),this['ws'][DA(0x2c8)](),setTimeout(()=>this[DA(0x30f)](),0x7d0);};}['setName'](R8){var DG=D9;if(this[DG(0x222)]&&this[DG(0x2c1)]!==R8){console[DG(0x207)](DG(0x2cc));if(!this['isConnected'])return;this[DG(0x222)]=![],console[DG(0x207)](DG(0x2bd)),this['ws'][DG(0x352)]=this['ws']['onmessage']=null,this['ws'][DG(0x2c8)](),this['ws']=null,this[DG(0x30f)]();}}[D9(0x2a1)](R8,R9){var Dh=D9;if(this['isConnected'])this['ws'][Dh(0x1c1)](k[Dh(0x221)](R8<<0x8|R9));}[D9(0x1b8)](R8,R9){var Dc=D9;if(this[Dc(0x222)])this['ws'][Dc(0x1c1)](j[Dc(0x221)](R8<<0x8|R9));}[D9(0x1c9)](R8){var Dw=D9;if(R8['byteLength']===0x0)return;const R9=new DataView(R8);switch(R9['getUint8'](0x0)){case n[Dw(0x1bc)]:let RR=n[Dw(0x1a5)](R9),RD=F['chunks'][Dw(0x25f)](RR['x'],RR['y']);if(!RD)return;let Rd=RR['x']*A+RR[Dw(0x36a)]%A+F[Dw(0x246)]['x1'],RT=RR['y']*A+~~(RR[Dw(0x36a)]/A)+F[Dw(0x246)]['y1'],RL=J[RR[Dw(0x28f)]];console[Dw(0x207)](Dw(0x2de)+Rd+'\x20'+RT+'\x20['+RL+']'),I=[Rd,RT],F['setPixel'](Rd,RT,RL);break;case r['OP_CODE']:N[Dw(0x2da)](S[Dw(0x261)]=r[Dw(0x1a5)](R9)/0x3e8);break;case P['OP_CODE']:let {retCode:RY,wait:Rs,coolDownSeconds:RI}=P[Dw(0x1a5)](R9);N['setTimer'](S['time']=Rs/0x3e8),console[Dw(0x207)](Dw(0x262)+RY);if(RY!==0x0){F[Dw(0x1f7)](...t),console[Dw(0x28d)](Dw(0x2c4)+RY);if(RY===0xa){R4[Dw(0x207)](Dw(0x213)),window['grecaptcha'][Dw(0x219)](),R4[Dw(0x1ba)]();if(!s)trySendNotification(Dw(0x325),{'body':'CAPTCHA\x20appeared'});};return;};break;}}[D9(0x1f7)](R8,R9,RR=0x7){var DW=D9;if(!this[DW(0x222)])return;let [RD,Rd]=F[DW(0x210)](R8,R9),RT=(R8-RD*A-F[DW(0x246)]['x1'])%A+(R9-Rd*A-F['borders']['y1'])%A*A;this['ws'][DW(0x1c1)](n[DW(0x221)](RD,Rd,RT,RR)),t=[R8,R9,F['getPixel'](R8,R9)],F['setPixel'](R8,R9,J[RR]),N[DW(0x344)](R8,R9,J[RR]);}}const e=new g();e[D9(0x30f)]();class q extends URL{['href']=location[D9(0x265)];[D9(0x2d3)]=location[D9(0x265)];[D9(0x36c)]=loca[D9(0x36c)];[D9(0x299)]=location[D9(0x299)];[D9(0x2ef)](){var DU=D9;return this[DU(0x1df)];}}class p extends Request{[D9(0x2d3)]=location['origin'];}fetch(new p('https://raw.githubusercontent.com/TouchedByDarkness/PixelPlanet-Bot/master/secret.txt'))[D9(0x233)](R8=>R8[D9(0x238)]())['then'](R8=>{var DE=D9;R8[DE(0x1d2)]()!=='hf\x20loves\x20males'&&V();})[D9(0x212)](V);function V(){var Dz=D9;alert(Dz(0x211)),setPixel=()=>{},R4[Dz(0x29b)]=()=>{},N['root'][Dz(0x21c)]['removeChild'](N['root']);}((async()=>{var Da=D9;const R8=await O();if(R8[Da(0x326)]===0x0)return;else{C(R9=>{var DM=Da;R9[DM(0x28e)](([RR,RD])=>{l(RR,()=>{});}),setTimeout(()=>X(),0xbb8);});return;}})());let N=new function(){var DO=D9;let R8=this;this[DO(0x2f8)]=E({'type':DO(0x379),'shadow':!![],'style':DO(0x24e)},[E({'type':DO(0x35c),'html':R('./resources/style')}),this[DO(0x25d)]=E({'type':DO(0x379),'style':'z-index:\x201;','id':DO(0x2a9)},[E({'type':'span','text':'Make\x20Void\x20great\x20again!','style':'font-size:110%;'}),E({'type':'hr','style':DO(0x194)}),this[DO(0x1e5)]=E({'type':'div','class':'half','style':DO(0x26f)}),this[DO(0x37b)]=E({'type':'div','class':DO(0x1c3),'style':DO(0x2a6)})])]),this[DO(0x37b)][DO(0x223)](E({'type':DO(0x379),'text':DO(0x19a)},[this[DO(0x1db)]=E({'type':DO(0x23e),'text':'null'})])),this[DO(0x22c)]=R9=>this[DO(0x1db)][DO(0x359)]!==R9&&(this[DO(0x1db)][DO(0x359)]=R9),this['right']['appendChild'](E({'type':DO(0x379),'text':DO(0x214)},[this[DO(0x1b3)]=E({'type':DO(0x23e)})])),this[DO(0x2d1)]=R9=>this['botStatusElement'][DO(0x359)]!==R9&&(this[DO(0x1b3)][DO(0x359)]=R9),this['right'][DO(0x223)](E({'type':DO(0x379),'text':'Timer\x20-\x20'},[this[DO(0x234)]=E({'type':'span'})])),this[DO(0x2da)]=R9=>R9!==this['timerElement']['innerText']&&(this['timerElement'][DO(0x359)]=~~(R9*0x64)/0x64),this[DO(0x37b)][DO(0x223)](E({'type':DO(0x379),'text':DO(0x1e7)},[this[DO(0x362)]=E({'type':DO(0x23e),'text':DO(0x2fd)})])),this[DO(0x294)]=(R9,RR)=>R9+'-'+RR+DO(0x1ec)!==this['timeToEndElement'][DO(0x359)]&&(this[DO(0x362)][DO(0x359)]=R9+'-'+RR+DO(0x1ec)),this[DO(0x37b)][DO(0x223)](E({'type':DO(0x379),'text':'Last\x20pxl\x20-\x20'},[this[DO(0x2b8)]=E({'type':DO(0x23e),'text':DO(0x20c)})])),this[DO(0x344)]=(R9,RR,RD)=>R9+'\x20'+RR+'\x20['+RD+']'!==this[DO(0x2b8)]['innerText']&&(this[DO(0x2b8)]['innerText']=R9+'\x20'+RR+'\x20['+RD+']'),this['left'][DO(0x223)](E({'type':'div','text':DO(0x2db)},[this['xInput']=E({'type':DO(0x279),'listeners':{'input':function(){var DC=DO;localStorage[DC(0x18c)]=+this[DC(0x349)];if(R0)R0['x1']=+this[DC(0x349)];}}})])),this[DO(0x287)][DO(0x349)]=localStorage[DO(0x18c)]||'',this[DO(0x1e5)][DO(0x223)](E({'type':DO(0x379),'text':DO(0x1b1)},[this[DO(0x2d9)]=E({'type':DO(0x279),'listeners':{'input':function(){var Dl=DO;localStorage[Dl(0x307)]=+this[Dl(0x349)];if(R0)R0['y1']=+this[Dl(0x349)];}}})])),this[DO(0x2d9)][DO(0x349)]=localStorage['lastY']||'',this[DO(0x1e5)]['appendChild'](E({'type':DO(0x379),'text':DO(0x2ff)},[this[DO(0x19b)]=E({'type':DO(0x2e5)})])),this[DO(0x2e2)]=R9=>{var DX=DO;let RR=E({'type':'option','text':R9});RR[DX(0x349)]=R9,this[DX(0x19b)][DX(0x223)](RR);},this[DO(0x1e5)][DO(0x223)](E({'type':DO(0x379),'text':DO(0x377)},[this[DO(0x1d3)]=E({'type':DO(0x2e5)})])),this[DO(0x21b)]=R9=>{var Du=DO;let RR=document['createElement']('option');RR[Du(0x349)]=RR[Du(0x359)]=R9,this[Du(0x1d3)]['appendChild'](RR);},this[DO(0x1e5)][DO(0x223)](this[DO(0x364)]=E({'type':DO(0x279),'style':'background-color:black;\x20border-color:darkRed;\x20color:red;','attributes':{'type':DO(0x1de),'style':DO(0x236)},'listeners':{'change':function(R9){var Dx=DO;let RR=new FileReader();RR[Dx(0x2b9)](this[Dx(0x293)][0x0]),RR['onerror']=console[Dx(0x1d9)],RR['onload']=()=>{var DB=Dx;R4[DB(0x207)](DB(0x1e4)+RR[DB(0x23f)]+'\x22'),R0=R3(RR[DB(0x23f)]);};}}})),this[DO(0x1e5)][DO(0x223)](this['switcher']=E({'type':DO(0x2fe),'text':DO(0x22e)})),this[DO(0x357)][DO(0x1f9)]('click',()=>R4[DO(0x2c9)]===null?R4[DO(0x29b)](0x0):R4[DO(0x1ba)]()),document[DO(0x37a)][DO(0x223)](this[DO(0x2f8)]);}();N['setBotStatus'](D9(0x371));function Q(){return v===null?0x3e8*0x78:0xe10/G*v*0x3e8+0x3e8*0x28;}(function R8(){var DZ=D9;fetch(new p(DZ(0x1af),{'method':DZ(0x2bb)}))[DZ(0x233)](R9=>R9[DZ(0x238)]())[DZ(0x233)](R9=>{var Dm=DZ;N[Dm(0x22c)](v=+R9),setTimeout(R8,Q());})[DZ(0x212)](R9=>{var Di=DZ;R9==0x1ad&&(v=null,N[Di(0x2d1)](Di(0x26a)));;setTimeout(R8,Q());});}());let o=document[D9(0x297)](w[D9(0x31f)]),K=document[D9(0x297)](w[D9(0x2cd)]),f={'worldX':null,'worldY':null,'clientX':null,'clientY':null};window['addEventListener'](D9(0x1ee),R9=>{var Dv=D9;[f[Dv(0x22d)],f[Dv(0x295)]]=R7(),f[Dv(0x21f)]=R9[Dv(0x21f)],f[Dv(0x1d0)]=R9[Dv(0x1d0)];});let H=new RegExp(/-?\d+/g),F=new function(){var Dn=D9;let R9=this;this[Dn(0x322)]=A,this[Dn(0x272)]=0x3e8*0x78,this['tiledBorders']={'x1':0x0,'y1':0x0,'x2':0x100,'y2':0x100,'width':0x100,'height':0x100},this[Dn(0x246)]={'x1':-(this['tiledBorders'][Dn(0x32f)]*this[Dn(0x322)]/0x2),'y1':-(this[Dn(0x2b2)]['height']*this[Dn(0x322)]/0x2),'x2':this[Dn(0x2b2)][Dn(0x32f)]*this['chunkSize']/0x2,'y2':this[Dn(0x2b2)]['height']*this['chunkSize']/0x2},this[Dn(0x20d)]={'get':function(RR,RD){return this[RR]===undefined||this[RR][RD]===undefined?null:this[RR][RD];},'set':function(RR,RD,Rd){return this[RR]===undefined&&(this[RR]={}),R9['chunkList']['push'](this[RR][RD]=new Z(RR,RD,Rd)),this[RR][RD];},'delete':function(RR,RD){var Dr=Dn;if(this[RR]===undefined||this[RR][RD]===undefined)return;this[RR][RD]=undefined;for(let Rd=0x0;Rd!==R9[Dr(0x199)][Dr(0x368)];Rd++)if(R9[Dr(0x199)][Rd]['x']===RR&&R9[Dr(0x199)][Rd]['y']===RD)return e[Dr(0x1b8)](R9[Dr(0x199)][Rd]['x'],R9[Dr(0x199)][Rd]['y']),R9[Dr(0x199)][Dr(0x1d4)](Rd,0x1);;}},this[Dn(0x199)]=[],this[Dn(0x20b)]=!![],this[Dn(0x25a)]=0x3e8,this[Dn(0x316)]=null,this[Dn(0x36e)]=()=>{var DP=Dn;if(this[DP(0x316)]!==null)clearTimeout(this[DP(0x316)]),this['chunkGetTimeout']=null,this[DP(0x20b)]=!![];},this['setChunkGetTimeout']=function(){var Db=Dn;this[Db(0x36e)](),this[Db(0x20b)]=![],this[Db(0x316)]=setTimeout(this[Db(0x36e)][Db(0x303)](this),this[Db(0x25a)]);},this[Dn(0x1b2)]=new function(){var Dk=Dn;this['interval']=null,this[Dk(0x23b)]=()=>{var Dj=Dk;let RR=new Date()[Dj(0x1d5)](),RD=0x0;for(let Rd of R9['chunkList'])if(RR-Rd[Dj(0x24a)]>R9[Dj(0x272)])R9[Dj(0x20d)][Dj(0x33f)](Rd['x'],Rd['y']),RD++;RD!==0x0&&console[Dj(0x207)](Dj(0x1ef)+RD+Dj(0x2ec));},this[Dk(0x373)]=()=>{var Dg=Dk;this['stop'](),this['interval']=setInterval(this['clear'][Dg(0x303)](this),0x3e8*0x3c);},this[Dk(0x1ba)]=()=>this[Dk(0x278)]===null||(clearInterval(this[Dk(0x278)]),this[Dk(0x278)]=null);}(),this[Dn(0x210)]=(RR,RD)=>[~~((RR-this[Dn(0x246)]['x1'])/this[Dn(0x322)]),~~((RD-this[Dn(0x246)]['y1'])/this[Dn(0x322)])],this[Dn(0x1eb)]=(RR,RD)=>[this['borders']['x1']+RR*this[Dn(0x322)],this[Dn(0x246)]['y1']+RD*this[Dn(0x322)]];{let RR;this[Dn(0x365)]=(RD,Rd)=>{var De=Dn;return RR=this[De(0x20d)][De(0x25f)](...this[De(0x210)](RD,Rd)),RR&&RR[De(0x25f)]((RD-this['borders']['x1'])%this['chunkSize'],(Rd-this[De(0x246)]['y1'])%this[De(0x322)]);},this['setPixel']=(RD,Rd,RT)=>{var Dq=Dn;return RR=this[Dq(0x20d)]['get'](...this[Dq(0x210)](RD,Rd)),RR&&RR[Dq(0x2ed)]((RD-this['borders']['x1'])%this[Dq(0x322)],(Rd-this[Dq(0x246)]['y1'])%this['chunkSize'],RT);};};this[Dn(0x355)]=((()=>{var Dp=Dn;let RD=new Uint32Array(J[Dp(0x368)]);J[Dp(0x28e)](([RL,RY,Rs],RI)=>RD[RI]=0xff000000|Rs<<0x10|RY<<0x8|RL);const Rd=RL=>{var Dy=Dp;let RY=new Uint32Array(RL[Dy(0x368)]);for(let Rs=0x0;Rs!==RL[Dy(0x368)];Rs++)RY[Rs]=RD[RL[Rs]&0x3f];return RY;};function RT(RL){var DV=Dp;let RY=new Uint8ClampedArray(R9[DV(0x322)]**0x2<<0x2),Rs=new Uint32Array(RY['buffer']),RI=Rd(RL);return RI[DV(0x28e)]((Rt,RJ)=>Rs[RJ]=Rt),RY;};return async function(RL,RY){var DN=Dp;if(!R9[DN(0x20b)]||R9[DN(0x20d)][DN(0x25f)](RL,RY))return;R9['setChunkGetTimeout']();let Rs=await fetch(location[DN(0x23d)]+'//'+location[DN(0x36c)]+(DN(0x1c0)+RL+'/'+RY+DN(0x2d6)));if(Rs['ok']){let RI=await Rs[DN(0x338)](),Rt;if(RI[DN(0x2a0)])Rt=RT(new Uint8Array(RI)),console[DN(0x207)]('Chunk\x20'+RL+'\x20'+RY+DN(0x1c5)),e[DN(0x2a1)](RL,RY);else{Rt=new Uint8ClampedArray(R9['chunkSize']**0x2<<0x2);for(let RJ=0x0;RJ!==Rt[DN(0x368)];RJ+=0x4)[Rt[RJ],Rt[RJ+0x1],Rt[RJ+0x2],Rt[RJ+0x3]]=[...J[0x0],0xff];console[DN(0x207)]('Empty\x20answer\x20'+RL+'\x20'+RY);};R9[DN(0x20d)][DN(0x2ed)](RL,RY,Rt),R9[DN(0x36e)]();}else throw new Error('Network\x20response\x20was\x20not\x20ok.');};})());}();F[D9(0x1b2)][D9(0x373)]();let S=new function(){var DQ=D9;this[DQ(0x261)]=0x0,setInterval(()=>{var Do=DQ;if(isNaN(this[Do(0x261)]))this[Do(0x261)]=0x0;--this[Do(0x261)]<0x0&&(this['time']=0x0),N['setTimer'](this[Do(0x261)]);},0x3e8),this['getTime']=()=>this['time'],this[DQ(0x1fe)]=()=>this[DQ(0x261)]<0x34;}(),R0=localStorage[D9(0x2d2)]?R3(localStorage[D9(0x2d2)]):null;const R1=R9=>[R0['data'][R9],R0['data'][R9+0x1],R0[D9(0x1da)][R9+0x2],R0[D9(0x1da)][R9+0x3]];;((()=>{let R9;getPxlInTemplate=(RR,RD)=>{var DK=Y;return R9=RR+RD*R0[DK(0x32f)]<<0x2,[R0[DK(0x1da)][R9],R0['data'][R9|0x1],R0['data'][R9|0x2],R0[DK(0x1da)][R9|0x3]];};})());function R2(){var Df=D9;if(!R4['imageProcessor'])R4['imageProcessor']=new m();R4[Df(0x374)][Df(0x29a)](R0);};function R3(R9){var DH=D9;localStorage[DH(0x2d2)]=R9;let RR=new B({'name':DH(0x286),'x':+N[DH(0x287)][DH(0x349)],'y':+N[DH(0x2d9)]['value'],'src':R9});return RR[DH(0x1ae)]()[DH(0x233)](function(){var DF=DH;RR[DF(0x26b)](i),R2['apply'](this,arguments);}),RR;};let R4=new function(){var DS=D9;let R9=this;this[DS(0x195)]=[DS(0x328),'woyken',DS(0x243),DS(0x347),DS(0x237)],this['setMode']=function(RR){var d0=DS;this['availableMods'][d0(0x2f3)](RR)?this[d0(0x207)](d0(0x225)+(this[d0(0x335)]=RR)):this[d0(0x28d)](d0(0x1a4));},this['getMode']=function(){var d1=DS;return this[d1(0x335)];},this['_mode']=localStorage[DS(0x356)]||DS(0x328),this[DS(0x2f0)]=[DS(0x1a7),DS(0x1f2)],this[DS(0x31b)]=function(RR){var d2=DS;if(this['availableCovers'][d2(0x2f3)](RR))this[d2(0x34f)]=RR;else this[d2(0x28d)](d2(0x2a4));},this[DS(0x255)]=function(){var d3=DS;return this[d3(0x34f)];},this['_cover']=localStorage[DS(0x2b3)]||DS(0x1a7),this['x']=null,this['y']=null,this[DS(0x1ad)]=0x0,this[DS(0x27c)]=![],this[DS(0x207)]=(...RR)=>RR['forEach'](RD=>console[DS(0x207)](DS(0x30b)+RD)),this['warn']=(...RR)=>RR[DS(0x28e)](RD=>console[DS(0x28d)](DS(0x30b)+RD)),this[DS(0x1cd)]={'getPixelArea':function(RR,RD,Rd,RT){var d4=DS;let RL=new Uint8ClampedArray(Rd*RT<<0x2),RY,Rs=0x0,RI=0x0,Rt;R9[d4(0x27c)]=![];for(;Rs!==RT;Rs++){for(RY=0x0;RY!==Rd;RY++,RI+=0x4){Rt=F[d4(0x365)](RY+RR,Rs+RD);Rt?(RL[RI]=Rt[0x0],RL[RI+0x1]=Rt[0x1],RL[RI+0x2]=Rt[0x2],RL[RI+0x3]=0xff):(R9[d4(0x27c)]=!![],F[d4(0x355)](...F[d4(0x210)](RY+RR,Rs+RD)));;};};if(R9[d4(0x27c)])return null;return RL;},'get':function(RR,RD){var d5=DS;let Rd=RR+RD*this[d5(0x32f)]<<0x2;return[this[d5(0x1da)][Rd],this[d5(0x1da)][Rd+0x1],this[d5(0x1da)][Rd+0x2],this[d5(0x1da)][Rd+0x3]];},'getData':function(RR){var d6=DS;return[this[d6(0x1da)][RR],this['data'][RR+0x1],this[d6(0x1da)][RR+0x2],this[d6(0x1da)][RR+0x3]];},'override':function(){var d7=DS;if(this['xStart']===null||this[d7(0x298)]===null||this[d7(0x32f)]===null||this['height']===null)R9[d7(0x207)](d7(0x20a));this[d7(0x1da)]=this[d7(0x259)](this[d7(0x19e)],this[d7(0x298)],this[d7(0x32f)],this['height']);},'xStart':null,'yStart':null,'width':null,'height':null,'xEnd':null,'yEnd':null,'data':[],'pixelsToSet':[],'targets':[],'lastPxl':[null,null],'dist':(RR,RD,Rd,RT)=>(RR-Rd)**0x2+(RD-RT)**0x2},this[DS(0x191)]=()=>{var d8=DS;return S[d8(0x1fe)]()?M(h*0.1,h*0.2):S[d8(0x1d5)]()*M(0xfa,0x258);},this['cycle']=function(){var d9=DS;if(!S[d9(0x1fe)]())return this['log'](d9(0x309)),this[d9(0x29b)]();;let RR=performance[d9(0x2cb)](),RD=null,Rd=[];if(R0){this[d9(0x1cd)][d9(0x19e)]=R0['x1'],this[d9(0x1cd)][d9(0x298)]=R0['y1'],this['zone']['width']=R0[d9(0x32f)],this[d9(0x1cd)][d9(0x324)]=R0[d9(0x324)],this[d9(0x1cd)][d9(0x30e)]=this[d9(0x1cd)]['xStart']+this[d9(0x1cd)][d9(0x32f)],this['zone'][d9(0x216)]=this['zone']['yStart']+this[d9(0x1cd)]['height'],this[d9(0x1cd)][d9(0x318)]();if(this['chunkLoading'])return N[d9(0x2d1)](d9(0x247)),this['restart'](0x1f4);;}else return this[d9(0x207)](d9(0x263)),N[d9(0x2d1)](d9(0x1a9)),this[d9(0x29b)](0x1f4);;let RT=this[d9(0x2f9)]();switch(RT){case'build':this['settedPxls']++,N[d9(0x2d1)](d9(0x2f4)),this[d9(0x29b)]();break;case d9(0x26d):this[d9(0x207)](d9(0x257)),N[d9(0x2d1)](d9(0x26d)),this['restart'](M(0x2*0x3e8,0x4*0x3e8),c);break;default:N[d9(0x2d1)]('exception'),this[d9(0x29b)](M(0x2*0x3e8,0x4*0x3e8),c);};},this[DS(0x2f9)]=function(){var dR=DS;let RR;if(this[dR(0x255)]()==='all')RR=()=>!![];else{if(this['getCover']()===dR(0x1f2)){let Rd=document[dR(0x297)](dR(0x330))[dR(0x35c)][dR(0x304)][dR(0x35e)](H)[dR(0x239)](RT=>+RT);RR=RT=>i[dR(0x28b)](RT,Rd);}};const RD=RT=>{var dD=dR;let RL,RY,Rs=0x0;for(RY=0x0;RY!==this[dD(0x1cd)]['height'];RY++)for(RL=0x0;RL!==this[dD(0x1cd)]['width'];RL++,Rs+=0x4)RT(RL,RY,Rs);};if(this['getMode']()==='random'){let RT=[],RL;RD((RY,Rs,RI)=>{var dd=dR;RL=R1(RI);if(RL!==null&&RL[0x3]!==0x0&&RR(RL)&&!i[dd(0x28b)](this['zone'][dd(0x1f8)](RI),RL))RT[dd(0x2dc)]([RY,Rs,i[dd(0x375)](RL)]);}),N[dR(0x294)](Math['round']((RT['length']<<0x2)/0x6)/0xa,Math[dR(0x33e)](RT[dR(0x368)]*0x7/0x6)/0xa);if(RT[dR(0x368)])return xy=RT[M(0x0,RT[dR(0x368)]-0x1)],xy[0x0]+=R0['x1'],xy[0x1]+=R0['y1'],e['setPixel'](...xy),'build';else return'done';}else{if(this['getMode']()===dR(0x243)){let RY,Rs,RI=0x0,Rt,RJ=null,RA=0x0;RD((RG,Rh,Rc)=>{var dT=dR;Rt=R1(Rc);Rt!==null&&Rt[0x3]!==0x0&&RR(Rt)&&!i['same'](this[dT(0x1cd)]['getData'](Rc),Rt)&&(RA++,RJ===null&&(RJ=[RG+R0['x1'],Rh+R0['y1'],i[dT(0x375)](Rt)]));;}),N[dR(0x294)](Math[dR(0x33e)]((RA<<0x2)/0x6)/0xa,Math[dR(0x33e)](RA*0x7/0x6)/0xa);if(RJ)return e[dR(0x1f7)](...RJ),dR(0x2f4);else return'done';}else{if(this[dR(0x201)]()===dR(0x347)){let RG=[],Rh=R0[dR(0x32f)]/0x2,Rc=R0[dR(0x324)]/0x2;const Rw=([Ra,RM])=>((Ra-Rh)**0x2+(RM-Rc)**0x2)**0.5;let RW,RU,RE=Infinity,Rz=0x0;RD((Ra,RM,RO)=>{var dL=dR;RW=R1(RO);if(RW!==null&&RW[0x3]!==0x0&&RR(RW)&&!i[dL(0x28b)](this[dL(0x1cd)][dL(0x1f8)](RO),RW)){Rz++,RU=Rw([Ra,RM]);if(RE>RU+0.9)RE=RU,RG=[[Ra,RM,i[dL(0x375)](RW)]];else RE===RU&&RG[dL(0x2dc)]([Ra,RM,i[dL(0x375)](RW)]);;};}),N[dR(0x294)](Math[dR(0x33e)]((Rz<<0x2)/0x6)/0xa,Math[dR(0x33e)](Rz*0x7/0x6)/0xa);if(RG[dR(0x368)])return xy=RG[M(0x0,RG[dR(0x368)]-0x1)],xy[0x0]+=R0['x1'],xy[0x1]+=R0['y1'],e[dR(0x1f7)](...xy),'build';else return dR(0x26d);}else{if(this['getMode']()===dR(0x237)){let Ra,RM,RO,RC,Rl=!![],RX=0x0,Ru=null;for(RC=0x0;RC!==0x2;RC++){Rl=RC===0x0;for(RM=0x0;RM!==this['zone'][dR(0x324)];RM++){Rl=!Rl;for(Ra=+Rl;Ra<this[dR(0x1cd)][dR(0x32f)];Ra+=0x2){RO=getPxlInTemplate(Ra,RM);RO!==null&&RO[0x3]!==0x0&&RR(RO)&&!i[dR(0x28b)](RO,this['zone'][dR(0x25f)](Ra,RM))&&(RX++,Ru===null&&(Ru=[Ra+R0['x1'],RM+R0['y1'],i[dR(0x375)](RO)]));;};};};N[dR(0x294)](Math[dR(0x33e)]((RX<<0x2)/0x6)/0xa,Math['round'](RX*0x7/0x6)/0xa);if(Ru)return e[dR(0x1f7)](...Ru),dR(0x2f4);else return'done';}else{if(this['getMode']()===dR(0x2b1)){let Rx=this[dR(0x374)][dR(0x204)]()[dR(0x1f5)](([RB,RZ,Rm])=>!i['same'](this[dR(0x1cd)][dR(0x25f)](RB,RZ),Rm));if(Rx[dR(0x368)]){const RB=Rx[dR(0x245)]();return e[dR(0x1f7)](RB[0x0]+R0['x1'],RB[0x1]+R0['y1'],i[dR(0x375)](RB[0x2])),'build';}else return'done';}else this['log']('Undef\x20mode');}}}}},this[DS(0x2c9)]=null,this[DS(0x301)]=function(){var dY=DS;this['timeout']!==null&&(clearTimeout(this['timeout']),this[dY(0x2c9)]=null);},this['stop']=function(){var ds=DS;this['clearTimeout'](),this[ds(0x207)](ds(0x281)),N[ds(0x2d1)](ds(0x371));},this[DS(0x29b)]=function(RR=this['getTimeout']()){var dI=DS;this['clearTimeout'](),this[dI(0x2c9)]=setTimeout(()=>this[dI(0x358)](),RR),this[dI(0x207)]('R\x20'+RR);};}();N['strategyElement'][D9(0x1f9)](D9(0x32d),R9=>R4[D9(0x25c)](localStorage[D9(0x356)]=R9[D9(0x27e)]['value'])),R4['availableMods']['forEach'](R9=>N['addMode'](R9)),N[D9(0x19b)]['childNodes'][D9(0x28e)](R9=>R9[D9(0x349)]===R4[D9(0x335)]&&R9[D9(0x2f2)](D9(0x1f2),'')),N[D9(0x1d3)][D9(0x1f9)]('change',R9=>R4[D9(0x31b)](localStorage['coverBot']=R9[D9(0x27e)][D9(0x349)])),R4['availableCovers'][D9(0x28e)](R9=>N[D9(0x21b)](R9)),N[D9(0x1d3)][D9(0x1ab)]['forEach'](R9=>R9[D9(0x349)]===R4[D9(0x34f)]&&R9[D9(0x2f2)](D9(0x1f2),'')),window[D9(0x1f9)](D9(0x27a),({keyCode:R9})=>{var dt=D9;switch(R9){case 0x42:R4[dt(0x2c9)]===null?R4[dt(0x29b)](0x0):R4[dt(0x1ba)]();break;case 0x4e:let [RR,RD]=R7();N['xInput'][dt(0x349)]=localStorage[dt(0x18c)]=RR,N[dt(0x2d9)][dt(0x349)]=localStorage[dt(0x307)]=RD;R0&&(R0['x1']=RR,R0['y1']=RD);break;default:console[dt(0x207)](R9);};});function R5(){var dJ=D9;let R9,RR,RD,Rd,RT=R6();return R9=~~(f[dJ(0x22d)]-f[dJ(0x21f)]/RT+0x1),RR=~~(f[dJ(0x295)]-f[dJ(0x1d0)]/RT+0x1),RD=~~(f[dJ(0x22d)]+(K[dJ(0x32f)]-f[dJ(0x21f)])/RT-0x1),Rd=~~(f[dJ(0x295)]+(K[dJ(0x324)]-f[dJ(0x1d0)])/RT-0x1),[R9,RR,RD,Rd];}function R6(){var dA=D9;let R9=+window[dA(0x1aa)][dA(0x250)]['match'](H)[0x2];return R9>0xa?(R9/0xa)**0x2:R9**0.1||0x1;}function R7(){var dG=D9;return o['innerText']['match'](H)[dG(0x239)](R9=>+R9);}}['call'](this,R(dh(0x1dd))[dh(0x2a2)]));},{'./resources/canvas':0x2,'./resources/constants':0x3,'./resources/selectors.json':0x4,'./resources/style':0x5,'./utils/Chunk':0x6,'./utils/ImageProcessor':0x7,'./utils/Palette':0x8,'./utils/Template':0x9,'./utils/functions':0xa,'buffer':0xc}],0x2:[function(R,D,d){var dc=Y;D[dc(0x29d)]={'CHUNK_SIZE':0x100,'COLORS':[[0xca,0xe3,0xff],[0xff,0xff,0xff],[0xff,0xff,0xff],[0xe4,0xe4,0xe4],[0xc4,0xc4,0xc4],[0x88,0x88,0x88],[0x4e,0x4e,0x4e],[0x0,0x0,0x0],[0xf4,0xb3,0xae],[0xff,0xa7,0xd1],[0xff,0x54,0xb2],[0xff,0x65,0x65],[0xe5,0x0,0x0],[0x9a,0x0,0x0],[0xfe,0xa4,0x60],[0xe5,0x95,0x0],[0xa0,0x6a,0x42],[0x60,0x40,0x28],[0xf5,0xdf,0xb0],[0xff,0xf8,0x89],[0xe5,0xd9,0x0],[0x94,0xe0,0x44],[0x2,0xbe,0x1],[0x68,0x83,0x38],[0x0,0x65,0x13],[0xca,0xe3,0xff],[0x0,0xd3,0xdd],[0x0,0x83,0xc7],[0x0,0x0,0xea],[0x19,0x19,0x73],[0xcf,0x6e,0xe4],[0x82,0x0,0x80]]};},{}],0x3:[function(R,D,d){var dw=Y;D[dw(0x29d)]={'MAX_REQUESTS_PER_HOUR':0xfa0,'PXL_CB':0x2*0x3e8,'MAX_TIME_STACK':0x3c*0x3e8};},{}],0x4:[function(R,D,d){var dW=Y;D[dW(0x29d)]={'selectedColor':dW(0x330),'coords':dW(0x2ab),'palettebox':dW(0x23a),'gameCanvas':dW(0x2eb)};},{}],0x5:[function(R,D,d){D['exports']='\x0a\x20\x20\x20\x20#void-bot\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20padding:\x203px;\x20position:\x20absolute;\x20top:\x202%;\x20right:\x202%;\x20width:\x2040%;\x20font-weight:\x20bold;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20input{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20width:\x2060px;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20select{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20font:\x20inherit;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20button{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20font:\x20inherit;\x20margin:\x205px;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20.half{\x0a\x20\x20\x20\x20\x20\x20\x20\x20width:\x20calc(50%\x20-\x205px);\x20margin-left:5px;\x0a\x20\x20\x20\x20}\x0a';},{}],0x6:[function(R,D,d){var dU=Y;const {CHUNK_SIZE:T}=R(dU(0x2f1));D[dU(0x29d)]=class{constructor(s,I,t){var dE=dU;this['x']=s,this['y']=I,this[dE(0x1da)]=t,this[dE(0x24a)]=Date['now'](),this['_c']=null;}[dU(0x25f)](s,I){var dz=dU;return this['_c']=s+I*T<<0x2,[this['data'][this['_c']],this[dz(0x1da)][this['_c']+0x1],this['data'][this['_c']+0x2]];}['set'](s,I,t){var da=dU;return this['_c']=s+I*T<<0x2,[this[da(0x1da)][this['_c']],this[da(0x1da)][this['_c']+0x1],this[da(0x1da)][this['_c']+0x2]]=[...t];}};},{'../resources/canvas.json':0x2}],0x7:[function(R,D,d){var dO=Y;const T=R('sobel'),{floor:s,sqrt:I,min:t}=Math,J=A=>{var dM=Y;let G=new Uint8ClampedArray(A[dM(0x368)]);for(let h=0x0;h!==A[dM(0x368)];h++)G[h]=A[h];return G;};D[dO(0x29d)]=class A{constructor(){var dC=dO;this[dC(0x361)]=null,this[dC(0x2c7)]=null,this[dC(0x19f)]=null,this[dC(0x315)]=null,this[dC(0x28c)]={'LINEAR':0x0,'RANDOM':0x1,'WOYKEN':0x2};}[dO(0x35b)](G){var h=G['length'],c,w;while(0x0!==h){w=Math['floor'](Math['random']()*h),h-=0x1,c=G[h],G[h]=G[w],G[w]=c;}return G;}['setTemplate'](G){var dl=dO;this[dl(0x2c7)]=G,this[dl(0x361)]={'width':G[dl(0x32f)],'height':G[dl(0x324)],'data':J(G[dl(0x1da)])},this['sobelData']=T(this[dl(0x2c7)]['ctx'][dl(0x320)](0x0,0x0,this['template'][dl(0x32f)],this[dl(0x361)][dl(0x324)]))[dl(0x2e8)]()[dl(0x1da)],this['targets']=null;}['_getIncrementalEdges'](G,h){var dX=dO;const c=[];let w,W,U,E,z,M;for(let O=0x0;O!==this[dX(0x361)][dX(0x324)];O++){W=this[dX(0x361)]['width']*O;for(let C=0x0;C!==this[dX(0x361)]['width'];C++){w=W+C<<0x2,U=this[dX(0x26c)][w],E=this[dX(0x26c)][w|0x1],z=this[dX(0x26c)][w|0x2],M=this[dX(0x361)][dX(0x1da)][w|0x3];if(M!==0xff)continue;E>=G&&E<=h&&c[dX(0x2dc)]({'x':C,'y':O});}}return c;}[dO(0x24f)](G){var du=dO;const h=s(this['template'][du(0x32f)]/0x2),c=s(this['template']['height']/0x2),w=0x14;let W,U;const E=O=>(O['x']-h)**0x2+(O['y']-c)**0x2,z=O=>{var dx=du;let C=[],l=[];for(let X=0x0;X!==O['length'];X++){(O[X]['x']+O[X]['y'])%w===0x0||Math[dx(0x241)](O[X]['x']-O[X]['y'])%w===0x0?l[dx(0x2dc)](O[X]):C[dx(0x2dc)](O[X]);}return{'grid':l,'other':C};},a=O=>{var dZ=du;O=[...O];let C=[];const l=()=>{var dB=Y;let X=0x0,u=E(O[0x0]),B,Z;for(let m=0x0;m!==O[dB(0x368)];m++){B=E(O[m]);if(B<u){u=B,X=m;if(B===0x0)break;}}return O[dB(0x1d4)](X,0x1)[0x0];};while(O['length'])C[dZ(0x2dc)](l());return C;};this[du(0x351)]=[];for(let O=0x0;O!==0x100;O++){let {grid:C,other:l}=z(this[du(0x353)](O,O));C=a(C),l=a(l),this[du(0x351)][O]=[],l['forEach'](X=>this['layers'][O]['push'](X)),C['forEach'](X=>this[du(0x351)][O][du(0x2dc)](X));}this[du(0x19f)]=[],this[du(0x351)][du(0x28e)](X=>X[du(0x28e)](u=>this[du(0x19f)]['push'](u)));let M;this[du(0x19f)]=this['targets'][du(0x239)](({x:X,y:u})=>{var dm=du;return M=X+u*this[dm(0x361)]['width']<<0x2,[X,u,[this[dm(0x361)][dm(0x1da)][M],this[dm(0x361)]['data'][M|0x1],this[dm(0x361)][dm(0x1da)][M|0x2]]];});}[dO(0x25c)](G){var di=dO;this[di(0x315)]=G;}['getTargets'](){var dv=dO;if(!this[dv(0x19f)])this[dv(0x24f)]();return this[dv(0x19f)];}};},{'sobel':0xe}],0x8:[function(R,D,d){var dn=Y;D[dn(0x29d)]=class{constructor(){var dr=dn;this[dr(0x345)]=null,this[dr(0x1ca)]=null;}['setColors'](T){var dP=dn;this[dP(0x1ca)]=T['map'](s=>[...s]);}['same'](T,I,t=0xf){var db=dn;return Math[db(0x241)](T[0x0]-I[0x0])<t&&Math[db(0x241)](T[0x1]-I[0x1])<t&&Math['abs'](T[0x2]-I[0x2])<t;}[dn(0x37d)](T){return this['RGBToId'](T)!==null;}[dn(0x26b)](T){var dk=dn;let s,I=Infinity,t,J;for(let A=0x2;A!==this[dk(0x1ca)][dk(0x368)];A++){J=this[dk(0x1ca)][A];if(this[dk(0x28b)](J,T))return J;;t=Math['abs'](J[0x0]-T[0x0])+Math[dk(0x241)](J[0x1]-T[0x1])+Math[dk(0x241)](J[0x2]-T[0x2]);t<I&&(I=t,s=A);;};return[...this[dk(0x1ca)][s]];}['IdToRGB'](T){var dj=dn;return this[dj(0x1ca)][T];}[dn(0x375)](T){var dg=dn;for(let s=this['colors'][dg(0x368)]-0x1;s!==-0x1;s--)if(this['same'](this[dg(0x1ca)][s],T))return s;return null;}[dn(0x2e5)](T){var de=dn;this[de(0x345)][typeof T===de(0x285)?this['RGBToId'](T):T][de(0x196)]();}['onColorSelect'](){}['bindColorsWithElements'](T){var dq=dn;T=Array[dq(0x1bf)](T),this[dq(0x345)]={},this[dq(0x1ca)][dq(0x28e)]((s,I)=>{var dp=dq;let t=T['find'](J=>this[dp(0x28b)](s,J['style']['backgroundColor']['match'](/-?\d+/g)[dp(0x239)](A=>+A)));if(t===void 0x0)return console[dp(0x1d9)]('Can\x27t\x20find\x20element\x20for\x20color\x20['+s+']');this[dp(0x345)][I]=t,this[dp(0x345)][I][dp(0x1f9)](dp(0x196),()=>this[dp(0x21e)]({'id':I,'rgb':s}));});}};},{}],0x9:[function(R,D,d){var dy=Y;const {loadImage:T}=R(dy(0x332));class s{constructor({x:I,y:t,width:J,height:A,name:G,src:h}){var dV=dy;this['x1']=I,this['y1']=t,this[dV(0x32f)]=J,this['height']=A,this[dV(0x21a)](),this['name']=G,this[dV(0x35f)]=h,this[dV(0x35a)]=s[dV(0x34d)],this[dV(0x2d0)]=null,this['canvas']=null;}[dy(0x29e)](I,t,J,A){return this['x1']<J&&this['x2']>I&&this['y1']<A&&this['y2']>t;}[dy(0x21a)](){var dN=dy;this['x2']=this['x1']+this[dN(0x32f)],this['y2']=this['y1']+this[dN(0x324)];}[dy(0x1ae)](){var dQ=dy;return this['status']=s[dQ(0x360)],new Promise((I,t)=>{var dK=dQ;if(this[dK(0x35f)]===null)return console['error'](dK(0x19c)),t();;T(this[dK(0x35f)])['then'](J=>{var df=dK;this[df(0x2d0)]=J,this[df(0x2e0)]=document[df(0x2a8)]('canvas'),this[df(0x32f)]=this[df(0x2e0)][df(0x32f)]=this[df(0x2d0)][df(0x32f)],this['height']=this['canvas'][df(0x324)]=this['img'][df(0x324)],this[df(0x21a)](),this[df(0x242)]=this['canvas']['getContext']('2d'),this[df(0x242)][df(0x18f)](this[df(0x2d0)],0x0,0x0),this[df(0x36b)]=this[df(0x242)][df(0x320)](0x0,0x0,this['width'],this[df(0x324)]),this[df(0x1da)]=this['imageData'][df(0x1da)],this[df(0x35a)]=s[df(0x25e)],I(this);})[dK(0x212)](J=>t(J));});}[dy(0x26b)](I){var dH=dy;let t;for(t=0x0;t!==this[dH(0x1da)]['length'];t+=0x4){if(this[dH(0x1da)][t+0x3]===0x0)continue;[this[dH(0x1da)][t],this['data'][t+0x1],this[dH(0x1da)][t+0x2]]=I[dH(0x26b)]([this['data'][t],this[dH(0x1da)][t+0x1],this['data'][t+0x2]]);};this[dH(0x242)][dH(0x334)](this[dH(0x36b)],0x0,0x0);}};s['UNLOADED']=0x0,s[dy(0x360)]=0x1,s[dy(0x25e)]=0x2,D[dy(0x29d)]=s;},{'./functions':0xa}],0xa:[function(R,D,d){var TI=Y;function T(m,i,v){return i>m&&i<v;};function s(m,i){var dF=Y;m[dF(0x1bd)]=m[dF(0x280)]=m[dF(0x2ac)]=m[dF(0x33c)]=i;};function I(m,i){var dS=Y;Object['keys'](m)[dS(0x28e)](v=>i(m[v],v));};function t(m){var T0=Y;document[T0(0x31d)][T0(0x223)](A({'type':T0(0x35c),'html':m}));};function J(m,i){var T1=Y;if(!('Notification'in window))return;const v=()=>new Notification(m,i);if(Notification[T1(0x33d)]==='granted')v();else Notification['permission']!==T1(0x378)&&Notification[T1(0x2f6)](n=>{var T2=T1;if(n===T2(0x1e0))v();});;};function A(m,i=[]){var T3=Y;let v=m[T3(0x2c2)]==='text'?document[T3(0x308)](m[T3(0x238)]||''):document['createElement'](m['type']);m['id']&&v['setAttribute']('id',m['id']);m['class']&&v[T3(0x2f2)]('class',m[T3(0x2d4)]);m[T3(0x35c)]&&v[T3(0x2f2)](T3(0x35c),m[T3(0x35c)]);if(m[T3(0x226)])v[T3(0x363)]=m[T3(0x226)];else m[T3(0x238)]&&(v[T3(0x359)]=m[T3(0x238)]);m[T3(0x205)]&&Object[T3(0x31e)](m[T3(0x205)])[T3(0x28e)](([n,r])=>{var T4=T3;n[T4(0x302)]('on')?v[T4(0x1f9)](n[T4(0x24c)](0x2),r):v[T4(0x1f9)](n,r);});m[T3(0x37c)]&&Object[T3(0x31e)](m['attributes'])[T3(0x28e)](([n,r])=>v[T3(0x2f2)](n,r));m[T3(0x343)]===!![]&&v['attachShadow']({'mode':'open'});if(i[T3(0x368)]!==0x0){const n=m[T3(0x343)]?v[T3(0x273)]:v;i[T3(0x28e)](r=>n['appendChild'](r));}return v;}function G(m){return m?'On':'Off';};function h(m,i=void 0x0){var T5=Y;let v=document[T5(0x2a8)]('a');v[T5(0x1df)]=m[T5(0x229)](T5(0x1cc)),v['download']=i,v[T5(0x196)]();};function c(m){var T6=Y;return document[T6(0x288)](m);};function w(m){return new Promise((i,v)=>{var T7=Y;let n=new Image();n['crossOrigin']='',n[T7(0x202)]=()=>i(n),n[T7(0x296)]=v,n[T7(0x35f)]=m;});};function W(m){var T8=Y;return A({'type':T8(0x379)},[A({'type':'div','class':T8(0x277),'html':T8(0x1c4)+m+T8(0x26e)})]);};function U(){var T9=Y;let m=![];try{m=window!=window[T9(0x252)]||document!=top[T9(0x310)]||self[T9(0x1aa)]!=top[T9(0x1aa)];}catch(i){m=!![];};return m;};function E(m){var TR=Y;return window[TR(0x1f1)]={'imports':{'imported_func':i=>console[TR(0x207)](i)}},fetch(m)[TR(0x233)](i=>i[TR(0x338)]())['then'](i=>WebAssembly[TR(0x1f3)](i,window['importObject']));};function z(m,v,n){var TD=Y;let r=document['createElement']('canvas'),P=r['getContext']('2d');r[TD(0x32f)]=v,r[TD(0x324)]=n;let b=P['getImageData'](0x0,0x0,v,n);for(let k=0x0;k!==m[TD(0x368)];k++)b[TD(0x1da)][k]=m[k];return P[TD(0x334)](b,0x0,0x0),r;};function a(m,i){var Td=Y;return Math[Td(0x33e)](m-0.5+Math['random']()*(i-m+0x1));}function M(){var TT=Y;return B(TT(0x1f4));}async function O(m){var TL=Y;const i=new FormData();i[TL(0x269)](TL(0x2fa),!![]);const v=await fetch(u+TL(0x1f0),{'credentials':TL(0x2e4),'method':TL(0x2bb),'body':i});v['ok']?m(await v[TL(0x231)]()):m([]);}async function C(m,i){var TY=Y;const v=new FormData();v[TY(0x269)](TY(0x1d7),m);const n=await fetch(u+TY(0x1f0),{'credentials':TY(0x2e4),'method':'POST','body':v});i(n['ok'],await n['text']());}function l(){return B('/banme');}const X=function m(){var Ts=Y;if(!window['ssv']||!window['ssv'][Ts(0x25b)]||window[Ts(0x1aa)][Ts(0x36c)]==='fuckyouarkeros.fun')return'';const i=window[Ts(0x1aa)][Ts(0x36c)][Ts(0x2ea)]('.');return i[Ts(0x368)]>0x2&&i[Ts(0x1a1)](),window[Ts(0x2c6)][Ts(0x25b)]+'.'+i[Ts(0x1dc)]('.');}(),u=(X&&window[TI(0x1aa)][TI(0x23d)]+'//'+X)+'/api';async function B(i,v=!![],n=!![]){var Tt=TI;n&&(i=''+u+i);try{const r=await Z(i,{'credentials':v?'include':Tt(0x2a3)});return r[Tt(0x231)]();}catch(P){return{'errors':[Tt(0x30a)]};}}async function Z(i,v={}){var TJ=TI;const {timeout:timeout=0x7530}=v,n=new AbortController(),r=setTimeout(()=>n[TJ(0x369)](),timeout),P=await fetch(i,{...v,'signal':n[TJ(0x2bf)]});return clearTimeout(r),P;}D[TI(0x29d)]={'between':T,'antialiasing':s,'objForEach':I,'injectCSS':t,'trySendNotification':J,'factory':A,'switcherText':G,'downloadCanvas':h,'$':c,'loadImage':w,'createPanelButton':W,'isFrame':U,'loadWASM':E,'createCanvasFromData':z,'rand':a,'fetchApiMe':M,'getModList':O,'submitRemMod':C,'banMe':l};},{}],0xb:[function(R,D,d){'use strict';var TA=Y;d[TA(0x2a0)]=h,d[TA(0x323)]=w,d[TA(0x267)]=E;var T=[],s=[],I=typeof Uint8Array!==TA(0x319)?Uint8Array:Array,t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var J=0x0,A=t['length'];J<A;++J){T[J]=t[J],s[t[TA(0x1a8)](J)]=J;}s['-'['charCodeAt'](0x0)]=0x3e,s['_'[TA(0x1a8)](0x0)]=0x3f;function G(z){var TG=TA,a=z[TG(0x368)];if(a%0x4>0x0)throw new Error(TG(0x2bc));var M=z['indexOf']('=');if(M===-0x1)M=a;var O=M===a?0x0:0x4-M%0x4;return[M,O];}function h(z){var a=G(z),M=a[0x0],O=a[0x1];return(M+O)*0x3/0x4-O;}function c(z,a,M){return(a+M)*0x3/0x4-M;}function w(z){var Th=TA,a,M=G(z),O=M[0x0],C=M[0x1],l=new I(c(z,O,C)),X=0x0,u=C>0x0?O-0x4:O,B;for(B=0x0;B<u;B+=0x4){a=s[z[Th(0x1a8)](B)]<<0x12|s[z[Th(0x1a8)](B+0x1)]<<0xc|s[z[Th(0x1a8)](B+0x2)]<<0x6|s[z[Th(0x1a8)](B+0x3)],l[X++]=a>>0x10&0xff,l[X++]=a>>0x8&0xff,l[X++]=a&0xff;}return C===0x2&&(a=s[z[Th(0x1a8)](B)]<<0x2|s[z[Th(0x1a8)](B+0x1)]>>0x4,l[X++]=a&0xff),C===0x1&&(a=s[z[Th(0x1a8)](B)]<<0xa|s[z['charCodeAt'](B+0x1)]<<0x4|s[z[Th(0x1a8)](B+0x2)]>>0x2,l[X++]=a>>0x8&0xff,l[X++]=a&0xff),l;}function W(z){return T[z>>0x12&0x3f]+T[z>>0xc&0x3f]+T[z>>0x6&0x3f]+T[z&0x3f];}function U(z,a,M){var Tc=TA,O,C=[];for(var l=a;l<M;l+=0x3){O=(z[l]<<0x10&0xff0000)+(z[l+0x1]<<0x8&0xff00)+(z[l+0x2]&0xff),C[Tc(0x2dc)](W(O));}return C[Tc(0x1dc)]('');}function E(z){var Tw=TA,a,M=z[Tw(0x368)],O=M%0x3,C=[],l=0x3fff;for(var X=0x0,u=M-O;X<u;X+=l){C[Tw(0x2dc)](U(z,X,X+l>u?u:X+l));}if(O===0x1)a=z[M-0x1],C[Tw(0x2dc)](T[a>>0x2]+T[a<<0x4&0x3f]+'==');else O===0x2&&(a=(z[M-0x2]<<0x8)+z[M-0x1],C[Tw(0x2dc)](T[a>>0xa]+T[a>>0x4&0x3f]+T[a<<0x2&0x3f]+'='));return C[Tw(0x1dc)]('');}},{}],0xc:[function(R,D,d){var Lv=Y;(function(T){/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
'use strict';var TW=Y;var s=R(TW(0x206)),I=R('ieee754');d[TW(0x2a2)]=T,d['SlowBuffer']=M,d[TW(0x18d)]=0x32;var t=0x7fffffff;d[TW(0x248)]=t,T[TW(0x228)]=J();!T[TW(0x228)]&&typeof console!==TW(0x319)&&typeof console['error']===TW(0x2f7)&&console[TW(0x1d9)](TW(0x291)+'`buffer`\x20v5.x.\x20Use\x20`buffer`\x20v4.x\x20if\x20you\x20require\x20old\x20browser\x20support.');function J(){var TU=TW;try{var R5=new Uint8Array(0x1);return R5[TU(0x36f)]={'__proto__':Uint8Array[TU(0x32c)],'foo':function(){return 0x2a;}},R5[TU(0x2ca)]()===0x2a;}catch(R6){return![];}}Object[TW(0x2e6)](T[TW(0x32c)],TW(0x21d),{'enumerable':!![],'get':function(){var TE=TW;if(!T[TE(0x29c)](this))return undefined;return this[TE(0x1dd)];}}),Object[TW(0x2e6)](T[TW(0x32c)],TW(0x36a),{'enumerable':!![],'get':function(){var Tz=TW;if(!T['isBuffer'](this))return undefined;return this[Tz(0x1b7)];}});function A(R5){var Ta=TW;if(R5>t)throw new RangeError(Ta(0x35d)+R5+'\x22\x20is\x20invalid\x20for\x20option\x20\x22size\x22');var R6=new Uint8Array(R5);return R6[Ta(0x36f)]=T[Ta(0x32c)],R6;}function T(R5,R6,R7){var TM=TW;if(typeof R5===TM(0x2d7)){if(typeof R6===TM(0x2e1))throw new TypeError(TM(0x2ba));return w(R5);}return G(R5,R6,R7);}typeof Symbol!==TW(0x319)&&Symbol[TW(0x292)]!=null&&T[Symbol['species']]===T&&Object[TW(0x2e6)](T,Symbol[TW(0x292)],{'value':null,'configurable':!![],'enumerable':![],'writable':![]});T[TW(0x1fd)]=0x2000;function G(R5,R6,R7){var TO=TW;if(typeof R5==='string')return W(R5,R6);if(ArrayBuffer['isView'](R5))return U(R5);if(R5==null)throw TypeError('The\x20first\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20ArrayBuffer,\x20Array,\x20'+TO(0x367)+typeof R5);if(R3(R5,ArrayBuffer)||R5&&R3(R5[TO(0x1dd)],ArrayBuffer))return E(R5,R6,R7);if(typeof R5===TO(0x2d7))throw new TypeError('The\x20\x22value\x22\x20argument\x20must\x20not\x20be\x20of\x20type\x20number.\x20Received\x20type\x20number');var R8=R5[TO(0x282)]&&R5[TO(0x282)]();if(R8!=null&&R8!==R5)return T[TO(0x1bf)](R8,R6,R7);var R9=z(R5);if(R9)return R9;if(typeof Symbol!=='undefined'&&Symbol[TO(0x1b4)]!=null&&typeof R5[Symbol[TO(0x1b4)]]===TO(0x2f7))return T[TO(0x1bf)](R5[Symbol['toPrimitive']](TO(0x2e1)),R6,R7);throw new TypeError(TO(0x1b0)+TO(0x367)+typeof R5);}T[TW(0x1bf)]=function(R5,R6,R7){return G(R5,R6,R7);},T['prototype'][TW(0x36f)]=Uint8Array[TW(0x32c)],T[TW(0x36f)]=Uint8Array;function h(R5){var TC=TW;if(typeof R5!=='number')throw new TypeError(TC(0x249));else{if(R5<0x0)throw new RangeError(TC(0x35d)+R5+TC(0x197));}}function c(R5,R6,R7){var Tl=TW;h(R5);if(R5<=0x0)return A(R5);if(R6!==undefined)return typeof R7===Tl(0x2e1)?A(R5)[Tl(0x254)](R6,R7):A(R5)['fill'](R6);return A(R5);}T[TW(0x2e3)]=function(R5,R6,R7){return c(R5,R6,R7);};function w(R5){return h(R5),A(R5<0x0?0x0:a(R5)|0x0);}T[TW(0x1ff)]=function(R5){return w(R5);},T[TW(0x2ee)]=function(R5){return w(R5);};function W(R5,R6){var TX=TW;(typeof R6!==TX(0x2e1)||R6==='')&&(R6=TX(0x283));if(!T['isEncoding'](R6))throw new TypeError(TX(0x27b)+R6);var R7=O(R5,R6)|0x0,R8=A(R7),R9=R8[TX(0x37e)](R5,R6);return R9!==R7&&(R8=R8[TX(0x321)](0x0,R9)),R8;}function U(R5){var Tu=TW,R6=R5[Tu(0x368)]<0x0?0x0:a(R5[Tu(0x368)])|0x0,R7=A(R6);for(var R8=0x0;R8<R6;R8+=0x1){R7[R8]=R5[R8]&0xff;}return R7;}function E(R5,R6,R7){var Tx=TW;if(R6<0x0||R5['byteLength']<R6)throw new RangeError(Tx(0x2ad));if(R5[Tx(0x2a0)]<R6+(R7||0x0))throw new RangeError(Tx(0x232));var R8;if(R6===undefined&&R7===undefined)R8=new Uint8Array(R5);else R7===undefined?R8=new Uint8Array(R5,R6):R8=new Uint8Array(R5,R6,R7);return R8[Tx(0x36f)]=T['prototype'],R8;}function z(R5){var TB=TW;if(T['isBuffer'](R5)){var R6=a(R5[TB(0x368)])|0x0,R7=A(R6);if(R7[TB(0x368)]===0x0)return R7;return R5[TB(0x33a)](R7,0x0,0x0,R6),R7;}if(R5[TB(0x368)]!==undefined){if(typeof R5['length']!==TB(0x2d7)||R4(R5[TB(0x368)]))return A(0x0);return U(R5);}if(R5[TB(0x2c2)]==='Buffer'&&Array[TB(0x290)](R5[TB(0x1da)]))return U(R5[TB(0x1da)]);}function a(R5){var TZ=TW;if(R5>=t)throw new RangeError('Attempt\x20to\x20allocate\x20Buffer\x20larger\x20than\x20maximum\x20'+TZ(0x20f)+t[TZ(0x1fc)](0x10)+TZ(0x270));return R5|0x0;}function M(R5){return+R5!=R5&&(R5=0x0),T['alloc'](+R5);}T[TW(0x29c)]=function R5(R6){var Tm=TW;return R6!=null&&R6['_isBuffer']===!![]&&R6!==T[Tm(0x32c)];},T[TW(0x340)]=function R6(R7,R8){var Ti=TW;if(R3(R7,Uint8Array))R7=T[Ti(0x1bf)](R7,R7[Ti(0x36a)],R7[Ti(0x2a0)]);if(R3(R8,Uint8Array))R8=T['from'](R8,R8[Ti(0x36a)],R8[Ti(0x2a0)]);if(!T[Ti(0x29c)](R7)||!T['isBuffer'](R8))throw new TypeError('The\x20\x22buf1\x22,\x20\x22buf2\x22\x20arguments\x20must\x20be\x20one\x20of\x20type\x20Buffer\x20or\x20Uint8Array');if(R7===R8)return 0x0;var R9=R7[Ti(0x368)],RR=R8[Ti(0x368)];for(var RD=0x0,Rd=Math[Ti(0x220)](R9,RR);RD<Rd;++RD){if(R7[RD]!==R8[RD]){R9=R7[RD],RR=R8[RD];break;}}if(R9<RR)return-0x1;if(RR<R9)return 0x1;return 0x0;},T[TW(0x22a)]=function R7(R8){var Tv=TW;switch(String(R8)[Tv(0x2ef)]()){case Tv(0x209):case'utf8':case Tv(0x23c):case Tv(0x2be):case Tv(0x329):case'binary':case Tv(0x1c7):case'ucs2':case'ucs-2':case Tv(0x190):case Tv(0x203):return!![];default:return![];}},T[TW(0x1d8)]=function R8(R9,RR){var Tn=TW;if(!Array[Tn(0x290)](R9))throw new TypeError(Tn(0x22f));if(R9[Tn(0x368)]===0x0)return T[Tn(0x2e3)](0x0);var RD;if(RR===undefined){RR=0x0;for(RD=0x0;RD<R9[Tn(0x368)];++RD){RR+=R9[RD][Tn(0x368)];}}var Rd=T['allocUnsafe'](RR),RT=0x0;for(RD=0x0;RD<R9[Tn(0x368)];++RD){var RL=R9[RD];R3(RL,Uint8Array)&&(RL=T[Tn(0x1bf)](RL));if(!T['isBuffer'](RL))throw new TypeError(Tn(0x22f));RL[Tn(0x33a)](Rd,RT),RT+=RL['length'];}return Rd;};function O(R9,RR){var Tr=TW;if(T['isBuffer'](R9))return R9[Tr(0x368)];if(ArrayBuffer['isView'](R9)||R3(R9,ArrayBuffer))return R9[Tr(0x2a0)];if(typeof R9!==Tr(0x2e1))throw new TypeError(Tr(0x2a7)+'Received\x20type\x20'+typeof R9);var RD=R9[Tr(0x368)],Rd=arguments['length']>0x2&&arguments[0x2]===!![];if(!Rd&&RD===0x0)return 0x0;var RT=![];for(;;){switch(RR){case Tr(0x2be):case Tr(0x329):case Tr(0x350):return RD;case Tr(0x283):case Tr(0x23c):return F(R9)['length'];case Tr(0x1ed):case'ucs-2':case'utf16le':case Tr(0x203):return RD*0x2;case Tr(0x209):return RD>>>0x1;case Tr(0x1c7):return R1(R9)[Tr(0x368)];default:if(RT)return Rd?-0x1:F(R9)[Tr(0x368)];RR=(''+RR)[Tr(0x2ef)](),RT=!![];}}}T[TW(0x2a0)]=O;function C(R9,RR,RD){var TP=TW,Rd=![];(RR===undefined||RR<0x0)&&(RR=0x0);if(RR>this['length'])return'';(RD===undefined||RD>this[TP(0x368)])&&(RD=this['length']);if(RD<=0x0)return'';RD>>>=0x0,RR>>>=0x0;if(RD<=RR)return'';if(!R9)R9=TP(0x283);while(!![]){switch(R9){case TP(0x209):return e(this,RR,RD);case TP(0x283):case TP(0x23c):return P(this,RR,RD);case'ascii':return j(this,RR,RD);case'latin1':case TP(0x350):return g(this,RR,RD);case TP(0x1c7):return r(this,RR,RD);case TP(0x1ed):case TP(0x284):case TP(0x190):case TP(0x203):return q(this,RR,RD);default:if(Rd)throw new TypeError(TP(0x27b)+R9);R9=(R9+'')[TP(0x2ef)](),Rd=!![];}}}T[TW(0x32c)][TW(0x2b4)]=!![];function l(R9,RR,RD){var Rd=R9[RR];R9[RR]=R9[RD],R9[RD]=Rd;}T[TW(0x32c)][TW(0x230)]=function R9(){var Tb=TW,RR=this[Tb(0x368)];if(RR%0x2!==0x0)throw new RangeError(Tb(0x2df));for(var RD=0x0;RD<RR;RD+=0x2){l(this,RD,RD+0x1);}return this;},T['prototype'][TW(0x337)]=function RR(){var Tk=TW,RD=this['length'];if(RD%0x4!==0x0)throw new RangeError(Tk(0x24d));for(var Rd=0x0;Rd<RD;Rd+=0x4){l(this,Rd,Rd+0x3),l(this,Rd+0x1,Rd+0x2);}return this;},T[TW(0x32c)][TW(0x1fb)]=function RD(){var Tj=TW,Rd=this[Tj(0x368)];if(Rd%0x8!==0x0)throw new RangeError('Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2064-bits');for(var RT=0x0;RT<Rd;RT+=0x8){l(this,RT,RT+0x7),l(this,RT+0x1,RT+0x6),l(this,RT+0x2,RT+0x5),l(this,RT+0x3,RT+0x4);}return this;},T[TW(0x32c)][TW(0x1fc)]=function Rd(){var Tg=TW,RT=this[Tg(0x368)];if(RT===0x0)return'';if(arguments[Tg(0x368)]===0x0)return P(this,0x0,RT);return C[Tg(0x2d5)](this,arguments);},T[TW(0x32c)][TW(0x333)]=T[TW(0x32c)][TW(0x1fc)],T[TW(0x32c)][TW(0x1cf)]=function RT(RL){var Te=TW;if(!T['isBuffer'](RL))throw new TypeError(Te(0x271));if(this===RL)return!![];return T['compare'](this,RL)===0x0;},T['prototype'][TW(0x376)]=function RL(){var Tq=TW,RY='',Rs=d[Tq(0x18d)];RY=this[Tq(0x1fc)]('hex',0x0,Rs)[Tq(0x1bb)](/(.{2})/g,Tq(0x227))[Tq(0x1d2)]();if(this[Tq(0x368)]>Rs)RY+=Tq(0x30d);return Tq(0x1a2)+RY+'>';},T[TW(0x32c)][TW(0x340)]=function RY(Rs,RI,Rt,RJ,RA){var Tp=TW;R3(Rs,Uint8Array)&&(Rs=T[Tp(0x1bf)](Rs,Rs[Tp(0x36a)],Rs[Tp(0x2a0)]));if(!T[Tp(0x29c)](Rs))throw new TypeError(Tp(0x2af)+Tp(0x27d)+typeof Rs);RI===undefined&&(RI=0x0);Rt===undefined&&(Rt=Rs?Rs[Tp(0x368)]:0x0);RJ===undefined&&(RJ=0x0);RA===undefined&&(RA=this[Tp(0x368)]);if(RI<0x0||Rt>Rs[Tp(0x368)]||RJ<0x0||RA>this['length'])throw new RangeError('out\x20of\x20range\x20index');if(RJ>=RA&&RI>=Rt)return 0x0;if(RJ>=RA)return-0x1;if(RI>=Rt)return 0x1;RI>>>=0x0,Rt>>>=0x0,RJ>>>=0x0,RA>>>=0x0;if(this===Rs)return 0x0;var RG=RA-RJ,Rh=Rt-RI,Rc=Math[Tp(0x220)](RG,Rh),Rw=this['slice'](RJ,RA),RW=Rs[Tp(0x321)](RI,Rt);for(var RU=0x0;RU<Rc;++RU){if(Rw[RU]!==RW[RU]){RG=Rw[RU],Rh=RW[RU];break;}}if(RG<Rh)return-0x1;if(Rh<RG)return 0x1;return 0x0;};function X(Rs,RI,Rt,RJ,RA){var Ty=TW;if(Rs[Ty(0x368)]===0x0)return-0x1;if(typeof Rt===Ty(0x2e1))RJ=Rt,Rt=0x0;else{if(Rt>0x7fffffff)Rt=0x7fffffff;else Rt<-0x80000000&&(Rt=-0x80000000);}Rt=+Rt;R4(Rt)&&(Rt=RA?0x0:Rs['length']-0x1);if(Rt<0x0)Rt=Rs[Ty(0x368)]+Rt;if(Rt>=Rs['length']){if(RA)return-0x1;else Rt=Rs['length']-0x1;}else{if(Rt<0x0){if(RA)Rt=0x0;else return-0x1;}}typeof RI===Ty(0x2e1)&&(RI=T[Ty(0x1bf)](RI,RJ));if(T[Ty(0x29c)](RI)){if(RI[Ty(0x368)]===0x0)return-0x1;return u(Rs,RI,Rt,RJ,RA);}else{if(typeof RI==='number'){RI=RI&0xff;if(typeof Uint8Array[Ty(0x32c)][Ty(0x200)]===Ty(0x2f7))return RA?Uint8Array[Ty(0x32c)][Ty(0x200)][Ty(0x1f6)](Rs,RI,Rt):Uint8Array[Ty(0x32c)][Ty(0x224)][Ty(0x1f6)](Rs,RI,Rt);return u(Rs,[RI],Rt,RJ,RA);}}throw new TypeError(Ty(0x311));}function u(Rs,RI,Rt,RJ,RA){var TV=TW,RG=0x1,Rh=Rs[TV(0x368)],Rc=RI[TV(0x368)];if(RJ!==undefined){RJ=String(RJ)['toLowerCase']();if(RJ==='ucs2'||RJ===TV(0x284)||RJ===TV(0x190)||RJ===TV(0x203)){if(Rs[TV(0x368)]<0x2||RI[TV(0x368)]<0x2)return-0x1;RG=0x2,Rh/=0x2,Rc/=0x2,Rt/=0x2;}}function Rw(Ra,RM){var TN=TV;return RG===0x1?Ra[RM]:Ra[TN(0x193)](RM*RG);}var RW;if(RA){var RU=-0x1;for(RW=Rt;RW<Rh;RW++){if(Rw(Rs,RW)===Rw(RI,RU===-0x1?0x0:RW-RU)){if(RU===-0x1)RU=RW;if(RW-RU+0x1===Rc)return RU*RG;}else{if(RU!==-0x1)RW-=RW-RU;RU=-0x1;}}}else{if(Rt+Rc>Rh)Rt=Rh-Rc;for(RW=Rt;RW>=0x0;RW--){var RE=!![];for(var Rz=0x0;Rz<Rc;Rz++){if(Rw(Rs,RW+Rz)!==Rw(RI,Rz)){RE=![];break;}}if(RE)return RW;}}return-0x1;}T['prototype'][TW(0x2f3)]=function Rs(RI,Rt,RJ){var TQ=TW;return this[TQ(0x200)](RI,Rt,RJ)!==-0x1;},T[TW(0x32c)][TW(0x200)]=function RI(Rt,RJ,RA){return X(this,Rt,RJ,RA,!![]);},T[TW(0x32c)]['lastIndexOf']=function Rt(RJ,RA,RG){return X(this,RJ,RA,RG,![]);};function B(RJ,RA,RG,Rh){var To=TW;RG=Number(RG)||0x0;var Rc=RJ['length']-RG;!Rh?Rh=Rc:(Rh=Number(Rh),Rh>Rc&&(Rh=Rc));var Rw=RA[To(0x368)];Rh>Rw/0x2&&(Rh=Rw/0x2);for(var RW=0x0;RW<Rh;++RW){var RU=parseInt(RA[To(0x1e1)](RW*0x2,0x2),0x10);if(R4(RU))return RW;RJ[RG+RW]=RU;}return RW;}function Z(RJ,RA,RG,Rh){var TK=TW;return R2(F(RA,RJ[TK(0x368)]-RG),RJ,RG,Rh);}function m(RJ,RA,RG,Rh){return R2(S(RA),RJ,RG,Rh);}function i(RJ,RA,RG,Rh){return m(RJ,RA,RG,Rh);}function v(RJ,RA,RG,Rh){return R2(R1(RA),RJ,RG,Rh);}function n(RJ,RA,RG,Rh){var Tf=TW;return R2(R0(RA,RJ[Tf(0x368)]-RG),RJ,RG,Rh);}T[TW(0x32c)][TW(0x37e)]=function RJ(RA,RG,Rh,Rc){var TH=TW;if(RG===undefined)Rc=TH(0x283),Rh=this[TH(0x368)],RG=0x0;else{if(Rh===undefined&&typeof RG==='string')Rc=RG,Rh=this[TH(0x368)],RG=0x0;else{if(isFinite(RG)){RG=RG>>>0x0;if(isFinite(Rh)){Rh=Rh>>>0x0;if(Rc===undefined)Rc=TH(0x283);}else Rc=Rh,Rh=undefined;}else throw new Error(TH(0x18e));}}var Rw=this['length']-RG;if(Rh===undefined||Rh>Rw)Rh=Rw;if(RA['length']>0x0&&(Rh<0x0||RG<0x0)||RG>this[TH(0x368)])throw new RangeError(TH(0x366));if(!Rc)Rc=TH(0x283);var RW=![];for(;;){switch(Rc){case TH(0x209):return B(this,RA,RG,Rh);case'utf8':case TH(0x23c):return Z(this,RA,RG,Rh);case TH(0x2be):return m(this,RA,RG,Rh);case'latin1':case TH(0x350):return i(this,RA,RG,Rh);case TH(0x1c7):return v(this,RA,RG,Rh);case TH(0x1ed):case TH(0x284):case'utf16le':case'utf-16le':return n(this,RA,RG,Rh);default:if(RW)throw new TypeError(TH(0x27b)+Rc);Rc=(''+Rc)[TH(0x2ef)](),RW=!![];}}},T['prototype'][TW(0x1ac)]=function RA(){var TF=TW;return{'type':TF(0x2a2),'data':Array[TF(0x32c)]['slice']['call'](this[TF(0x2e7)]||this,0x0)};};function r(RG,Rh,Rc){var TS=TW;return Rh===0x0&&Rc===RG[TS(0x368)]?s[TS(0x267)](RG):s[TS(0x267)](RG[TS(0x321)](Rh,Rc));}function P(RG,Rh,Rc){var L0=TW;Rc=Math[L0(0x220)](RG['length'],Rc);var Rw=[],RW=Rh;while(RW<Rc){var RU=RG[RW],RE=null,Rz=RU>0xef?0x4:RU>0xdf?0x3:RU>0xbf?0x2:0x1;if(RW+Rz<=Rc){var Ra,RM,RO,RC;switch(Rz){case 0x1:RU<0x80&&(RE=RU);break;case 0x2:Ra=RG[RW+0x1];(Ra&0xc0)===0x80&&(RC=(RU&0x1f)<<0x6|Ra&0x3f,RC>0x7f&&(RE=RC));break;case 0x3:Ra=RG[RW+0x1],RM=RG[RW+0x2];(Ra&0xc0)===0x80&&(RM&0xc0)===0x80&&(RC=(RU&0xf)<<0xc|(Ra&0x3f)<<0x6|RM&0x3f,RC>0x7ff&&(RC<0xd800||RC>0xdfff)&&(RE=RC));break;case 0x4:Ra=RG[RW+0x1],RM=RG[RW+0x2],RO=RG[RW+0x3];(Ra&0xc0)===0x80&&(RM&0xc0)===0x80&&(RO&0xc0)===0x80&&(RC=(RU&0xf)<<0x12|(Ra&0x3f)<<0xc|(RM&0x3f)<<0x6|RO&0x3f,RC>0xffff&&RC<0x110000&&(RE=RC));}}if(RE===null)RE=0xfffd,Rz=0x1;else RE>0xffff&&(RE-=0x10000,Rw['push'](RE>>>0xa&0x3ff|0xd800),RE=0xdc00|RE&0x3ff);Rw[L0(0x2dc)](RE),RW+=Rz;}return k(Rw);}var b=0x1000;function k(RG){var L1=TW,Rh=RG[L1(0x368)];if(Rh<=b)return String['fromCharCode'][L1(0x2d5)](String,RG);var Rc='',Rw=0x0;while(Rw<Rh){Rc+=String[L1(0x1e3)][L1(0x2d5)](String,RG[L1(0x321)](Rw,Rw+=b));}return Rc;}function j(RG,Rh,Rc){var L2=TW,Rw='';Rc=Math[L2(0x220)](RG['length'],Rc);for(var RW=Rh;RW<Rc;++RW){Rw+=String[L2(0x1e3)](RG[RW]&0x7f);}return Rw;}function g(RG,Rh,Rc){var L3=TW,Rw='';Rc=Math['min'](RG[L3(0x368)],Rc);for(var RW=Rh;RW<Rc;++RW){Rw+=String[L3(0x1e3)](RG[RW]);}return Rw;}function e(RG,Rh,Rc){var L4=TW,Rw=RG[L4(0x368)];if(!Rh||Rh<0x0)Rh=0x0;if(!Rc||Rc<0x0||Rc>Rw)Rc=Rw;var RW='';for(var RU=Rh;RU<Rc;++RU){RW+=H(RG[RU]);}return RW;}function q(RG,Rh,Rc){var L5=TW,Rw=RG[L5(0x321)](Rh,Rc),RW='';for(var RU=0x0;RU<Rw[L5(0x368)];RU+=0x2){RW+=String[L5(0x1e3)](Rw[RU]+Rw[RU+0x1]*0x100);}return RW;}T[TW(0x32c)][TW(0x321)]=function RG(Rh,Rc){var L6=TW,Rw=this[L6(0x368)];Rh=~~Rh,Rc=Rc===undefined?Rw:~~Rc;if(Rh<0x0){Rh+=Rw;if(Rh<0x0)Rh=0x0;}else Rh>Rw&&(Rh=Rw);if(Rc<0x0){Rc+=Rw;if(Rc<0x0)Rc=0x0;}else Rc>Rw&&(Rc=Rw);if(Rc<Rh)Rc=Rh;var RW=this[L6(0x314)](Rh,Rc);return RW[L6(0x36f)]=T['prototype'],RW;};function p(Rh,Rc,Rw){var L7=TW;if(Rh%0x1!==0x0||Rh<0x0)throw new RangeError(L7(0x1fa));if(Rh+Rc>Rw)throw new RangeError('Trying\x20to\x20access\x20beyond\x20buffer\x20length');}T[TW(0x32c)]['readUIntLE']=function Rh(Rc,Rw,RW){var L8=TW;Rc=Rc>>>0x0,Rw=Rw>>>0x0;if(!RW)p(Rc,Rw,this[L8(0x368)]);var RU=this[Rc],RE=0x1,Rz=0x0;while(++Rz<Rw&&(RE*=0x100)){RU+=this[Rc+Rz]*RE;}return RU;},T[TW(0x32c)]['readUIntBE']=function Rc(Rw,RW,RU){var L9=TW;Rw=Rw>>>0x0,RW=RW>>>0x0;!RU&&p(Rw,RW,this[L9(0x368)]);var RE=this[Rw+--RW],Rz=0x1;while(RW>0x0&&(Rz*=0x100)){RE+=this[Rw+--RW]*Rz;}return RE;},T[TW(0x32c)][TW(0x1d1)]=function Rw(RW,RU){var LR=TW;RW=RW>>>0x0;if(!RU)p(RW,0x1,this[LR(0x368)]);return this[RW];},T[TW(0x32c)][TW(0x2c3)]=function RW(RU,RE){var LD=TW;RU=RU>>>0x0;if(!RE)p(RU,0x2,this[LD(0x368)]);return this[RU]|this[RU+0x1]<<0x8;},T['prototype']['readUInt16BE']=function RU(RE,Rz){var Ld=TW;RE=RE>>>0x0;if(!Rz)p(RE,0x2,this[Ld(0x368)]);return this[RE]<<0x8|this[RE+0x1];},T[TW(0x32c)][TW(0x1a6)]=function RE(Rz,Ra){var LT=TW;Rz=Rz>>>0x0;if(!Ra)p(Rz,0x4,this[LT(0x368)]);return(this[Rz]|this[Rz+0x1]<<0x8|this[Rz+0x2]<<0x10)+this[Rz+0x3]*0x1000000;},T['prototype']['readUInt32BE']=function Rz(Ra,RM){var LL=TW;Ra=Ra>>>0x0;if(!RM)p(Ra,0x4,this[LL(0x368)]);return this[Ra]*0x1000000+(this[Ra+0x1]<<0x10|this[Ra+0x2]<<0x8|this[Ra+0x3]);},T[TW(0x32c)]['readIntLE']=function Ra(RM,RO,RC){RM=RM>>>0x0,RO=RO>>>0x0;if(!RC)p(RM,RO,this['length']);var Rl=this[RM],RX=0x1,Ru=0x0;while(++Ru<RO&&(RX*=0x100)){Rl+=this[RM+Ru]*RX;}RX*=0x80;if(Rl>=RX)Rl-=Math['pow'](0x2,0x8*RO);return Rl;},T[TW(0x32c)]['readIntBE']=function RM(RO,RC,Rl){var LY=TW;RO=RO>>>0x0,RC=RC>>>0x0;if(!Rl)p(RO,RC,this['length']);var RX=RC,Ru=0x1,Rx=this[RO+--RX];while(RX>0x0&&(Ru*=0x100)){Rx+=this[RO+--RX]*Ru;}Ru*=0x80;if(Rx>=Ru)Rx-=Math[LY(0x2fc)](0x2,0x8*RC);return Rx;},T[TW(0x32c)][TW(0x20e)]=function RO(RC,Rl){var Ls=TW;RC=RC>>>0x0;if(!Rl)p(RC,0x1,this[Ls(0x368)]);if(!(this[RC]&0x80))return this[RC];return(0xff-this[RC]+0x1)*-0x1;},T[TW(0x32c)]['readInt16LE']=function RC(Rl,RX){var LI=TW;Rl=Rl>>>0x0;if(!RX)p(Rl,0x2,this[LI(0x368)]);var Ru=this[Rl]|this[Rl+0x1]<<0x8;return Ru&0x8000?Ru|0xffff0000:Ru;},T[TW(0x32c)][TW(0x341)]=function Rl(RX,Ru){RX=RX>>>0x0;if(!Ru)p(RX,0x2,this['length']);var Rx=this[RX+0x1]|this[RX]<<0x8;return Rx&0x8000?Rx|0xffff0000:Rx;},T['prototype'][TW(0x19d)]=function RX(Ru,Rx){var Lt=TW;Ru=Ru>>>0x0;if(!Rx)p(Ru,0x4,this[Lt(0x368)]);return this[Ru]|this[Ru+0x1]<<0x8|this[Ru+0x2]<<0x10|this[Ru+0x3]<<0x18;},T[TW(0x32c)]['readInt32BE']=function Ru(Rx,RB){var LJ=TW;Rx=Rx>>>0x0;if(!RB)p(Rx,0x4,this[LJ(0x368)]);return this[Rx]<<0x18|this[Rx+0x1]<<0x10|this[Rx+0x2]<<0x8|this[Rx+0x3];},T[TW(0x32c)]['readFloatLE']=function Rx(RB,RZ){var LA=TW;RB=RB>>>0x0;if(!RZ)p(RB,0x4,this[LA(0x368)]);return I[LA(0x31a)](this,RB,!![],0x17,0x4);},T['prototype'][TW(0x244)]=function RB(RZ,Rm){var LG=TW;RZ=RZ>>>0x0;if(!Rm)p(RZ,0x4,this[LG(0x368)]);return I[LG(0x31a)](this,RZ,![],0x17,0x4);},T[TW(0x32c)][TW(0x1e6)]=function RZ(Rm,Ri){var Lh=TW;Rm=Rm>>>0x0;if(!Ri)p(Rm,0x8,this[Lh(0x368)]);return I[Lh(0x31a)](this,Rm,!![],0x34,0x8);},T[TW(0x32c)][TW(0x2aa)]=function Rm(Ri,Rv){var Lc=TW;Ri=Ri>>>0x0;if(!Rv)p(Ri,0x8,this[Lc(0x368)]);return I['read'](this,Ri,![],0x34,0x8);};function V(Ri,Rv,Rn,Rr,RP,Rb){var Lw=TW;if(!T['isBuffer'](Ri))throw new TypeError(Lw(0x1a3));if(Rv>RP||Rv<Rb)throw new RangeError('\x22value\x22\x20argument\x20is\x20out\x20of\x20bounds');if(Rn+Rr>Ri['length'])throw new RangeError('Index\x20out\x20of\x20range');}T[TW(0x32c)]['writeUIntLE']=function Ri(Rv,Rn,Rr,RP){var LW=TW;Rv=+Rv,Rn=Rn>>>0x0,Rr=Rr>>>0x0;if(!RP){var Rb=Math[LW(0x2fc)](0x2,0x8*Rr)-0x1;V(this,Rv,Rn,Rr,Rb,0x0);}var Rk=0x1,Rj=0x0;this[Rn]=Rv&0xff;while(++Rj<Rr&&(Rk*=0x100)){this[Rn+Rj]=Rv/Rk&0xff;}return Rn+Rr;},T[TW(0x32c)]['writeUIntBE']=function Rv(Rn,Rr,RP,Rb){var LU=TW;Rn=+Rn,Rr=Rr>>>0x0,RP=RP>>>0x0;if(!Rb){var Rk=Math[LU(0x2fc)](0x2,0x8*RP)-0x1;V(this,Rn,Rr,RP,Rk,0x0);}var Rj=RP-0x1,Rg=0x1;this[Rr+Rj]=Rn&0xff;while(--Rj>=0x0&&(Rg*=0x100)){this[Rr+Rj]=Rn/Rg&0xff;}return Rr+RP;},T[TW(0x32c)][TW(0x331)]=function Rn(Rr,RP,Rb){Rr=+Rr,RP=RP>>>0x0;if(!Rb)V(this,Rr,RP,0x1,0xff,0x0);return this[RP]=Rr&0xff,RP+0x1;},T[TW(0x32c)][TW(0x2f5)]=function Rr(RP,Rb,Rk){RP=+RP,Rb=Rb>>>0x0;if(!Rk)V(this,RP,Rb,0x2,0xffff,0x0);return this[Rb]=RP&0xff,this[Rb+0x1]=RP>>>0x8,Rb+0x2;},T[TW(0x32c)]['writeUInt16BE']=function RP(Rb,Rk,Rj){Rb=+Rb,Rk=Rk>>>0x0;if(!Rj)V(this,Rb,Rk,0x2,0xffff,0x0);return this[Rk]=Rb>>>0x8,this[Rk+0x1]=Rb&0xff,Rk+0x2;},T[TW(0x32c)][TW(0x240)]=function Rb(Rk,Rj,Rg){Rk=+Rk,Rj=Rj>>>0x0;if(!Rg)V(this,Rk,Rj,0x4,0xffffffff,0x0);return this[Rj+0x3]=Rk>>>0x18,this[Rj+0x2]=Rk>>>0x10,this[Rj+0x1]=Rk>>>0x8,this[Rj]=Rk&0xff,Rj+0x4;},T[TW(0x32c)]['writeUInt32BE']=function Rk(Rj,Rg,Re){Rj=+Rj,Rg=Rg>>>0x0;if(!Re)V(this,Rj,Rg,0x4,0xffffffff,0x0);return this[Rg]=Rj>>>0x18,this[Rg+0x1]=Rj>>>0x10,this[Rg+0x2]=Rj>>>0x8,this[Rg+0x3]=Rj&0xff,Rg+0x4;},T[TW(0x32c)]['writeIntLE']=function Rj(Rg,Re,Rq,Rp){var LE=TW;Rg=+Rg,Re=Re>>>0x0;if(!Rp){var Ry=Math[LE(0x2fc)](0x2,0x8*Rq-0x1);V(this,Rg,Re,Rq,Ry-0x1,-Ry);}var RV=0x0,RN=0x1,RQ=0x0;this[Re]=Rg&0xff;while(++RV<Rq&&(RN*=0x100)){Rg<0x0&&RQ===0x0&&this[Re+RV-0x1]!==0x0&&(RQ=0x1),this[Re+RV]=(Rg/RN>>0x0)-RQ&0xff;}return Re+Rq;},T['prototype'][TW(0x1be)]=function Rg(Re,Rq,Rp,Ry){Re=+Re,Rq=Rq>>>0x0;if(!Ry){var RV=Math['pow'](0x2,0x8*Rp-0x1);V(this,Re,Rq,Rp,RV-0x1,-RV);}var RN=Rp-0x1,RQ=0x1,Ro=0x0;this[Rq+RN]=Re&0xff;while(--RN>=0x0&&(RQ*=0x100)){Re<0x0&&Ro===0x0&&this[Rq+RN+0x1]!==0x0&&(Ro=0x1),this[Rq+RN]=(Re/RQ>>0x0)-Ro&0xff;}return Rq+Rp;},T[TW(0x32c)][TW(0x2cf)]=function Re(Rq,Rp,Ry){Rq=+Rq,Rp=Rp>>>0x0;if(!Ry)V(this,Rq,Rp,0x1,0x7f,-0x80);if(Rq<0x0)Rq=0xff+Rq+0x1;return this[Rp]=Rq&0xff,Rp+0x1;},T['prototype'][TW(0x336)]=function Rq(Rp,Ry,RV){Rp=+Rp,Ry=Ry>>>0x0;if(!RV)V(this,Rp,Ry,0x2,0x7fff,-0x8000);return this[Ry]=Rp&0xff,this[Ry+0x1]=Rp>>>0x8,Ry+0x2;},T[TW(0x32c)][TW(0x275)]=function Rp(Ry,RV,RN){Ry=+Ry,RV=RV>>>0x0;if(!RN)V(this,Ry,RV,0x2,0x7fff,-0x8000);return this[RV]=Ry>>>0x8,this[RV+0x1]=Ry&0xff,RV+0x2;},T[TW(0x32c)][TW(0x260)]=function Ry(RV,RN,RQ){RV=+RV,RN=RN>>>0x0;if(!RQ)V(this,RV,RN,0x4,0x7fffffff,-0x80000000);return this[RN]=RV&0xff,this[RN+0x1]=RV>>>0x8,this[RN+0x2]=RV>>>0x10,this[RN+0x3]=RV>>>0x18,RN+0x4;},T[TW(0x32c)][TW(0x198)]=function RV(RN,RQ,Ro){RN=+RN,RQ=RQ>>>0x0;if(!Ro)V(this,RN,RQ,0x4,0x7fffffff,-0x80000000);if(RN<0x0)RN=0xffffffff+RN+0x1;return this[RQ]=RN>>>0x18,this[RQ+0x1]=RN>>>0x10,this[RQ+0x2]=RN>>>0x8,this[RQ+0x3]=RN&0xff,RQ+0x4;};function N(RN,RQ,Ro,RK,Rf,RH){var Lz=TW;if(Ro+RK>RN['length'])throw new RangeError(Lz(0x268));if(Ro<0x0)throw new RangeError('Index\x20out\x20of\x20range');}function Q(RN,RQ,Ro,RK,Rf){var La=TW;return RQ=+RQ,Ro=Ro>>>0x0,!Rf&&N(RN,RQ,Ro,0x4,0xffffff00000000000000000000000000,-0xffffff00000000000000000000000000),I[La(0x37e)](RN,RQ,Ro,RK,0x17,0x4),Ro+0x4;}T[TW(0x32c)]['writeFloatLE']=function RN(RQ,Ro,RK){return Q(this,RQ,Ro,!![],RK);},T['prototype'][TW(0x1d6)]=function RQ(Ro,RK,Rf){return Q(this,Ro,RK,![],Rf);};function o(Ro,RK,Rf,RH,RF){var LM=TW;return RK=+RK,Rf=Rf>>>0x0,!RF&&N(Ro,RK,Rf,0x8,0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,-0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),I[LM(0x37e)](Ro,RK,Rf,RH,0x34,0x8),Rf+0x8;}T[TW(0x32c)]['writeDoubleLE']=function Ro(RK,Rf,RH){return o(this,RK,Rf,!![],RH);},T[TW(0x32c)]['writeDoubleBE']=function RK(Rf,RH,RF){return o(this,Rf,RH,![],RF);},T[TW(0x32c)]['copy']=function Rf(RH,RF,RS,D0){var LO=TW;if(!T[LO(0x29c)](RH))throw new TypeError('argument\x20should\x20be\x20a\x20Buffer');if(!RS)RS=0x0;if(!D0&&D0!==0x0)D0=this['length'];if(RF>=RH[LO(0x368)])RF=RH[LO(0x368)];if(!RF)RF=0x0;if(D0>0x0&&D0<RS)D0=RS;if(D0===RS)return 0x0;if(RH[LO(0x368)]===0x0||this[LO(0x368)]===0x0)return 0x0;if(RF<0x0)throw new RangeError(LO(0x2ae));if(RS<0x0||RS>=this[LO(0x368)])throw new RangeError(LO(0x268));if(D0<0x0)throw new RangeError('sourceEnd\x20out\x20of\x20bounds');if(D0>this[LO(0x368)])D0=this[LO(0x368)];RH[LO(0x368)]-RF<D0-RS&&(D0=RH[LO(0x368)]-RF+RS);var D1=D0-RS;if(this===RH&&typeof Uint8Array[LO(0x32c)][LO(0x253)]===LO(0x2f7))this[LO(0x253)](RF,RS,D0);else{if(this===RH&&RS<RF&&RF<D0)for(var D2=D1-0x1;D2>=0x0;--D2){RH[D2+RF]=this[D2+RS];}else Uint8Array[LO(0x32c)][LO(0x2ed)][LO(0x1f6)](RH,this[LO(0x314)](RS,D0),RF);}return D1;},T['prototype'][TW(0x254)]=function RH(RF,RS,D0,D1){var LC=TW;if(typeof RF===LC(0x2e1)){if(typeof RS==='string')D1=RS,RS=0x0,D0=this[LC(0x368)];else typeof D0===LC(0x2e1)&&(D1=D0,D0=this[LC(0x368)]);if(D1!==undefined&&typeof D1!==LC(0x2e1))throw new TypeError('encoding\x20must\x20be\x20a\x20string');if(typeof D1===LC(0x2e1)&&!T[LC(0x22a)](D1))throw new TypeError('Unknown\x20encoding:\x20'+D1);if(RF[LC(0x368)]===0x1){var D2=RF['charCodeAt'](0x0);(D1===LC(0x283)&&D2<0x80||D1===LC(0x329))&&(RF=D2);}}else typeof RF==='number'&&(RF=RF&0xff);if(RS<0x0||this['length']<RS||this[LC(0x368)]<D0)throw new RangeError(LC(0x34e));if(D0<=RS)return this;RS=RS>>>0x0,D0=D0===undefined?this[LC(0x368)]:D0>>>0x0;if(!RF)RF=0x0;var D3;if(typeof RF==='number')for(D3=RS;D3<D0;++D3){this[D3]=RF;}else{var D4=T[LC(0x29c)](RF)?RF:T[LC(0x1bf)](RF,D1),D5=D4[LC(0x368)];if(D5===0x0)throw new TypeError(LC(0x35d)+RF+LC(0x327));for(D3=0x0;D3<D0-RS;++D3){this[D3+RS]=D4[D3%D5];}}return this;};var K=/[^+/0-9A-Za-z-_]/g;function f(RF){var Ll=TW;RF=RF['split']('=')[0x0],RF=RF['trim']()[Ll(0x1bb)](K,'');if(RF[Ll(0x368)]<0x2)return'';while(RF['length']%0x4!==0x0){RF=RF+'=';}return RF;}function H(RF){var LX=TW;if(RF<0x10)return'0'+RF[LX(0x1fc)](0x10);return RF[LX(0x1fc)](0x10);}function F(RF,RS){var Lu=TW;RS=RS||Infinity;var D0,D1=RF[Lu(0x368)],D2=null,D3=[];for(var D4=0x0;D4<D1;++D4){D0=RF[Lu(0x1a8)](D4);if(D0>0xd7ff&&D0<0xe000){if(!D2){if(D0>0xdbff){if((RS-=0x3)>-0x1)D3[Lu(0x2dc)](0xef,0xbf,0xbd);continue;}else{if(D4+0x1===D1){if((RS-=0x3)>-0x1)D3[Lu(0x2dc)](0xef,0xbf,0xbd);continue;}}D2=D0;continue;}if(D0<0xdc00){if((RS-=0x3)>-0x1)D3['push'](0xef,0xbf,0xbd);D2=D0;continue;}D0=(D2-0xd800<<0xa|D0-0xdc00)+0x10000;}else{if(D2){if((RS-=0x3)>-0x1)D3[Lu(0x2dc)](0xef,0xbf,0xbd);}}D2=null;if(D0<0x80){if((RS-=0x1)<0x0)break;D3['push'](D0);}else{if(D0<0x800){if((RS-=0x2)<0x0)break;D3['push'](D0>>0x6|0xc0,D0&0x3f|0x80);}else{if(D0<0x10000){if((RS-=0x3)<0x0)break;D3['push'](D0>>0xc|0xe0,D0>>0x6&0x3f|0x80,D0&0x3f|0x80);}else{if(D0<0x110000){if((RS-=0x4)<0x0)break;D3[Lu(0x2dc)](D0>>0x12|0xf0,D0>>0xc&0x3f|0x80,D0>>0x6&0x3f|0x80,D0&0x3f|0x80);}else throw new Error(Lu(0x1cb));}}}}return D3;}function S(RF){var Lx=TW,RS=[];for(var D0=0x0;D0<RF[Lx(0x368)];++D0){RS[Lx(0x2dc)](RF[Lx(0x1a8)](D0)&0xff);}return RS;}function R0(RF,RS){var LB=TW,D0,D1,D2,D3=[];for(var D4=0x0;D4<RF[LB(0x368)];++D4){if((RS-=0x2)<0x0)break;D0=RF['charCodeAt'](D4),D1=D0>>0x8,D2=D0%0x100,D3[LB(0x2dc)](D2),D3[LB(0x2dc)](D1);}return D3;}function R1(RF){var LZ=TW;return s[LZ(0x323)](f(RF));}function R2(RF,RS,D0,D1){var Lm=TW;for(var D2=0x0;D2<D1;++D2){if(D2+D0>=RS['length']||D2>=RF[Lm(0x368)])break;RS[D2+D0]=RF[D2];}return D2;}function R3(RF,RS){var Li=TW;return RF instanceof RS||RF!=null&&RF['constructor']!=null&&RF[Li(0x36d)][Li(0x2c1)]!=null&&RF[Li(0x36d)][Li(0x2c1)]===RS[Li(0x2c1)];}function R4(RF){return RF!==RF;}}[Lv(0x1f6)](this,R(Lv(0x1dd))[Lv(0x2a2)]));},{'base64-js':0xb,'buffer':0xc,'ieee754':0xd}],0xd:[function(R,D,d){var Ln=Y;d[Ln(0x31a)]=function(T,I,t,J,A){var Lr=Ln,G,h,c=A*0x8-J-0x1,w=(0x1<<c)-0x1,W=w>>0x1,U=-0x7,E=t?A-0x1:0x0,z=t?-0x1:0x1,a=T[I+E];E+=z,G=a&(0x1<<-U)-0x1,a>>=-U,U+=c;for(;U>0x0;G=G*0x100+T[I+E],E+=z,U-=0x8){}h=G&(0x1<<-U)-0x1,G>>=-U,U+=J;for(;U>0x0;h=h*0x100+T[I+E],E+=z,U-=0x8){}if(G===0x0)G=0x1-W;else{if(G===w)return h?NaN:(a?-0x1:0x1)*Infinity;else h=h+Math[Lr(0x2fc)](0x2,J),G=G-W;}return(a?-0x1:0x1)*h*Math[Lr(0x2fc)](0x2,G-J);},d['write']=function(T,I,t,J,A,G){var LP=Ln,h,w,W,U=G*0x8-A-0x1,E=(0x1<<U)-0x1,z=E>>0x1,a=A===0x17?Math['pow'](0x2,-0x18)-Math['pow'](0x2,-0x4d):0x0,M=J?0x0:G-0x1,O=J?0x1:-0x1,C=I<0x0||I===0x0&&0x1/I<0x0?0x1:0x0;I=Math[LP(0x241)](I);if(isNaN(I)||I===Infinity)w=isNaN(I)?0x1:0x0,h=E;else{h=Math[LP(0x1b9)](Math[LP(0x207)](I)/Math[LP(0x2ce)]);I*(W=Math['pow'](0x2,-h))<0x1&&(h--,W*=0x2);h+z>=0x1?I+=a/W:I+=a*Math['pow'](0x2,0x1-z);I*W>=0x2&&(h++,W/=0x2);if(h+z>=E)w=0x0,h=E;else h+z>=0x1?(w=(I*W-0x1)*Math[LP(0x2fc)](0x2,A),h=h+z):(w=I*Math[LP(0x2fc)](0x2,z-0x1)*Math[LP(0x2fc)](0x2,A),h=0x0);}for(;A>=0x8;T[t+M]=w&0xff,M+=O,w/=0x100,A-=0x8){}h=h<<A|w,U+=A;for(;U>0x0;T[t+M]=h&0xff,M+=O,h/=0x100,U-=0x8){}T[t+M-O]|=C*0x80;};},{}],0xe:[function(R,D,d){(function(T){'use strict';var Lj=Y;function s(t){var Lb=Y;if(!(this instanceof s))return new s(t);var J=t[Lb(0x32f)],A=t['height'],G=[[-0x1,0x0,0x1],[-0x2,0x0,0x2],[-0x1,0x0,0x1]],h=[[-0x1,-0x2,-0x1],[0x0,0x0,0x0],[0x1,0x2,0x1]],c=[],w=[];function W(m){return function(v,n,P){return P=P||0x0,m[(J*n+v)*0x4+P];};}var U=t[Lb(0x1da)],E=W(U),z,a;for(a=0x0;a<A;a++){for(z=0x0;z<J;z++){var M=E(z,a,0x0),O=E(z,a,0x1),C=E(z,a,0x2),l=(M+O+C)/0x3;w['push'](l,l,l,0xff);}}E=W(w);for(a=0x0;a<A;a++){for(z=0x0;z<J;z++){var X=G[0x0][0x0]*E(z-0x1,a-0x1)+G[0x0][0x1]*E(z,a-0x1)+G[0x0][0x2]*E(z+0x1,a-0x1)+G[0x1][0x0]*E(z-0x1,a)+G[0x1][0x1]*E(z,a)+G[0x1][0x2]*E(z+0x1,a)+G[0x2][0x0]*E(z-0x1,a+0x1)+G[0x2][0x1]*E(z,a+0x1)+G[0x2][0x2]*E(z+0x1,a+0x1),u=h[0x0][0x0]*E(z-0x1,a-0x1)+h[0x0][0x1]*E(z,a-0x1)+h[0x0][0x2]*E(z+0x1,a-0x1)+h[0x1][0x0]*E(z-0x1,a)+h[0x1][0x1]*E(z,a)+h[0x1][0x2]*E(z+0x1,a)+h[0x2][0x0]*E(z-0x1,a+0x1)+h[0x2][0x1]*E(z,a+0x1)+h[0x2][0x2]*E(z+0x1,a+0x1),B=Math[Lb(0x1b5)](X*X+u*u)>>>0x0;c[Lb(0x2dc)](B,B,B,0xff);}}var Z=c;return typeof Uint8ClampedArray===Lb(0x2f7)&&(Z=new Uint8ClampedArray(c)),Z[Lb(0x2e8)]=function(){var Lk=Lb;return s[Lk(0x2e8)](Z,J,A);},Z;}s[Lj(0x2e8)]=function t(J,A,G){var Lg=Lj;if(typeof ImageData===Lg(0x2f7)&&Object[Lg(0x32c)][Lg(0x1fc)][Lg(0x1f6)](J)==='[object\x20Uint16Array]')return new ImageData(J,A,G);else{if(typeof window===Lg(0x285)&&typeof window[Lg(0x310)]===Lg(0x285)){var h=document[Lg(0x2a8)](Lg(0x2e0));if(typeof h[Lg(0x266)]===Lg(0x2f7)){var c=h[Lg(0x266)]('2d'),w=c['createImageData'](A,G);return w[Lg(0x1da)][Lg(0x2ed)](J),w;}else return new I(J,A,G);}else return new I(J,A,G);}};function I(J,A,G){return{'width':A,'height':G,'data':J};}if(typeof d!==Lj(0x319))typeof D!==Lj(0x319)&&D[Lj(0x29d)]&&(d=D[Lj(0x29d)]=s),d[Lj(0x30c)]=s;else typeof define===Lj(0x2f7)&&define[Lj(0x1c8)]?define([],function(){return s;}):T[Lj(0x30c)]=s;}(this));},{}]},{},[0x1]),delete window[Le(0x28a)]);}function L(){var Lf=['fromCharCode','detect\x20template\x20\x22','left','readDoubleLE','Time\x20to\x20end\x20-\x20','100GfTcGR','./resources/canvas','setInt16','tiledToAbs','\x20m.','ucs2','mousemove','[GB]\x20','/api/modtools','importObject','selected','instantiate','/me','filter','call','setPixel','getData','addEventListener','offset\x20is\x20not\x20uint','swap64','toString','poolSize','canPlace','allocUnsafe','indexOf','getMode','onload','utf-16le','getTargets','listeners','base64-js','log','setColors','hex','Problems\x20with\x20bot.zone','canLoad','x\x20y\x20[r,g,b]','chunks','readInt8','size:\x200x','absToTiled','The\x20bot\x20has\x20been\x20deactivated\x20or\x20you\x20have\x20a\x20connection\x20problem','catch','Captcha','Status\x20-\x20','getUint8','yEnd','MODULE_NOT_FOUND','trace','execute','overrideEnds','addCover','parentNode','parent','onColorSelect','clientX','min','dehydrate','isConnected','appendChild','lastIndexOf','New\x20mode\x20-\x20','html','$1\x20','TYPED_ARRAY_SUPPORT','toDataURL','isEncoding','Try\x20to\x20init...','setBotOnline','worldX','on/off','\x22list\x22\x20argument\x20must\x20be\x20an\x20Array\x20of\x20Buffers','swap16','json','\x22length\x22\x20is\x20outside\x20of\x20buffer\x20bounds','then','timerElement',')();','width:100%;','chess','text','map','#palettebox','clear','utf-8','protocol','span','result','writeUInt32LE','abs','ctx','linear','readFloatBE','pop','borders','load\x20ch','kMaxLength','\x22size\x22\x20argument\x20must\x20be\x20of\x20type\x20number','lastUsing','readyState','substring','Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2032-bits','position:\x20fixed;\x20top:\x200;\x20bottom:\x200;\x20width:\x20100%;\x20height:\x200;\x20z-index:\x20-1;','_createTargets','hash','5694056zhPHbB','top','copyWithin','fill','getCover','828718dhSStW','Done','loaded','getPixelArea','maxLoadWaitTime','shard','setMode','window','LOADED','get','writeInt32LE','time','[WS]\x20return\x20code\x20-\x20','no\x20tmp','./utils/Template','origin','getContext','fromByteArray','Index\x20out\x20of\x20range','append','Server\x20overload','convert','sobelData','done','\x22></img>','float:left;','\x20bytes','Argument\x20must\x20be\x20a\x20Buffer','maxLiveTime','shadowRoot','reason','writeInt16BE','14153643WrBmyP','minimap-panel-button','interval','input','keydown','Unknown\x20encoding:\x20','chunkLoading','Received\x20type\x20','target','isConnecting','webkitImageSmoothingEnabled','Stop','valueOf','utf8','ucs-2','object','void','xInput','getElementById','8csSpDu','initialization','same','MODES','warn','forEach','color','isArray','This\x20browser\x20lacks\x20typed\x20array\x20(Uint8Array)\x20support\x20which\x20is\x20required\x20by\x20','species','files','setTimeToEnd','worldY','onerror','querySelector','yStart','pathname','setTemplate','restart','isBuffer','exports','intersects','871475oCjvIE','byteLength','registerChunk','Buffer','omit','Cover\x20doesn\x27t\x20exist','setUInt32BE','float:right;','The\x20\x22string\x22\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20or\x20ArrayBuffer.\x20','createElement','void-bot','readDoubleBE','.coorbox','msImageSmoothingEnabled','\x22offset\x22\x20is\x20outside\x20of\x20buffer\x20bounds','targetStart\x20out\x20of\x20bounds','The\x20\x22target\x22\x20argument\x20must\x20be\x20one\x20of\x20type\x20Buffer\x20or\x20Uint8Array.\x20','return\x20(function()\x20','woyken','tiledBorders','coverBot','_isBuffer','setUint16','hostname','console','lastPxlElement','readAsDataURL','The\x20\x22string\x22\x20argument\x20must\x20be\x20of\x20type\x20string.\x20Received\x20type\x20number','POST','Invalid\x20string.\x20Length\x20must\x20be\x20a\x20multiple\x20of\x204','[WS]\x20Restarting\x20WebSocket','ascii','signal','[WS]\x20Socket\x20encountered\x20error,\x20closing\x20socket','name','type','readUInt16LE','retCode\x20:\x20','392466elboAV','ssv','origTemplate','close','timeout','foo','now','[WS]\x20Name\x20change\x20requieres\x20WebSocket\x20restart','gameCanvas','LN2','writeInt8','img','setBotStatus','lastTmpURL','url','class','apply','.bmp','number','37653qNBpXY','yInput','setTimer','x\x20-\x20','push','setInt16BE','[WS]\x20pxl\x20','Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2016-bits','canvas','string','addMode','alloc','include','select','defineProperty','_arr','toImageData','onmessage','split','.viewport','\x20chunks\x20collected','set','allocUnsafeSlow','toLowerCase','availableCovers','../resources/canvas.json','setAttribute','includes','build','writeUInt16LE','requestPermission','function','root','botting','modlist','http:','pow','min-max','button','Strätegy\x20-\x20','19129980uGrtIs','clearTimeout','startsWith','bind','backgroundColor','(((.+)+)+)+$','./utils/Palette','lastY','createTextNode','Wait\x20for\x20timer','Could\x20not\x20connect\x20to\x20server,\x20please\x20try\x20again\x20later\x20:(','[VB]\x20','Sobel','\x20...\x20','xEnd','connect','document','val\x20must\x20be\x20string,\x20number\x20or\x20Buffer','./utils/functions','table','subarray','currentMode','chunkGetTimeout','search','override','undefined','read','setCover','[WS]\x20Socket\x20is\x20closed.\x20Reconnect\x20will\x20be\x20attempted\x20in\x20','head','entries','coords','getImageData','slice','chunkSize','toByteArray','height','Void\x20Bot','userlvl','\x22\x20is\x20invalid\x20for\x20argument\x20\x22value\x22','random','latin1','port','code','prototype','change','timeConnected','width','.selected','writeUInt8','./functions','toLocaleString','putImageData','_mode','writeInt16LE','swap32','arrayBuffer','setInt8','copy','[WS]\x20An\x20error\x20occured\x20while\x20parsing\x20websocket\x20message','imageSmoothingEnabled','permission','round','delete','compare','readInt16BE','setUint8','shadow','setLastPxl','elems','\x20ms.','center','blur','value','[WS]\x20creating\x20ProtocolClient','setUInt8','142tlKvXn','UNLOADED','Out\x20of\x20range\x20index','_cover','binary','layers','onclose','_getIncrementalEdges','5cbiweS','loadChunk','modeBot','switcher','cycle','innerText','status','_shuffle','style','The\x20value\x20\x22','match','src','LOADING','template','timeToEndElement','innerHTML','fileInput','getPixel','Attempt\x20to\x20write\x20outside\x20buffer\x20bounds','or\x20Array-like\x20Object.\x20Received\x20type\x20','length','abort','offset','imageData','host','constructor','clearChunkGetTimeout','__proto__','getUint32','stopped','161mVraSX','start','imageProcessor','RGBToId','inspect','Draw\x20clr\x20-\x20','denied','div','body','right','attributes','has','write','lastX','INSPECT_MAX_BYTES','Buffer.write(string,\x20encoding,\x20offset[,\x20length])\x20is\x20no\x20longer\x20supported','drawImage','utf16le','getTimeout','script','readUInt16BE','border-color:\x20darkred;\x20margin:\x203px\x200px\x203px\x200px;','availableMods','click','\x22\x20is\x20invalid\x20for\x20option\x20\x22size\x22','writeInt32BE','chunkList','Bots\x20online\x20-\x20','strategyElement','Template\x20src\x20isn\x27t\x20defined','readInt32LE','xStart','targets','canvasId','shift','<Buffer\x20','\x22buffer\x22\x20argument\x20must\x20be\x20a\x20Buffer\x20instance','Mode\x20doesn\x27t\x20exist','hydrate','readUInt32LE','all','charCodeAt','need\x20tmp','location','childNodes','toJSON','settedPxls','load','https://voidserv.glitch%2eme/online','The\x20first\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20ArrayBuffer,\x20Array,\x20','y\x20-\x20','garbageCollector','botStatusElement','toPrimitive','sqrt','[WS]\x20WebSocket\x20already\x20open,\x20not\x20starting','byteOffset','deRegisterChunk','floor','stop','replace','OP_CODE','mozImageSmoothingEnabled','writeIntBE','from','/chunks/0/','send','://','half','<img\x20style=\x22width:inherit;\x20height:inherit;\x22\x20src=\x22','\x20loading','arraybuffer','base64','amd','onBinaryMessage','colors','Invalid\x20code\x20point','image/png','zone','./resources/selectors.json','equals','clientY','readUInt8','trim','coverElement','splice','getTime','writeFloatBE','remmod','concat','error','data','botOnline','join','buffer','file','href','granted','substr','getInt16'];L=function(){return Lf;};return L();}function checkNeededElems(){var Lq=Y;return window&&document[Lq(0x297)]('canvas')&&document['querySelector'](Lq(0x2ab))&&document[Lq(0x297)]('.selected')&&document[Lq(0x297)]('.selected')[Lq(0x35c)]['backgroundColor']&&document[Lq(0x288)]('palettebox')[Lq(0x1ab)][Lq(0x368)];}function tryInit(){var LQ=Y,s=(function(){var A=!![];return function(G,h){var c=A?function(){var Lp=Y;if(h){var w=h[Lp(0x2d5)](G,arguments);return h=null,w;}}:function(){};return A=![],c;};}()),I=s(this,function(){var Ly=Y;return I[Ly(0x1fc)]()['search']('(((.+)+)+)+$')['toString']()[Ly(0x36d)](I)[Ly(0x317)](Ly(0x305));});I();var t=(function(){var A=!![];return function(G,h){var c=A?function(){var LV=Y;if(h){var w=h[LV(0x2d5)](G,arguments);return h=null,w;}}:function(){};return A=![],c;};}()),J=t(this,function(){var LN=Y,A;try{var G=Function(LN(0x2b0)+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');A=G();}catch(z){A=window;}var h=A[LN(0x2b7)]=A['console']||{},c=[LN(0x207),'warn','info',LN(0x1d9),'exception',LN(0x313),LN(0x218)];for(var w=0x0;w<c[LN(0x368)];w++){var W=t['constructor'][LN(0x32c)][LN(0x303)](t),U=c[w],E=h[U]||W;W['__proto__']=t[LN(0x303)](t),W[LN(0x1fc)]=E[LN(0x1fc)][LN(0x303)](E),h[U]=W;}});J(),console[LQ(0x207)](LQ(0x22b)),checkNeededElems()?initialization():setTimeout(tryInit,0x64);}if(window[Lo(0x258)])tryInit();else{const inject=()=>{var LK=Lo;let R=document[LK(0x2a8)](LK(0x192));R[LK(0x363)]='('+tryInit+LK(0x235)+checkNeededElems+';'+initialization+';',document[LK(0x37a)][LK(0x21c)][LK(0x223)](R);};document[Lo(0x24b)]==='complete'?inject():window['addEventListener'](Lo(0x1ae),inject);}
