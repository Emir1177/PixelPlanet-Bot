var r7=T;function T(x,r){var V=u();return T=function(p,c){p=p-0x89;var t=V[p];return t;},T(x,r);}(function(r,V){var r6=T,p=r();while(!![]){try{var c=-parseInt(r6(0x20b))/0x1*(-parseInt(r6(0x91))/0x2)+parseInt(r6(0x197))/0x3*(-parseInt(r6(0xb6))/0x4)+-parseInt(r6(0x186))/0x5*(-parseInt(r6(0x24d))/0x6)+-parseInt(r6(0x234))/0x7*(-parseInt(r6(0x1af))/0x8)+-parseInt(r6(0x219))/0x9*(parseInt(r6(0x254))/0xa)+-parseInt(r6(0x222))/0xb+-parseInt(r6(0x207))/0xc;if(c===V)break;else p['push'](p['shift']());}catch(t){p['push'](p['shift']());}}}(u,0xa5b51));const fetch=self[r7(0x162)],WebSocket=self[r7(0x138)];function payload(){(function(){function V(p,c,d){var r9=T;function h(j,v){var r8=T;if(!c[j]){if(!p[j]){var X=r8(0x1b9)==typeof require&&require;if(!v&&X)return X(j,!0x0);if(K)return K(j,!0x0);var P=new Error(r8(0x1ae)+j+'\x27');throw P['code']=r8(0x16d),P;}var L=c[j]={'exports':{}};p[j][0x0]['call'](L[r8(0xa8)],function(k){var W=p[j][0x1][k];return h(W||k);},L,L['exports'],V,p,c,d);}return c[j][r8(0xa8)];}for(var K='function'==typeof require&&require,R=0x0;R<d[r9(0x1eb)];R++)h(d[R]);return h;}return V;}()({0x1:[function(r,V,p){var Vh=T;(function(c){var rx=T;let t=!![];window['addEventListener'](rx(0x1e9),()=>t=!![]),window[rx(0xf5)](rx(0x14a),()=>t=![]);let d=[],h=[];const {COLORS:K,CHUNK_SIZE:R}=r(rx(0x211)),{MAX_REQUESTS_PER_HOUR:f,PXL_CB:j,MAX_TIME_STACK:v}=r(rx(0x159)),{sq:n,factory:e,rand:X,uniqueSelector:P,confuseString:L}=r(rx(0x172)),k=r(rx(0x221));k[rx(0x187)]['void-bot']=P(),k[rx(0x187)][rx(0x1f9)]=P();const a=r(rx(0xa4)),W=r(rx(0x1cc)),E=r(rx(0xb1)),H=r(rx(0x16b)),s={'RANDOM':btoa(rx(0x148))[rx(0x259)](/=/g,'')[rx(0x1a8)](),'WOYKEN':btoa('WOYKEN')[rx(0x259)](/=/g,'')['toUpperCase'](),'LINEAR':btoa('LINEAR')['replace'](/=/g,'')[rx(0x1a8)](),'CENTER':btoa('CENTER')[rx(0x259)](/=/g,'')[rx(0x1a8)](),'CHESS':btoa(rx(0x13e))[rx(0x259)](/=/g,'')[rx(0x1a8)]()},i=Object['fromEntries'](Object[rx(0x278)](s)['map'](([x1,x2])=>[x2,x1])),o=new a(K,0x2);let U=null;const g={'OP_CODE':0xc1,'hydrate':x1=>({'x':x1[rx(0x21b)](0x1),'y':x1['getUint8'](0x2),'offset':x1[rx(0x21b)](0x3)<<0x10|x1[rx(0x203)](0x4),'color':x1[rx(0x21b)](0x6)}),'dehydrate':function(x1,x2,x3,x4){var rr=rx;const x5=new ArrayBuffer(0x1+0x1+0x1+0x1+0x2+0x1),x6=new DataView(x5);return x6[rr(0x108)](0x0,this['OP_CODE']),x6[rr(0x108)](0x1,x1),x6[rr(0x108)](0x2,x2),x6[rr(0x108)](0x3,x3>>>0x10),x6[rr(0x27b)](0x4,x3&0xffff),x6['setUint8'](0x6,x4),x5;}},l={'OP_CODE':0xc2,'hydrate':x1=>x1[rx(0x131)](0x1)},Z={'OP_CODE':0xc3,'hydrate':x1=>({'retCode':x1[rx(0x21b)](0x1),'wait':x1[rx(0x131)](0x2),'coolDownSeconds':x1[rx(0x21a)](0x6)}),'dehydrate'(x1,x2,x3){var rV=rx;const x4=c['allocUnsafe'](0x1+0x1+0x4+0x1+0x2);x4[rV(0x156)](OP_CODE,0x0),x4[rV(0x156)](x1,0x1),x4['setUInt32BE'](x2,0x2);const x5=Math[rV(0x268)](x3/0x3e8);return x4['setInt16BE'](x5,0x6),x4;}},B={'OP_CODE':0xa0,'dehydrate'(x1){var rp=rx;let x2=new ArrayBuffer(0x2),x3=new DataView(x2);return x3[rp(0x12e)](0x0,0xa0),x3[rp(0x12e)](0x1,x1),x2;}},Q={'OP_CODE':0xa1,'dehydrate'(x1){var rc=rx;let x2=new ArrayBuffer(0x3),x3=new DataView(x2);return x3[rc(0x12e)](0x0,0xa1),x3['setInt16'](0x1,x1),x2;}},I={'OP_CODE':0xa2,'dehydrate'(x1){var ru=rx;let x2=new ArrayBuffer(0x3),x3=new DataView(x2);return x3[ru(0x12e)](0x0,0xa2),x3['setInt16'](0x1,x1),x2;}};class q{constructor(){var rT=rx;console['log']('[WS]\x20creating\x20ProtocolClient'),this[rT(0x265)]=this[rT(0xa6)]=![],this['ws']=this[rT(0x200)]=null,this[rT(0xbe)]=0x0,setInterval(()=>this['ws'][rT(0x8d)](new Uint8Array([0xb0])[rT(0x1e3)]),0x55f0);}async[rx(0xe4)](){var rt=rx;this[rt(0x265)]=!![];if(this['ws'])console[rt(0x127)](rt(0x1b0));this[rt(0x199)]=Date['now'](),this['ws']=new WebSocket('ws'+(location[rt(0x112)]==='http:'?'':'s')+'://'+(window[rt(0x26a)][rt(0x285)]+'.'+location[rt(0x231)]+(location['port']?':'+location[rt(0x23d)]:'')+'/ws')),this['ws'][rt(0x20c)]=rt(0x165),this['ws']['onopen']=()=>{var rd=rt;this['isConnecting']=![],this[rd(0xa6)]=!![],console[rd(0x127)](rd(0x169));if(this[rd(0xbe)]!==null)this['ws'][rd(0x8d)](B[rd(0x246)](this[rd(0xbe)]));},this['ws']['onmessage']=({data:x1})=>{var rh=rt;try{if(typeof x1!==rh(0x134))this[rh(0x24e)](x1);}catch(x2){console['error']('[WS]\x20An\x20error\x20occured\x20while\x20parsing\x20websocket\x20message'),console[rh(0x13a)](x2);}},this['ws'][rt(0x10e)]=x1=>{var rK=rt;this['ws']=null,this[rK(0xa6)]=![];const x2=0x7d0;console[rK(0x25b)]('[WS]\x20Socket\x20is\x20closed.\x20Reconnect\x20will\x20be\x20attempted\x20in\x20'+x2+'\x20ms.',x1[rK(0xd8)]),setTimeout(()=>this[rK(0xe4)](),x2);},this['ws'][rt(0x249)]=x1=>{var rR=rt;console[rR(0x13a)](rR(0x248),x1),this['ws'][rR(0xf4)](),setTimeout(()=>this[rR(0xe4)](),0x7d0);};}[rx(0x1ff)](x1){var rf=rx;if(this[rf(0xa6)]&&this[rf(0x200)]!==x1){console[rf(0x127)](rf(0x167));if(!this[rf(0xa6)])return;this[rf(0xa6)]=![],console[rf(0x127)]('[WS]\x20Restarting\x20WebSocket'),this['ws'][rf(0x10e)]=this['ws'][rf(0x92)]=null,this['ws'][rf(0xf4)](),this['ws']=null,this[rf(0xe4)]();}}[rx(0xa2)](x1,x2){var rj=rx;if(this[rj(0xa6)])this['ws'][rj(0x8d)](Q['dehydrate'](x1<<0x8|x2));}[rx(0x1ba)](x1,x2){var rv=rx;if(this[rv(0xa6)])this['ws'][rv(0x8d)](I[rv(0x246)](x1<<0x8|x2));}[rx(0x24e)](x1){var rn=rx;if(x1['byteLength']===0x0)return;const x2=new DataView(x1);switch(x2['getUint8'](0x0)){case g['OP_CODE']:let x3=g[rn(0x14d)](x2),x4=b[rn(0x128)]['get'](x3['x'],x3['y']);if(!x4)return;let x5=x3['x']*R+x3[rn(0x8f)]%R+b[rn(0x245)]['x1'],x6=x3['y']*R+~~(x3[rn(0x8f)]/R)+b['borders']['y1'],x7=K[x3[rn(0xcb)]];console[rn(0x127)](rn(0x1fc)+x5+'\x20'+x6+'\x20['+x7+']'),d=[x5,x6],b['setPixel'](x5,x6,x7);break;case l[rn(0xff)]:m['setTimer'](D['time']=l['hydrate'](x2)/0x3e8);break;case Z[rn(0xff)]:let {retCode:x8,wait:x9,coolDownSeconds:xx}=Z[rn(0x14d)](x2);m[rn(0x8a)](D[rn(0xcd)]=x9/0x3e8),console[rn(0x127)]('[WS]\x20return\x20code\x20-\x20'+x8);if(x8!==0x0){b[rn(0x1e0)](...h),console[rn(0x25b)](rn(0x14c)+x8);if(x8===0xa){N[rn(0x127)](rn(0x16c)),window[rn(0x103)][rn(0xf2)](),N['stop']();if(!t)trySendNotification('Void\x20Bot',{'body':rn(0x269)});};return;};break;}}['setPixel'](x1,x2,x3=0x7){var re=rx;if(!this[re(0xa6)])return;let [x4,x5]=b[re(0xfe)](x1,x2),x6=(x1-x4*R-b[re(0x245)]['x1'])%R+(x2-x5*R-b[re(0x245)]['y1'])%R*R;this['ws'][re(0x8d)](g[re(0x246)](x4,x5,x6,x3)),h=[x1,x2,b[re(0x1f7)](x1,x2)],b[re(0x1e0)](x1,x2,K[x3]),m[re(0x1c9)](x1,x2,K[x3]);}}const J=new q();J['connect'](),fetch(rx(0x26e))[rx(0xda)](x1=>x1['text']())[rx(0xda)](x1=>{var rX=rx;x1[rX(0x12f)]()!==rX(0x190)&&Y();})[rx(0x272)](Y);function Y(){var rP=rx;alert(rP(0x130)),setPixel=()=>{},N[rP(0x217)]=()=>{},m[rP(0x9d)][rP(0x135)][rP(0x289)](m[rP(0x9d)]);}document[rx(0x251)][rx(0x95)](e({'type':'style','html':r(rx(0x1bf))[rx(0x259)](/void-bot/g,k['bot']['void-bot'])[rx(0x259)](/half/g,k['bot'][rx(0x1f9)])}));const m=new function(){var rL=rx;this[rL(0x9d)]=e({'type':rL(0x18a),'id':k['bot'][rL(0x18b)]},[e({'type':rL(0x12a),'style':'font-size:\x20110%;','breakText':!![],'text':'Make\x20Void\x20great\x20again!'}),e({'type':'hr','style':rL(0xf7)}),this[rL(0x24c)]=e({'type':rL(0x18a),'class':k[rL(0x187)][rL(0x1f9)],'style':'float:left;'}),this[rL(0x1b5)]=e({'type':'div','class':k[rL(0x187)][rL(0x1f9)],'style':rL(0x17d)})]),this['right'][rL(0x95)](e({'type':rL(0x18a),'breakText':!![],'text':'Bots\x20online\x20-\x20'},[this[rL(0xbc)]=e({'type':rL(0x12a),'text':rL(0xd3)})])),this[rL(0x196)]=x1=>this[rL(0xbc)][rL(0x114)]=x1,this['right'][rL(0x95)](e({'type':rL(0x18a),'breakText':!![],'text':'Status\x20-\x20'},[this[rL(0x182)]=e({'type':rL(0x12a)})])),this['setBotStatus']=x1=>this[rL(0x182)][rL(0x114)]=L(x1),this[rL(0x1b5)][rL(0x95)](e({'type':rL(0x18a),'breakText':!![],'text':rL(0x236)},[this[rL(0x260)]=e({'type':rL(0x12a)})])),this[rL(0x8a)]=x1=>x1!==this[rL(0x260)][rL(0x114)]&&(this['timerElement'][rL(0x114)]=~~(x1*0x64)/0x64),this['right'][rL(0x95)](e({'type':rL(0x18a),'breakText':!![],'text':rL(0x1a1)},[this[rL(0x8b)]=e({'type':rL(0x12a),'text':rL(0xf9)})])),this[rL(0x1ea)]=(x1,x2)=>x1+'-'+x2+'\x20m.'!==this['timeToEndElement'][rL(0x114)]&&(this[rL(0x8b)][rL(0x114)]=x1+'-'+x2+rL(0x250)),this[rL(0x1b5)][rL(0x95)](e({'type':'div','breakText':!![],'text':rL(0xd6)},[this[rL(0x257)]=e({'type':rL(0x12a),'breakText':!![],'text':'x\x20y\x20[r,g,b]'})])),this[rL(0x1c9)]=(x1,x2,x3)=>x1+'\x20'+x2+'\x20['+x3+']'!==this['lastPxlElement'][rL(0x114)]&&(this[rL(0x257)][rL(0x114)]=x1+'\x20'+x2+'\x20['+x3+']'),this[rL(0x24c)][rL(0x95)](e({'type':rL(0x18a),'text':rL(0x267)},[this[rL(0x215)]=e({'type':rL(0x154),'listeners':{'input':function(){var rk=rL;localStorage['lastX']=+this[rk(0x12c)];if(C)C['x1']=+this['value'];}}})])),this[rL(0x215)][rL(0x12c)]=localStorage[rL(0x22e)]||'',this[rL(0x24c)]['appendChild'](e({'type':rL(0x18a),'text':rL(0xab)},[this['yInput']=e({'type':rL(0x154),'listeners':{'input':function(){var ra=rL;localStorage[ra(0x150)]=+this[ra(0x12c)];if(C)C['y1']=+this['value'];}}})])),this[rL(0xeb)][rL(0x12c)]=localStorage[rL(0x150)]||'',this[rL(0x24c)][rL(0x95)](e({'type':'div','breakText':!![],'text':rL(0xb7)},[this[rL(0x164)]=e({'type':rL(0x1f1)})])),this['addMode']=(x1,x2)=>{var rW=rL;this[rW(0x164)][rW(0x95)](e({'type':rW(0x1d4),'breakText':!![],'text':x1,'attributes':{'value':x2}}));},this['left']['appendChild'](e({'type':rL(0x18a),'breakText':!![],'text':rL(0x1e5)},[this['coverElement']=e({'type':rL(0x1f1)})])),this[rL(0x11a)]=x1=>{var rE=rL;let x2=document['createElement'](rE(0x1d4));x2['value']=x1,x2[rE(0x114)]=L(x1),this['coverElement']['appendChild'](x2);},this['left'][rL(0x95)](this[rL(0x242)]=e({'type':rL(0x154),'style':rL(0x1fa),'attributes':{'type':rL(0xfb),'style':rL(0xfc)},'listeners':{'change':function(x1){var rH=rL;let x2=new FileReader();x2[rH(0x123)](this[rH(0x93)][0x0]),x2[rH(0x249)]=console[rH(0x13a)],x2[rH(0x1fe)]=()=>{var rs=rH;N[rs(0x127)](rs(0x20f)+x2['result']+'\x22'),localStorage[rs(0x1cd)]=x2[rs(0x212)],z(x2[rs(0x212)]);};}}})),this['left'][rL(0x95)](this[rL(0x1db)]=e({'type':rL(0x1ef),'breakText':!![],'text':rL(0x136)})),this[rL(0x1db)][rL(0xf5)](rL(0x13b),()=>N[rL(0x244)]===null?N[rL(0x217)](0x0):N['stop']()),document[rL(0x16a)]['appendChild'](this['root']);}();m[rx(0xc1)]('stopped');function S(){return U===null?0x3e8*0x78:0xe10/f*U*0x3e8+0x3e8*0x28;}(function x1(){var ri=rx;fetch(ri(0xf6),{'method':'POST'})[ri(0xda)](x2=>x2['text']())['then'](x2=>{m['setBotOnline'](U=+x2),setTimeout(x1,S());})['catch'](x2=>{var ro=ri;x2==0x1ad&&(U=null,m[ro(0xc1)](ro(0x20a)));;setTimeout(x1,S());});}());let O=document[rx(0x1cf)](k['coords']),A=document['querySelector'](k['gameCanvas']),w={'worldX':null,'worldY':null,'clientX':null,'clientY':null};window[rx(0xf5)]('mousemove',x2=>{var rU=rx;[w[rU(0xa7)],w['worldY']]=x0(),w[rU(0x117)]=x2[rU(0x117)],w[rU(0x161)]=x2[rU(0x161)];});let F=new RegExp(/-?\d+/g),b=new function(){var rg=rx;let x2=this;this[rg(0x277)]=R,this[rg(0x1bb)]=0x3e8*0x78,this[rg(0xe8)]={'x1':0x0,'y1':0x0,'x2':0x100,'y2':0x100,'width':0x100,'height':0x100},this[rg(0x245)]={'x1':-(this['tiledBorders'][rg(0x118)]*this[rg(0x277)]/0x2),'y1':-(this['tiledBorders'][rg(0x110)]*this['chunkSize']/0x2),'x2':this['tiledBorders'][rg(0x118)]*this[rg(0x277)]/0x2,'y2':this[rg(0xe8)]['height']*this['chunkSize']/0x2},this[rg(0x128)]={'get':function(x3,x4){return this[x3]===undefined||this[x3][x4]===undefined?null:this[x3][x4];},'set':function(x3,x4,x5){var rl=rg;return this[x3]===undefined&&(this[x3]={}),x2['chunkList'][rl(0xe3)](this[x3][x4]=new E(x3,x4,x5)),this[x3][x4];},'delete':function(x3,x4){var rZ=rg;if(this[x3]===undefined||this[x3][x4]===undefined)return;this[x3][x4]=undefined;for(let x5=0x0;x5!==x2[rZ(0x22d)][rZ(0x1eb)];x5++)if(x2['chunkList'][x5]['x']===x3&&x2['chunkList'][x5]['y']===x4)return J[rZ(0x1ba)](x2[rZ(0x22d)][x5]['x'],x2[rZ(0x22d)][x5]['y']),x2[rZ(0x22d)][rZ(0x104)](x5,0x1);;}},this['chunkList']=[],this['canLoad']=!![],this['maxLoadWaitTime']=0x3e8,this[rg(0xd7)]=null,this[rg(0x1d6)]=()=>{var rB=rg;if(this[rB(0xd7)]!==null)clearTimeout(this[rB(0xd7)]),this['chunkGetTimeout']=null,this[rB(0x17b)]=!![];},this[rg(0x151)]=function(){var ry=rg;this[ry(0x1d6)](),this[ry(0x17b)]=![],this[ry(0xd7)]=setTimeout(this[ry(0x1d6)]['bind'](this),this[ry(0x204)]);},this[rg(0x270)]=new function(){var rQ=rg;this[rQ(0xc0)]=null,this[rQ(0x14f)]=()=>{var rI=rQ;let x3=new Date()[rI(0x184)](),x4=0x0;for(let x5 of x2['chunkList'])if(x3-x5[rI(0x139)]>x2['maxLiveTime'])x2[rI(0x128)][rI(0x1e4)](x5['x'],x5['y']),x4++;x4!==0x0&&console['log'](rI(0x152)+x4+'\x20chunks\x20collected');},this[rQ(0x1da)]=()=>{var rq=rQ;this['stop'](),this[rq(0xc0)]=setInterval(this[rq(0x14f)][rq(0x14e)](this),0x3e8*0x3c);},this['stop']=()=>this[rQ(0xc0)]===null||(clearInterval(this['interval']),this[rQ(0xc0)]=null);}(),this[rg(0xfe)]=(x3,x4)=>[~~((x3-this[rg(0x245)]['x1'])/this[rg(0x277)]),~~((x4-this[rg(0x245)]['y1'])/this[rg(0x277)])],this[rg(0xe9)]=(x3,x4)=>[this[rg(0x245)]['x1']+x3*this[rg(0x277)],this[rg(0x245)]['y1']+x4*this[rg(0x277)]];{let x3;this['getPixel']=(x4,x5)=>{var rJ=rg;return x3=this[rJ(0x128)][rJ(0x194)](...this[rJ(0xfe)](x4,x5)),x3&&x3[rJ(0x194)]((x4-this[rJ(0x245)]['x1'])%this[rJ(0x277)],(x5-this['borders']['y1'])%this['chunkSize']);},this['setPixel']=(x4,x5,x6)=>{var rY=rg;return x3=this[rY(0x128)][rY(0x194)](...this['absToTiled'](x4,x5)),x3&&x3[rY(0x102)]((x4-this[rY(0x245)]['x1'])%this[rY(0x277)],(x5-this[rY(0x245)]['y1'])%this[rY(0x277)],x6);};};this['loadChunk']=((()=>{var rm=rg;let x4=new Uint32Array(K[rm(0x1eb)]);K['forEach'](([x7,x8,x9],xx)=>x4[xx]=0xff000000|x9<<0x10|x8<<0x8|x7);const x5=x7=>{var rS=rm;let x8=new Uint32Array(x7[rS(0x1eb)]);for(let x9=0x0;x9!==x7[rS(0x1eb)];x9++)x8[x9]=x4[x7[x9]&0x3f];return x8;};function x6(x7){var rO=rm;let x8=new Uint8ClampedArray(x2[rO(0x277)]**0x2<<0x2),x9=new Uint32Array(x8[rO(0x1e3)]),xx=x5(x7);return xx[rO(0x15a)]((xr,xV)=>x9[xV]=xr),x8;};return async function(x7,x8){var rA=rm;if(!x2[rA(0x17b)]||x2[rA(0x128)][rA(0x194)](x7,x8))return;x2['setChunkGetTimeout']();let x9=await fetch(location[rA(0x112)]+'//'+location[rA(0x205)]+(rA(0x253)+x7+'/'+x8+rA(0x1c8)));if(x9['ok']){let xx=await x9[rA(0xef)](),xr;if(xx[rA(0x142)])xr=x6(new Uint8Array(xx)),console[rA(0x127)](rA(0x11f)+x7+'\x20'+x8+rA(0xe5)),J['registerChunk'](x7,x8);else{xr=new Uint8ClampedArray(x2[rA(0x277)]**0x2<<0x2);for(let xV=0x0;xV!==xr[rA(0x1eb)];xV+=0x4)[xr[xV],xr[xV+0x1],xr[xV+0x2],xr[xV+0x3]]=[...K[0x0],0xff];console[rA(0x127)]('Empty\x20answer\x20'+x7+'\x20'+x8);};x2[rA(0x128)][rA(0x102)](x7,x8,xr),x2[rA(0x1d6)]();}else throw new Error(rA(0xc3));};})());}();b[rx(0x270)]['start']();let D=new function(){var rF=rx;this['time']=0x0,setInterval(()=>{var rw=T;if(isNaN(this[rw(0xcd)]))this[rw(0xcd)]=0x0;--this[rw(0xcd)]<0x0&&(this[rw(0xcd)]=0x0),m['setTimer'](this['time']);},0x3e8),this[rF(0x184)]=()=>this[rF(0xcd)],this[rF(0x1a0)]=()=>this[rF(0xcd)]<0x34;}(),C=null;localStorage[rx(0x1f3)](rx(0x1cd))!==null&&z(localStorage[rx(0x1f3)]('lastTmpURL'));async function z(x2){var rb=rx;C=null;const x3=new W({'name':rb(0xb3),'x':+m[rb(0x215)]['value'],'y':+m[rb(0xeb)]['value']});await x3[rb(0x157)](x2);if(C!==null){N[rb(0x25b)]('has\x20been\x20changed\x20current\x20template\x20while\x20preparing\x20this\x20one');return;}C=x3,x3[rb(0x1f4)](o),!N[rb(0x115)]&&(N[rb(0x115)]=new H()),N['imageProcessor'][rb(0x21c)](x3);}let N=new class{[rx(0x279)]=s['RANDOM'];['availableCovers']=[rx(0x15d),rx(0x14b)];[rx(0x1dd)]=this[rx(0x174)][0x0];['x']=null;['y']=null;[rx(0x15e)]=0x0;[rx(0x19c)]=![];['timeout']=null;constructor(){var rD=rx;localStorage[rD(0x1f3)]('modeBot')!==null&&this['setMode'](localStorage[rD(0x1f3)](rD(0x26f)));localStorage[rD(0x1f3)]('coverBot')!==null&&this[rD(0x158)](localStorage[rD(0x1f3)]('coverBot'));const x2=this;this['zone']={'getPixelArea'(x3,x4,x5,x6){var rC=rD;const x7=new Uint8ClampedArray(x5*x6<<0x2);x2['chunkLoading']=![];for(let x8=0x0,x9=0x0;x8!==x6;x8++){for(let xx=0x0;xx!==x5;xx++,x9+=0x4){const xr=b[rC(0x1f7)](xx+x3,x8+x4);if(xr)x7[x9|0x0]=xr[0x0],x7[x9|0x1]=xr[0x1],x7[x9|0x2]=xr[0x2],x7[x9|0x3]=0xff;else{x2[rC(0x19c)]=!![];const xV=b[rC(0xfe)](xx+x3,x8+x4);b[rC(0x16f)](xV[0x0],xV[0x1]);}}}if(x2[rC(0x19c)])return null;return x7;},'get'(x3,x4){var rz=rD;const x5=x3+x4*this['width']<<0x2;return[this['data'][x5],this[rz(0xe1)][x5|0x1],this[rz(0xe1)][x5|0x2],this[rz(0xe1)][x5|0x3]];},'getData'(x3){var rN=rD;return[this[rN(0xe1)][x3],this['data'][x3|0x1],this['data'][x3|0x2],this[rN(0xe1)][x3|0x3]];},'override'(){var rM=rD;(this[rM(0x178)]===null||this[rM(0xde)]===null||this[rM(0x118)]===null||this[rM(0x110)]===null)&&x2[rM(0x127)]('Problems\x20with\x20bot.zone'),this[rM(0xe1)]=this[rM(0xa0)](this[rM(0x178)],this['yStart'],this[rM(0x118)],this[rM(0x110)]);},'xStart':null,'yStart':null,'width':null,'height':null,'xEnd':null,'yEnd':null,'data':[],'pixelsToSet':[],'targets':[],'lastPxl':[null,null],'dist':(x3,x4,x5,x6)=>n(x3-x5)+n(x4-x6)};}['getCurrentMode'](){var rG=rx;return this[rG(0x279)];}[rx(0x202)](){var V0=rx;return i[this[V0(0x279)]][V0(0x141)]();}['setMode'](x2){var V1=rx;x2 in i?(this[V1(0x279)]=x2,localStorage[V1(0x26f)]=x2,this[V1(0x127)](V1(0x23e)+this['getCurrentModeName']()+'\x22')):this[V1(0x25b)](V1(0xc4)+x2+V1(0x1de));}[rx(0x158)](x2){var V2=rx;this['availableCovers'][V2(0x27d)](x2)?(this['cover']=x2,localStorage[V2(0x22f)]=x2):this[V2(0x25b)](V2(0x1d9)+x2+V2(0x1de));}[rx(0x97)](){var V3=rx;return this[V3(0x1dd)];}[rx(0x127)](){console['log']('[VB]',...arguments);}[rx(0x25b)](){var V4=rx;console['warn'](V4(0x1f5),...arguments);}[rx(0x99)](){var V5=rx;return D[V5(0x1a0)]()?X(j*0.1,j*0.2):D['getTime']()*X(0xfa,0x258);}[rx(0x216)](){var V6=rx;if(!D[V6(0x1a0)]())return this[V6(0x127)](V6(0x19e)),this[V6(0x217)]();let x2=performance[V6(0x1fb)](),x3=null,x4=[];if(C){this[V6(0x10c)][V6(0x178)]=C['x1'],this[V6(0x10c)][V6(0xde)]=C['y1'],this[V6(0x10c)][V6(0x118)]=C[V6(0x118)],this[V6(0x10c)][V6(0x110)]=C[V6(0x110)],this[V6(0x10c)][V6(0x1d1)]=this[V6(0x10c)][V6(0x178)]+this[V6(0x10c)][V6(0x118)],this[V6(0x10c)][V6(0x155)]=this[V6(0x10c)]['yStart']+this[V6(0x10c)][V6(0x110)],this[V6(0x10c)][V6(0x1b6)]();if(this[V6(0x19c)])return m[V6(0xc1)]('load\x20ch'),this[V6(0x217)](0x1f4);;}else return this[V6(0x127)](V6(0x8c)),m['setBotStatus'](V6(0x1c1)),this[V6(0x217)](0x1f4);;let x5=this[V6(0x21f)]();switch(x5){case V6(0x109):this[V6(0x15e)]++,m[V6(0xc1)]('build'),this[V6(0x217)]();break;case V6(0x94):this[V6(0x127)](V6(0x18f)),m[V6(0xc1)](V6(0x94)),this[V6(0x217)](X(0x7d0,0xfa0),v);break;default:m[V6(0xc1)](V6(0x171)),this['restart'](X(0x7d0,0xfa0),v);}}['botting'](){var V7=rx;let x2;if(this[V7(0x97)]()==='all')x2=()=>!![];else{if(this[V7(0x97)]()==='selected'){let x4=document[V7(0x1cf)](V7(0x149))['style'][V7(0x263)][V7(0x18c)](F)[V7(0x210)](x5=>+x5);x2=x5=>o[V7(0x153)](x5,x4);}}const x3=x5=>{var V8=V7;let x6,x7,x8=0x0;for(x7=0x0;x7!==this[V8(0x10c)][V8(0x110)];x7++)for(x6=0x0;x6!==this[V8(0x10c)]['width'];x6++,x8+=0x4)x5(x6,x7,x8);};if(this[V7(0xba)]()===s['RANDOM']){let x5=[],x6;x3((x7,x8,x9)=>{var V9=V7;x6=C[V9(0x191)](x9);if(x6!==null&&x6[0x3]!==0x0&&x2(x6)&&!o[V9(0x153)](this[V9(0x10c)][V9(0x192)](x9),x6))x5[V9(0xe3)]([x7,x8,o[V9(0xd9)](x6)]);}),m[V7(0x1ea)](Math[V7(0x268)]((x5['length']<<0x2)/0x6)/0xa,Math[V7(0x268)](x5[V7(0x1eb)]*0x7/0x6)/0xa);if(x5[V7(0x1eb)]){const x7=x5[X(0x0,x5[V7(0x1eb)]-0x1)];return x7[0x0]+=C['x1'],x7[0x1]+=C['y1'],J[V7(0x1e0)](...x7),'build';}else return V7(0x94);}else{if(this[V7(0xba)]()===s[V7(0x185)]){let x8=null,x9=0x0;x3((xx,xr,xV)=>{var Vx=V7;const xp=C[Vx(0x191)](xV);xp!==null&&xp[0x3]!==0x0&&x2(xp)&&!o['same'](this['zone'][Vx(0x192)](xV),xp)&&(x9++,x8===null&&(x8=[xx+C['x1'],xr+C['y1'],o[Vx(0xd9)](xp)]));;}),m[V7(0x1ea)](Math[V7(0x268)]((x9<<0x2)/0x6)/0xa,Math['round'](x9*0x7/0x6)/0xa);if(x8)return J[V7(0x1e0)](...x8),V7(0x109);else return V7(0x94);}else{if(this[V7(0xba)]()===s[V7(0xa5)]){let xx=[],xr=C['width']/0x2,xV=C[V7(0x110)]/0x2;const xp=([xd,xh])=>((xd-xr)**0x2+(xh-xV)**0x2)**0.5;let xc,xu,xT=Infinity,xt=0x0;x3((xd,xh,xK)=>{var Vr=V7;xc=C['getByIndex'](xK);if(xc!==null&&xc[0x3]!==0x0&&x2(xc)&&!o[Vr(0x153)](this[Vr(0x10c)][Vr(0x192)](xK),xc)){xt++,xu=xp([xd,xh]);if(xT>xu+0.9)xT=xu,xx=[[xd,xh,o[Vr(0xd9)](xc)]];else xT===xu&&xx[Vr(0xe3)]([xd,xh,o[Vr(0xd9)](xc)]);;};}),m[V7(0x1ea)](Math[V7(0x268)]((xt<<0x2)/0x6)/0xa,Math[V7(0x268)](xt*0x7/0x6)/0xa);if(xx[V7(0x1eb)])return xy=xx[X(0x0,xx[V7(0x1eb)]-0x1)],xy[0x0]+=C['x1'],xy[0x1]+=C['y1'],J[V7(0x1e0)](...xy),V7(0x109);else return'done';}else{if(this[V7(0xba)]()===s[V7(0x13e)]){let xd,xh,xK,xR,xf=!![],xj=0x0,xv=null;for(xR=0x0;xR!==0x2;xR++){xf=xR===0x0;for(xh=0x0;xh!==this[V7(0x10c)]['height'];xh++){xf=!xf;for(xd=+xf;xd<this[V7(0x10c)][V7(0x118)];xd+=0x2){xK=C[V7(0x194)](xd,xh);xK!==null&&xK[0x3]!==0x0&&x2(xK)&&!o[V7(0x153)](xK,this[V7(0x10c)][V7(0x194)](xd,xh))&&(xj++,xv===null&&(xv=[xd+C['x1'],xh+C['y1'],o[V7(0xd9)](xK)]));;};};};m[V7(0x1ea)](Math['round']((xj<<0x2)/0x6)/0xa,Math[V7(0x268)](xj*0x7/0x6)/0xa);if(xv)return J[V7(0x1e0)](...xv),'build';else return V7(0x94);}else{if(this[V7(0xba)]()===s[V7(0x13c)]){let xn=this[V7(0x115)]['getTargets']()[V7(0x180)](([xe,xX,xP])=>!o['same'](this[V7(0x10c)][V7(0x194)](xe,xX),xP));if(xn['length']){const xe=xn['pop']();return J[V7(0x1e0)](xe[0x0]+C['x1'],xe[0x1]+C['y1'],o['RGBToId'](xe[0x2])),V7(0x109);}else return'done';}else this[V7(0x127)](V7(0xc9));}}}}}['clearTimeout'](){var VV=rx;this[VV(0x244)]!==null&&(clearTimeout(this[VV(0x244)]),this[VV(0x244)]=null);}[rx(0xd0)](){var Vp=rx;this[Vp(0x1cb)](),this[Vp(0x127)](Vp(0x281)),m[Vp(0xc1)](Vp(0x21d));}[rx(0x217)](x2=this[rx(0x99)]()){var Vc=rx;this['clearTimeout'](),this['timeout']=setTimeout(()=>this[Vc(0x216)](),x2),this[Vc(0x127)]('Delay',x2);}}();m[rx(0x164)][rx(0xf5)](rx(0x26c),x2=>N[rx(0x1c7)](x2['target'][rx(0x12c)])),Object[rx(0x278)](s)[rx(0x15a)](([x2,x3])=>m[rx(0x1c4)](x2['toLowerCase'](),x3)),Array[rx(0x1a7)](m['strategyElement'][rx(0x168)])[rx(0x166)](x2=>x2['value']===N[rx(0xba)]())[rx(0x18d)](rx(0x14b),''),m[rx(0x24f)]['addEventListener']('change',x2=>N[rx(0x158)](x2[rx(0x1bd)][rx(0x12c)])),N[rx(0x174)]['forEach'](x2=>m['addCover'](x2)),Array[rx(0x1a7)](m[rx(0x24f)]['childNodes'])[rx(0x166)](x2=>x2[rx(0x12c)]===N[rx(0x97)]())[rx(0x18d)]('selected',''),window[rx(0xf5)](rx(0xb5),({keyCode:x2})=>{var Vu=rx;switch(x2){case 0x42:N[Vu(0x244)]===null?N[Vu(0x217)](0x0):N[Vu(0xd0)]();break;case 0x4e:let [x3,x4]=x0();m[Vu(0x215)][Vu(0x12c)]=localStorage['lastX']=x3,m[Vu(0xeb)][Vu(0x12c)]=localStorage[Vu(0x150)]=x4;C&&(C['x1']=x3,C['y1']=x4);break;default:console[Vu(0x127)](x2);};});function M(){var VT=rx;let x3,x4,x5,x6,x7=G();return x3=~~(w[VT(0xa7)]-w[VT(0x117)]/x7+0x1),x4=~~(w[VT(0x247)]-w[VT(0x161)]/x7+0x1),x5=~~(w['worldX']+(A['width']-w[VT(0x117)])/x7-0x1),x6=~~(w[VT(0x247)]+(A[VT(0x110)]-w[VT(0x161)])/x7-0x1),[x3,x4,x5,x6];}function G(){var Vt=rx;let x2=+window[Vt(0x1c2)][Vt(0x274)]['match'](F)[0x2];return x2>0xa?(x2/0xa)**0x2:x2**0.1||0x1;}function x0(){var Vd=rx;return O[Vd(0x114)][Vd(0x18c)](F)[Vd(0x210)](x2=>+x2);}}[Vh(0x1c3)](this,r(Vh(0x1e3))[Vh(0xc5)]));},{'./resources/canvas':0x2,'./resources/constants':0x3,'./resources/selectors.json':0x4,'./resources/style':0x5,'./src/Chunk':0x6,'./src/ImageProcessor':0x7,'./src/Palette':0x8,'./src/Template':0x9,'./src/functions':0xa,'buffer':0xc}],0x2:[function(r,V,p){V['exports']={'CHUNK_SIZE':0x100,'COLORS':[[0xca,0xe3,0xff],[0xff,0xff,0xff],[0xff,0xff,0xff],[0xe4,0xe4,0xe4],[0xc4,0xc4,0xc4],[0x88,0x88,0x88],[0x4e,0x4e,0x4e],[0x0,0x0,0x0],[0xf4,0xb3,0xae],[0xff,0xa7,0xd1],[0xff,0x54,0xb2],[0xff,0x65,0x65],[0xe5,0x0,0x0],[0x9a,0x0,0x0],[0xfe,0xa4,0x60],[0xe5,0x95,0x0],[0xa0,0x6a,0x42],[0x60,0x40,0x28],[0xf5,0xdf,0xb0],[0xff,0xf8,0x89],[0xe5,0xd9,0x0],[0x94,0xe0,0x44],[0x2,0xbe,0x1],[0x68,0x83,0x38],[0x0,0x65,0x13],[0xca,0xe3,0xff],[0x0,0xd3,0xdd],[0x0,0x83,0xc7],[0x0,0x0,0xea],[0x19,0x19,0x73],[0xcf,0x6e,0xe4],[0x82,0x0,0x80]]};},{}],0x3:[function(r,V,p){var VK=T;V[VK(0xa8)]={'MAX_REQUESTS_PER_HOUR':0xfa0,'PXL_CB':0x2*0x3e8,'MAX_TIME_STACK':0x3c*0x3e8};},{}],0x4:[function(r,V,p){var VR=T;V[VR(0xa8)]={'selectedColor':VR(0x149),'coords':VR(0x101),'palettebox':'#palettebox','gameCanvas':VR(0x96),'bot':{'void-bot':null,'half':null}};},{}],0x5:[function(r,V,p){var Vf=T;V[Vf(0xa8)]='\x0a\x20\x20\x20\x20#void-bot\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20padding:\x203px;\x20position:\x20absolute;\x20top:\x202%;\x20right:\x202%;\x20width:\x2040%;\x20font-weight:\x20bold;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20input{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20width:\x2060px;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20select{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20font:\x20inherit;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20button{\x0a\x20\x20\x20\x20\x20\x20\x20\x20background-color:\x20black;\x20color:\x20red;\x20border-color:\x20darkred;\x20font:\x20inherit;\x20margin:\x205px;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20#void-bot\x20.half{\x0a\x20\x20\x20\x20\x20\x20\x20\x20width:\x20calc(50%\x20-\x205px);\x20margin-left:5px;\x0a\x20\x20\x20\x20}\x0a';},{}],0x6:[function(r,V,p){var Vj=T;const {CHUNK_SIZE:c}=r('../resources/canvas.json');V[Vj(0xa8)]=class{constructor(t,d,h){var Vv=Vj;this['x']=t,this['y']=d,this[Vv(0xe1)]=h,this[Vv(0x139)]=Date[Vv(0x1fb)](),this['_c']=null;}[Vj(0x194)](t,d){var Vn=Vj;return this['_c']=t+d*c<<0x2,[this[Vn(0xe1)][this['_c']],this[Vn(0xe1)][this['_c']+0x1],this[Vn(0xe1)][this['_c']+0x2]];}[Vj(0x102)](t,d,h){var Ve=Vj;return this['_c']=t+d*c<<0x2,[this[Ve(0xe1)][this['_c']],this[Ve(0xe1)][this['_c']+0x1],this['data'][this['_c']+0x2]]=[...h];}};},{'../resources/canvas.json':0x2}],0x7:[function(r,V,p){var VX=T;const c=r(VX(0x239)),{floor:t,sqrt:d,min:h}=Math,K=R=>{var VP=VX;let f=new Uint8ClampedArray(R[VP(0x1eb)]);for(let j=0x0;j!==R[VP(0x1eb)];j++)f[j]=R[j];return f;};V[VX(0xa8)]=class R{constructor(){var VL=VX;this[VL(0x1b8)]=null,this['origTemplate']=null,this[VL(0x9c)]=null,this[VL(0x121)]=null,this['MODES']={'LINEAR':0x0,'RANDOM':0x1,'WOYKEN':0x2};}[VX(0x163)](f){var Vk=VX,j=f[Vk(0x1eb)],v,n;while(0x0!==j){n=Math[Vk(0x105)](Math[Vk(0x23a)]()*j),j-=0x1,v=f[j],f[j]=f[n],f[n]=v;}return f;}[VX(0x21c)](f){var Va=VX;this['origTemplate']=f,this[Va(0x1b8)]={'width':f[Va(0x118)],'height':f[Va(0x110)],'data':K(f[Va(0xe1)])},this[Va(0xcc)]=c(this[Va(0xbf)][Va(0x1d0)]['getImageData'](0x0,0x0,this[Va(0x1b8)][Va(0x118)],this[Va(0x1b8)][Va(0x110)]))[Va(0x119)]()[Va(0xe1)],this[Va(0x9c)]=null;}[VX(0x1ca)](f,j){var VW=VX;const v=[];let n,e,X,P,L,k;for(let W=0x0;W!==this[VW(0x1b8)]['height'];W++){e=this[VW(0x1b8)][VW(0x118)]*W;for(let E=0x0;E!==this[VW(0x1b8)][VW(0x118)];E++){n=e+E<<0x2,X=this['sobelData'][n],P=this[VW(0xcc)][n|0x1],L=this['sobelData'][n|0x2],k=this[VW(0x1b8)]['data'][n|0x3];if(k!==0xff)continue;P>=f&&P<=j&&v['push']({'x':E,'y':W});}}return v;}[VX(0xaf)](f){var VE=VX;const j=t(this[VE(0x1b8)][VE(0x118)]/0x2),v=t(this['template'][VE(0x110)]/0x2),n=0x14;let e,X;const P=W=>(W['x']-j)**0x2+(W['y']-v)**0x2,L=W=>{var VH=VE;let E=[],H=[];for(let s=0x0;s!==W['length'];s++){(W[s]['x']+W[s]['y'])%n===0x0||Math[VH(0x120)](W[s]['x']-W[s]['y'])%n===0x0?H['push'](W[s]):E[VH(0xe3)](W[s]);}return{'grid':H,'other':E};},k=W=>{var Vi=VE;W=[...W];let E=[];const H=()=>{var Vs=T;let s=0x0,o=P(W[0x0]),U,g;for(let l=0x0;l!==W[Vs(0x1eb)];l++){U=P(W[l]);if(U<o){o=U,s=l;if(U===0x0)break;}}return W['splice'](s,0x1)[0x0];};while(W[Vi(0x1eb)])E['push'](H());return E;};this[VE(0x27c)]=[];for(let W=0x0;W!==0x100;W++){let {grid:E,other:H}=L(this[VE(0x1ca)](W,W));E=k(E),H=k(H),this['layers'][W]=[],H[VE(0x15a)](s=>this[VE(0x27c)][W][VE(0xe3)](s)),E[VE(0x15a)](s=>this[VE(0x27c)][W][VE(0xe3)](s));}this[VE(0x9c)]=[],this[VE(0x27c)][VE(0x15a)](s=>s[VE(0x15a)](o=>this[VE(0x9c)][VE(0xe3)](o)));let a;this[VE(0x9c)]=this[VE(0x9c)][VE(0x210)](({x:s,y:o})=>{var Vo=VE;return a=s+o*this[Vo(0x1b8)]['width']<<0x2,[s,o,[this[Vo(0x1b8)]['data'][a],this[Vo(0x1b8)]['data'][a|0x1],this['template'][Vo(0xe1)][a|0x2]]];});}[VX(0x1c7)](f){this['currentMode']=f;}[VX(0x275)](){var VU=VX;if(!this[VU(0x9c)])this[VU(0xaf)]();return this[VU(0x9c)];}};},{'sobel':0xe}],0x8:[function(r,V,p){var Vg=T;V[Vg(0xa8)]=class{constructor(c,t){var Vl=Vg;this[Vl(0x143)]=c[Vl(0x210)](d=>[...d]),this['offset']=t,this[Vl(0x19b)]=null;}[Vg(0x153)](c,t,d=0xf){var VZ=Vg;return Math[VZ(0x120)](c[0x0]-t[0x0])<d&&Math['abs'](c[0x1]-t[0x1])<d&&Math['abs'](c[0x2]-t[0x2])<d;}['has'](c){return this['RGBToId'](c)!==null;}['convert'](c){var VB=Vg;let t,h=Infinity,K,R;for(let f=this[VB(0x8f)];f!==this[VB(0x143)][VB(0x1eb)];f++){R=this[VB(0x143)][f];if(this[VB(0x153)](R,c))return R;;K=Math[VB(0x120)](R[0x0]-c[0x0])+Math[VB(0x120)](R[0x1]-c[0x1])+Math[VB(0x120)](R[0x2]-c[0x2]);K<h&&(h=K,t=f);;};return[...this[VB(0x143)][t]];}['IdToRGB'](c){var Vy=Vg;return this[Vy(0x143)][c];}[Vg(0xd9)](c){var VQ=Vg;for(let t=this[VQ(0x143)]['length']-0x1;t!==-0x1;t--)if(this['same'](this[VQ(0x143)][t],c))return t;return null;}[Vg(0x1f1)](c){var VI=Vg;this[VI(0x19b)][typeof c===VI(0x10a)?this[VI(0xd9)](c):c][VI(0x13b)]();}['onColorSelect'](){}['bindColorsWithElements'](c){var Vq=Vg;c=Array[Vq(0x1a7)](c),this[Vq(0x19b)]={},this['colors'][Vq(0x15a)]((t,d)=>{var VJ=Vq;let h=c['find'](K=>this[VJ(0x153)](t,K[VJ(0x9e)]['backgroundColor']['match'](/-?\d+/g)[VJ(0x210)](R=>+R)));if(h===void 0x0)return console[VJ(0x13a)](VJ(0x181)+t+']');this['elems'][d]=h,this[VJ(0x19b)][d][VJ(0xf5)]('click',()=>this[VJ(0x22b)]({'id':d,'rgb':t}));});}};},{}],0x9:[function(r,V,p){var VY=T;const {loadImage:c}=r(VY(0x1a5));class t{get['x2'](){var Vm=VY;return this['x1']+this[Vm(0x118)];}get['y2'](){var VS=VY;return this['y1']+this[VS(0x110)];}get['canvas'](){return this['ctx']['canvas'];}constructor({x:d,y:h,width:K,height:R,name:f}){var VO=VY;this['x1']=d,this['y1']=h,this['width']=K,this[VO(0x110)]=R,this[VO(0x200)]=f,this[VO(0x229)]=t[VO(0x23c)],this[VO(0xb0)]=null,this['ctx']=null;}[VY(0x194)](d,h){var VA=VY;const K=d+h*this['width']<<0x2;return[this[VA(0xe1)][K|0x0],this[VA(0xe1)][K|0x1],this[VA(0xe1)][K|0x2],this[VA(0xe1)][K|0x3]];}['getByIndex'](d){var Vw=VY;return[this[Vw(0xe1)][d|0x0],this['data'][d|0x1],this[Vw(0xe1)][d|0x2],this[Vw(0xe1)][d|0x3]];}[VY(0x10b)](d,h,K,R){return this['x1']<K&&this['x2']>d&&this['y1']<R&&this['y2']>h;}['load'](d){var VF=VY;return this[VF(0xb0)]=d,this[VF(0x229)]=t['LOADING'],c(d)['then'](h=>{var Vb=VF;this[Vb(0x1d0)]=document['createElement'](Vb(0x233))[Vb(0x98)]('2d'),this[Vb(0x1d0)][Vb(0x233)][Vb(0x118)]=this[Vb(0x118)]=h[Vb(0x118)],this['ctx']['canvas'][Vb(0x110)]=this['height']=h[Vb(0x110)],this[Vb(0x1d0)][Vb(0x1e2)](h,0x0,0x0),this[Vb(0x144)]=this['ctx'][Vb(0x11d)](0x0,0x0,this[Vb(0x118)],this[Vb(0x110)]),this[Vb(0xe1)]=this[Vb(0x144)]['data'],this['status']=t['LOADED'];});}[VY(0x1f4)](d){var VD=VY;for(let h=0x0;h!==this['data']['length'];h+=0x4){if(this[VD(0xe1)][h|0x3]===0x0)continue;const K=d[VD(0x1f4)]([this[VD(0xe1)][h],this[VD(0xe1)][h+0x1],this[VD(0xe1)][h+0x2]]);this['data'][h|0x0]=K[0x0],this[VD(0xe1)][h|0x1]=K[0x1],this[VD(0xe1)][h|0x2]=K[0x2];}this[VD(0x1d0)][VD(0x24b)](this['imageData'],0x0,0x0);}};t[VY(0x23c)]=0x0,t['LOADING']=0x1,t[VY(0x1a4)]=0x2,V['exports']=t;},{'./functions':0xa}],0xa:[function(r,V,p){var VC=T;V[VC(0xa8)]['between']=(v,n,e)=>n>v&&n<e,V['exports']['antialiasing']=(v,n)=>{var Vz=VC;v['mozImageSmoothingEnabled']=v[Vz(0x258)]=v[Vz(0x23b)]=v[Vz(0xea)]=n;},V['exports'][VC(0x1aa)]=v=>document[VC(0x251)][VC(0x95)](c({'type':VC(0x9e),'html':v})),V[VC(0xa8)]['trySendNotification']=(v,n)=>{var VN=VC;if(!(VN(0xe2)in window))return;const e=()=>new Notification(v,n);if(Notification[VN(0xad)]==='granted')e();else Notification[VN(0xad)]!==VN(0x16e)&&Notification[VN(0x26d)](X=>{var VM=VN;if(X===VM(0x15b))e();});},V[VC(0xa8)]['factory']=c;function c(v,n=[]){var VG=VC;let X=v['type']==='text'?document[VG(0x15f)](v[VG(0xca)]||''):document[VG(0x1b4)](v[VG(0x1f6)]);v['id']&&X[VG(0x18d)]('id',v['id']);v['class']&&X[VG(0x18d)](VG(0x266),v[VG(0x266)]);v[VG(0x9e)]&&X[VG(0x18d)](VG(0x9e),v[VG(0x9e)]);if(v[VG(0x9a)])X[VG(0x1df)]=v['html'];else v[VG(0xca)]&&(v[VG(0x1a9)]?X['innerText']=j(v[VG(0xca)]):X[VG(0x114)]=v[VG(0xca)]);v['listeners']&&Object[VG(0x278)](v[VG(0x1ab)])[VG(0x15a)](([P,L])=>{var p0=VG;P['startsWith']('on')?X[p0(0xf5)](P[p0(0xd2)](0x2),L):X[p0(0xf5)](P,L);});v[VG(0xcf)]&&Object[VG(0x278)](v[VG(0xcf)])['forEach'](([P,L])=>X[VG(0x18d)](P,L));v['shadow']===!![]&&X['attachShadow']({'mode':VG(0x1dc)});if(n[VG(0x1eb)]!==0x0){const P=v[VG(0x20d)]?X['shadowRoot']:X;n[VG(0x15a)](L=>P[VG(0x95)](L));}return X;}V[VC(0xa8)]['switcherText']=v=>v?'On':VC(0x282),V[VC(0xa8)][VC(0x1a6)]=(v,n=undefined)=>{var p1=VC;let e=document['createElement']('a');e['href']=v[p1(0xdd)]('image/png'),e[p1(0x13d)]=n,e[p1(0x13b)]();},V[VC(0xa8)]['$']=v=>document['getElementById'](v),V['exports'][VC(0x271)]=v=>new Promise((n,e)=>{var p2=VC;let X=new Image();X[p2(0x208)]='',X[p2(0x1fe)]=()=>n(X),X[p2(0x249)]=e,X[p2(0xb0)]=v;}),V[VC(0xa8)][VC(0x17e)]=v=>c({'type':VC(0x18a)},[c({'type':VC(0x18a),'class':VC(0x243),'html':VC(0x129)+v+VC(0x256)})]),V[VC(0xa8)][VC(0x232)]=()=>{var p3=VC;let v=![];try{v=window!=window[p3(0xfd)]||document!=top['document']||self[p3(0x1c2)]!=top[p3(0x1c2)];}catch(n){v=!![];};return v;},V[VC(0xa8)][VC(0x9f)]=v=>{var p4=VC;return window[p4(0x188)]={'imports':{'imported_func':n=>console['log'](n)}},fetch(v)[p4(0xda)](n=>n[p4(0xef)]())[p4(0xda)](n=>WebAssembly[p4(0x90)](n,window[p4(0x188)]));},V[VC(0xa8)][VC(0xb2)]=(v,n,e)=>{var p5=VC;let X=document[p5(0x1b4)](p5(0x233)),P=X[p5(0x98)]('2d');X['width']=n,X[p5(0x110)]=e;let L=P[p5(0x11d)](0x0,0x0,n,e);for(let k=0x0;k!==v[p5(0x1eb)];k++)L[p5(0xe1)][k]=v[k];return P[p5(0x24b)](L,0x0,0x0),X;},V[VC(0xa8)]['rand']=(v,n)=>Math[VC(0x268)](v-0.5+Math[VC(0x23a)]()*(n-v+0x1)),V['exports'][VC(0xb4)]=()=>h('/me'),V['exports'][VC(0x1f2)]=async v=>{var p6=VC;const n=new FormData();n[p6(0x15c)]('modlist',!![]);const e=await fetch(d+p6(0x10f),{'credentials':p6(0x1b2),'method':p6(0xf1),'body':n});e['ok']?v(await e[p6(0xe7)]()):v([]);},V[VC(0xa8)]['submitRemMod']=async(v,n)=>{var p7=VC;const e=new FormData();e[p7(0x15c)](p7(0x173),v);const X=await fetch(d+p7(0x10f),{'credentials':p7(0x1b2),'method':'POST','body':e});n(X['ok'],await X[p7(0xca)]());},V[VC(0xa8)][VC(0x111)]=()=>h(VC(0x252));const t=((()=>{var p8=VC;if(!window[p8(0x26a)]||!window['ssv'][p8(0x285)]||window[p8(0x1c2)][p8(0x205)]===p8(0xa9))return'';const v=window[p8(0x1c2)][p8(0x205)][p8(0x11e)]('.');return v[p8(0x1eb)]>0x2&&v[p8(0x12b)](),window[p8(0x26a)]['shard']+'.'+v[p8(0x12d)]('.');})()),d=(t&&window[VC(0x1c2)]['protocol']+'//'+t)+VC(0x213);async function h(v,n=!![],X=!![]){var p9=VC;X&&(v=''+d+v);try{const P=await K(v,{'credentials':n?p9(0x1b2):p9(0xf8)});return P[p9(0xe7)]();}catch(L){return{'errors':['Could\x20not\x20connect\x20to\x20server,\x20please\x20try\x20again\x20later\x20:(']};}}async function K(v,n={}){var px=VC;const {timeout:timeout=0x7530}=n,e=new AbortController(),X=setTimeout(()=>e['abort'](),timeout),P=await fetch(v,{...n,'signal':e[px(0x175)]});return clearTimeout(X),P;}const R=new Set(),f=()=>{var pr=VC;let v=0x0;do{v=parseInt(Math['random']()[pr(0xa1)]()['substring'](0x2));}while(R[pr(0x145)](v));return R[pr(0x1be)](v),v;};V[VC(0xa8)][VC(0xe0)]=f,V[VC(0xa8)][VC(0x176)]=()=>f()[VC(0xa1)]()[VC(0x11e)]('')['map'](v=>String[VC(0x1d7)](0x41+parseInt(v)%0x1a))['join']('');var j=v=>{var pV=VC;return v[pV(0x11e)]('')['join'](String[pV(0x1d7)](0x2028));};V[VC(0xa8)][VC(0xb9)]=j,V[VC(0xa8)]['sq']=v=>v*v;},{}],0xb:[function(r,V,p){'use strict';var pp=T;p['byteLength']=j,p[pp(0x17f)]=n,p['fromByteArray']=P;var c=[],t=[],d=typeof Uint8Array!=='undefined'?Uint8Array:Array,h=pp(0x179);for(var K=0x0,R=h['length'];K<R;++K){c[K]=h[K],t[h[pp(0x1c5)](K)]=K;}t['-'[pp(0x1c5)](0x0)]=0x3e,t['_'[pp(0x1c5)](0x0)]=0x3f;function f(L){var pc=pp,k=L[pc(0x1eb)];if(k%0x4>0x0)throw new Error(pc(0x240));var a=L[pc(0x273)]('=');if(a===-0x1)a=k;var W=a===k?0x0:0x4-a%0x4;return[a,W];}function j(L){var k=f(L),a=k[0x0],W=k[0x1];return(a+W)*0x3/0x4-W;}function v(L,k,a){return(k+a)*0x3/0x4-a;}function n(L){var pu=pp,k,a=f(L),W=a[0x0],E=a[0x1],H=new d(v(L,W,E)),s=0x0,o=E>0x0?W-0x4:W,U;for(U=0x0;U<o;U+=0x4){k=t[L[pu(0x1c5)](U)]<<0x12|t[L[pu(0x1c5)](U+0x1)]<<0xc|t[L[pu(0x1c5)](U+0x2)]<<0x6|t[L[pu(0x1c5)](U+0x3)],H[s++]=k>>0x10&0xff,H[s++]=k>>0x8&0xff,H[s++]=k&0xff;}return E===0x2&&(k=t[L[pu(0x1c5)](U)]<<0x2|t[L[pu(0x1c5)](U+0x1)]>>0x4,H[s++]=k&0xff),E===0x1&&(k=t[L[pu(0x1c5)](U)]<<0xa|t[L[pu(0x1c5)](U+0x1)]<<0x4|t[L['charCodeAt'](U+0x2)]>>0x2,H[s++]=k>>0x8&0xff,H[s++]=k&0xff),H;}function e(L){return c[L>>0x12&0x3f]+c[L>>0xc&0x3f]+c[L>>0x6&0x3f]+c[L&0x3f];}function X(L,k,a){var pT=pp,W,E=[];for(var H=k;H<a;H+=0x3){W=(L[H]<<0x10&0xff0000)+(L[H+0x1]<<0x8&0xff00)+(L[H+0x2]&0xff),E['push'](e(W));}return E[pT(0x12d)]('');}function P(L){var pt=pp,k,a=L[pt(0x1eb)],W=a%0x3,E=[],H=0x3fff;for(var s=0x0,o=a-W;s<o;s+=H){E['push'](X(L,s,s+H>o?o:s+H));}if(W===0x1)k=L[a-0x1],E['push'](c[k>>0x2]+c[k<<0x4&0x3f]+'==');else W===0x2&&(k=(L[a-0x2]<<0x8)+L[a-0x1],E['push'](c[k>>0xa]+c[k>>0x4&0x3f]+c[k<<0x2&0x3f]+'='));return E['join']('');}},{}],0xc:[function(r,V,p){var cW=T;(function(c){/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
'use strict';var pd=T;var t=r(pd(0x100)),d=r(pd(0x237));p[pd(0xc5)]=c,p[pd(0x183)]=a,p[pd(0xae)]=0x32;var h=0x7fffffff;p[pd(0x1e8)]=h,c[pd(0x1ee)]=K();!c[pd(0x1ee)]&&typeof console!==pd(0x209)&&typeof console[pd(0x13a)]==='function'&&console[pd(0x13a)]('This\x20browser\x20lacks\x20typed\x20array\x20(Uint8Array)\x20support\x20which\x20is\x20required\x20by\x20'+pd(0x10d));function K(){var ph=pd;try{var x5=new Uint8Array(0x1);return x5[ph(0x25e)]={'__proto__':Uint8Array['prototype'],'foo':function(){return 0x2a;}},x5[ph(0x224)]()===0x2a;}catch(x6){return![];}}Object['defineProperty'](c[pd(0x288)],pd(0x25a),{'enumerable':!![],'get':function(){var pK=pd;if(!c['isBuffer'](this))return undefined;return this[pK(0x1e3)];}}),Object[pd(0x1f0)](c['prototype'],'offset',{'enumerable':!![],'get':function(){var pR=pd;if(!c[pR(0x223)](this))return undefined;return this['byteOffset'];}});function R(x5){var pf=pd;if(x5>h)throw new RangeError('The\x20value\x20\x22'+x5+'\x22\x20is\x20invalid\x20for\x20option\x20\x22size\x22');var x6=new Uint8Array(x5);return x6[pf(0x25e)]=c[pf(0x288)],x6;}function c(x5,x6,x7){var pj=pd;if(typeof x5===pj(0x201)){if(typeof x6===pj(0x134))throw new TypeError(pj(0x280));return n(x5);}return f(x5,x6,x7);}typeof Symbol!==pd(0x209)&&Symbol[pd(0x276)]!=null&&c[Symbol[pd(0x276)]]===c&&Object[pd(0x1f0)](c,Symbol[pd(0x276)],{'value':null,'configurable':!![],'enumerable':![],'writable':![]});c['poolSize']=0x2000;function f(x5,x6,x7){var pv=pd;if(typeof x5===pv(0x134))return e(x5,x6);if(ArrayBuffer[pv(0xac)](x5))return X(x5);if(x5==null)throw TypeError('The\x20first\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20ArrayBuffer,\x20Array,\x20'+pv(0x125)+typeof x5);if(x3(x5,ArrayBuffer)||x5&&x3(x5[pv(0x1e3)],ArrayBuffer))return P(x5,x6,x7);if(typeof x5===pv(0x201))throw new TypeError(pv(0x22c));var x8=x5[pv(0x195)]&&x5[pv(0x195)]();if(x8!=null&&x8!==x5)return c[pv(0x1a7)](x8,x6,x7);var x9=L(x5);if(x9)return x9;if(typeof Symbol!=='undefined'&&Symbol['toPrimitive']!=null&&typeof x5[Symbol[pv(0xec)]]===pv(0x1b9))return c['from'](x5[Symbol[pv(0xec)]](pv(0x134)),x6,x7);throw new TypeError(pv(0x1bc)+pv(0x125)+typeof x5);}c[pd(0x1a7)]=function(x5,x6,x7){return f(x5,x6,x7);},c[pd(0x288)][pd(0x25e)]=Uint8Array[pd(0x288)],c[pd(0x25e)]=Uint8Array;function j(x5){var pn=pd;if(typeof x5!==pn(0x201))throw new TypeError(pn(0x227));else{if(x5<0x0)throw new RangeError('The\x20value\x20\x22'+x5+pn(0x25f));}}function v(x5,x6,x7){var pe=pd;j(x5);if(x5<=0x0)return R(x5);if(x6!==undefined)return typeof x7===pe(0x134)?R(x5)['fill'](x6,x7):R(x5)[pe(0x198)](x6);return R(x5);}c[pd(0x24a)]=function(x5,x6,x7){return v(x5,x6,x7);};function n(x5){return j(x5),R(x5<0x0?0x0:k(x5)|0x0);}c[pd(0x241)]=function(x5){return n(x5);},c[pd(0xc7)]=function(x5){return n(x5);};function e(x5,x6){var pX=pd;(typeof x6!==pX(0x134)||x6==='')&&(x6=pX(0xee));if(!c[pX(0x106)](x6))throw new TypeError(pX(0x18e)+x6);var x7=W(x5,x6)|0x0,x8=R(x7),x9=x8[pX(0x1d5)](x5,x6);return x9!==x7&&(x8=x8[pX(0x283)](0x0,x9)),x8;}function X(x5){var pP=pd,x6=x5[pP(0x1eb)]<0x0?0x0:k(x5['length'])|0x0,x7=R(x6);for(var x8=0x0;x8<x6;x8+=0x1){x7[x8]=x5[x8]&0xff;}return x7;}function P(x5,x6,x7){var pL=pd;if(x6<0x0||x5[pL(0x142)]<x6)throw new RangeError(pL(0x262));if(x5[pL(0x142)]<x6+(x7||0x0))throw new RangeError(pL(0x220));var x8;if(x6===undefined&&x7===undefined)x8=new Uint8Array(x5);else x7===undefined?x8=new Uint8Array(x5,x6):x8=new Uint8Array(x5,x6,x7);return x8[pL(0x25e)]=c[pL(0x288)],x8;}function L(x5){var pk=pd;if(c[pk(0x223)](x5)){var x6=k(x5[pk(0x1eb)])|0x0,x7=R(x6);if(x7[pk(0x1eb)]===0x0)return x7;return x5[pk(0x27f)](x7,0x0,0x0,x6),x7;}if(x5[pk(0x1eb)]!==undefined){if(typeof x5[pk(0x1eb)]!==pk(0x201)||x4(x5[pk(0x1eb)]))return R(0x0);return X(x5);}if(x5[pk(0x1f6)]==='Buffer'&&Array[pk(0x11c)](x5[pk(0xe1)]))return X(x5[pk(0xe1)]);}function k(x5){var pa=pd;if(x5>=h)throw new RangeError(pa(0x1a3)+pa(0x25d)+h['toString'](0x10)+pa(0x146));return x5|0x0;}function a(x5){var pW=pd;return+x5!=x5&&(x5=0x0),c[pW(0x24a)](+x5);}c[pd(0x223)]=function x5(x6){var pE=pd;return x6!=null&&x6[pE(0x27a)]===!![]&&x6!==c[pE(0x288)];},c[pd(0x17c)]=function x6(x7,x8){var pH=pd;if(x3(x7,Uint8Array))x7=c[pH(0x1a7)](x7,x7['offset'],x7[pH(0x142)]);if(x3(x8,Uint8Array))x8=c[pH(0x1a7)](x8,x8[pH(0x8f)],x8[pH(0x142)]);if(!c[pH(0x223)](x7)||!c[pH(0x223)](x8))throw new TypeError(pH(0x235));if(x7===x8)return 0x0;var x9=x7['length'],xx=x8[pH(0x1eb)];for(var xr=0x0,xV=Math[pH(0x116)](x9,xx);xr<xV;++xr){if(x7[xr]!==x8[xr]){x9=x7[xr],xx=x8[xr];break;}}if(x9<xx)return-0x1;if(xx<x9)return 0x1;return 0x0;},c[pd(0x106)]=function x7(x8){var ps=pd;switch(String(x8)[ps(0x141)]()){case ps(0x170):case ps(0xee):case ps(0x20e):case ps(0x25c):case ps(0x238):case ps(0xbd):case'base64':case'ucs2':case'ucs-2':case ps(0xd4):case ps(0x23f):return!![];default:return![];}},c[pd(0xf3)]=function x8(x9,xx){var pi=pd;if(!Array[pi(0x11c)](x9))throw new TypeError(pi(0x19d));if(x9['length']===0x0)return c[pi(0x24a)](0x0);var xr;if(xx===undefined){xx=0x0;for(xr=0x0;xr<x9[pi(0x1eb)];++xr){xx+=x9[xr][pi(0x1eb)];}}var xV=c['allocUnsafe'](xx),xp=0x0;for(xr=0x0;xr<x9[pi(0x1eb)];++xr){var xc=x9[xr];x3(xc,Uint8Array)&&(xc=c[pi(0x1a7)](xc));if(!c['isBuffer'](xc))throw new TypeError(pi(0x19d));xc[pi(0x27f)](xV,xp),xp+=xc[pi(0x1eb)];}return xV;};function W(x9,xx){var po=pd;if(c['isBuffer'](x9))return x9[po(0x1eb)];if(ArrayBuffer[po(0xac)](x9)||x3(x9,ArrayBuffer))return x9[po(0x142)];if(typeof x9!==po(0x134))throw new TypeError('The\x20\x22string\x22\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20or\x20ArrayBuffer.\x20'+po(0x140)+typeof x9);var xr=x9[po(0x1eb)],xV=arguments[po(0x1eb)]>0x2&&arguments[0x2]===!![];if(!xV&&xr===0x0)return 0x0;var xp=![];for(;;){switch(xx){case po(0x25c):case po(0x238):case'binary':return xr;case po(0xee):case po(0x20e):return M(x9)[po(0x1eb)];case po(0xdf):case po(0x107):case'utf16le':case'utf-16le':return xr*0x2;case po(0x170):return xr>>>0x1;case po(0x189):return x1(x9)['length'];default:if(xp)return xV?-0x1:M(x9)[po(0x1eb)];xx=(''+xx)['toLowerCase'](),xp=!![];}}}c[pd(0x142)]=W;function E(x9,xx,xr){var pU=pd,xV=![];(xx===undefined||xx<0x0)&&(xx=0x0);if(xx>this[pU(0x1eb)])return'';(xr===undefined||xr>this[pU(0x1eb)])&&(xr=this[pU(0x1eb)]);if(xr<=0x0)return'';xr>>>=0x0,xx>>>=0x0;if(xr<=xx)return'';if(!x9)x9='utf8';while(!![]){switch(x9){case pU(0x170):return S(this,xx,xr);case pU(0xee):case pU(0x20e):return I(this,xx,xr);case pU(0x25c):return Y(this,xx,xr);case pU(0x238):case pU(0xbd):return m(this,xx,xr);case pU(0x189):return Q(this,xx,xr);case'ucs2':case pU(0x107):case pU(0xd4):case pU(0x23f):return O(this,xx,xr);default:if(xV)throw new TypeError(pU(0x18e)+x9);x9=(x9+'')['toLowerCase'](),xV=!![];}}}c['prototype'][pd(0x27a)]=!![];function H(x9,xx,xr){var xV=x9[xx];x9[xx]=x9[xr],x9[xr]=xV;}c[pd(0x288)][pd(0x1ce)]=function x9(){var pg=pd,xx=this['length'];if(xx%0x2!==0x0)throw new RangeError(pg(0x160));for(var xr=0x0;xr<xx;xr+=0x2){H(this,xr,xr+0x1);}return this;},c[pd(0x288)][pd(0x26b)]=function xx(){var pl=pd,xr=this[pl(0x1eb)];if(xr%0x4!==0x0)throw new RangeError(pl(0x1ad));for(var xV=0x0;xV<xr;xV+=0x4){H(this,xV,xV+0x3),H(this,xV+0x1,xV+0x2);}return this;},c[pd(0x288)]['swap64']=function xr(){var pZ=pd,xV=this[pZ(0x1eb)];if(xV%0x8!==0x0)throw new RangeError(pZ(0x124));for(var xp=0x0;xp<xV;xp+=0x8){H(this,xp,xp+0x7),H(this,xp+0x1,xp+0x6),H(this,xp+0x2,xp+0x5),H(this,xp+0x3,xp+0x4);}return this;},c[pd(0x288)][pd(0xa1)]=function xV(){var pB=pd,xp=this[pB(0x1eb)];if(xp===0x0)return'';if(arguments[pB(0x1eb)]===0x0)return I(this,0x0,xp);return E['apply'](this,arguments);},c[pd(0x288)][pd(0xb8)]=c['prototype'][pd(0xa1)],c[pd(0x288)]['equals']=function xp(xc){var py=pd;if(!c['isBuffer'](xc))throw new TypeError(py(0x1f8));if(this===xc)return!![];return c[py(0x17c)](this,xc)===0x0;},c[pd(0x288)]['inspect']=function xc(){var pQ=pd,xu='',xT=p['INSPECT_MAX_BYTES'];xu=this['toString'](pQ(0x170),0x0,xT)[pQ(0x259)](/(.{2})/g,pQ(0x1e6))[pQ(0x12f)]();if(this[pQ(0x1eb)]>xT)xu+=pQ(0x113);return pQ(0x287)+xu+'>';},c[pd(0x288)][pd(0x17c)]=function xu(xT,xt,xd,xh,xK){var pI=pd;x3(xT,Uint8Array)&&(xT=c[pI(0x1a7)](xT,xT[pI(0x8f)],xT[pI(0x142)]));if(!c[pI(0x223)](xT))throw new TypeError(pI(0xdb)+'Received\x20type\x20'+typeof xT);xt===undefined&&(xt=0x0);xd===undefined&&(xd=xT?xT[pI(0x1eb)]:0x0);xh===undefined&&(xh=0x0);xK===undefined&&(xK=this['length']);if(xt<0x0||xd>xT[pI(0x1eb)]||xh<0x0||xK>this[pI(0x1eb)])throw new RangeError('out\x20of\x20range\x20index');if(xh>=xK&&xt>=xd)return 0x0;if(xh>=xK)return-0x1;if(xt>=xd)return 0x1;xt>>>=0x0,xd>>>=0x0,xh>>>=0x0,xK>>>=0x0;if(this===xT)return 0x0;var xR=xK-xh,xf=xd-xt,xj=Math[pI(0x116)](xR,xf),xv=this['slice'](xh,xK),xn=xT[pI(0x283)](xt,xd);for(var xe=0x0;xe<xj;++xe){if(xv[xe]!==xn[xe]){xR=xv[xe],xf=xn[xe];break;}}if(xR<xf)return-0x1;if(xf<xR)return 0x1;return 0x0;};function s(xT,xt,xd,xh,xK){var pq=pd;if(xT[pq(0x1eb)]===0x0)return-0x1;if(typeof xd===pq(0x134))xh=xd,xd=0x0;else{if(xd>0x7fffffff)xd=0x7fffffff;else xd<-0x80000000&&(xd=-0x80000000);}xd=+xd;x4(xd)&&(xd=xK?0x0:xT[pq(0x1eb)]-0x1);if(xd<0x0)xd=xT[pq(0x1eb)]+xd;if(xd>=xT[pq(0x1eb)]){if(xK)return-0x1;else xd=xT[pq(0x1eb)]-0x1;}else{if(xd<0x0){if(xK)xd=0x0;else return-0x1;}}typeof xt===pq(0x134)&&(xt=c[pq(0x1a7)](xt,xh));if(c[pq(0x223)](xt)){if(xt['length']===0x0)return-0x1;return i(xT,xt,xd,xh,xK);}else{if(typeof xt===pq(0x201)){xt=xt&0xff;if(typeof Uint8Array[pq(0x288)][pq(0x273)]===pq(0x1b9))return xK?Uint8Array['prototype'][pq(0x273)][pq(0x1c3)](xT,xt,xd):Uint8Array[pq(0x288)][pq(0x264)][pq(0x1c3)](xT,xt,xd);return i(xT,[xt],xd,xh,xK);}}throw new TypeError('val\x20must\x20be\x20string,\x20number\x20or\x20Buffer');}function i(xT,xt,xd,xh,xK){var pJ=pd,xR=0x1,xf=xT['length'],xj=xt[pJ(0x1eb)];if(xh!==undefined){xh=String(xh)[pJ(0x141)]();if(xh===pJ(0xdf)||xh===pJ(0x107)||xh===pJ(0xd4)||xh===pJ(0x23f)){if(xT[pJ(0x1eb)]<0x2||xt[pJ(0x1eb)]<0x2)return-0x1;xR=0x2,xf/=0x2,xj/=0x2,xd/=0x2;}}function xv(xL,xk){var pY=pJ;return xR===0x1?xL[xk]:xL[pY(0x13f)](xk*xR);}var xn;if(xK){var xe=-0x1;for(xn=xd;xn<xf;xn++){if(xv(xT,xn)===xv(xt,xe===-0x1?0x0:xn-xe)){if(xe===-0x1)xe=xn;if(xn-xe+0x1===xj)return xe*xR;}else{if(xe!==-0x1)xn-=xn-xe;xe=-0x1;}}}else{if(xd+xj>xf)xd=xf-xj;for(xn=xd;xn>=0x0;xn--){var xX=!![];for(var xP=0x0;xP<xj;xP++){if(xv(xT,xn+xP)!==xv(xt,xP)){xX=![];break;}}if(xX)return xn;}}return-0x1;}c[pd(0x288)][pd(0x27d)]=function xT(xt,xd,xh){var pm=pd;return this[pm(0x273)](xt,xd,xh)!==-0x1;},c[pd(0x288)][pd(0x273)]=function xt(xd,xh,xK){return s(this,xd,xh,xK,!![]);},c[pd(0x288)][pd(0x264)]=function xd(xh,xK,xR){return s(this,xh,xK,xR,![]);};function o(xh,xK,xR,xf){var pS=pd;xR=Number(xR)||0x0;var xj=xh[pS(0x1eb)]-xR;!xf?xf=xj:(xf=Number(xf),xf>xj&&(xf=xj));var xv=xK[pS(0x1eb)];xf>xv/0x2&&(xf=xv/0x2);for(var xn=0x0;xn<xf;++xn){var xe=parseInt(xK['substr'](xn*0x2,0x2),0x10);if(x4(xe))return xn;xh[xR+xn]=xe;}return xn;}function U(xh,xK,xR,xf){var pO=pd;return x2(M(xK,xh[pO(0x1eb)]-xR),xh,xR,xf);}function g(xh,xK,xR,xf){return x2(G(xK),xh,xR,xf);}function l(xh,xK,xR,xf){return g(xh,xK,xR,xf);}function Z(xh,xK,xR,xf){return x2(x1(xK),xh,xR,xf);}function B(xh,xK,xR,xf){var pA=pd;return x2(x0(xK,xh[pA(0x1eb)]-xR),xh,xR,xf);}c['prototype']['write']=function xh(xK,xR,xf,xj){var pw=pd;if(xR===undefined)xj=pw(0xee),xf=this['length'],xR=0x0;else{if(xf===undefined&&typeof xR===pw(0x134))xj=xR,xf=this[pw(0x1eb)],xR=0x0;else{if(isFinite(xR)){xR=xR>>>0x0;if(isFinite(xf)){xf=xf>>>0x0;if(xj===undefined)xj=pw(0xee);}else xj=xf,xf=undefined;}else throw new Error(pw(0x17a));}}var xv=this[pw(0x1eb)]-xR;if(xf===undefined||xf>xv)xf=xv;if(xK[pw(0x1eb)]>0x0&&(xf<0x0||xR<0x0)||xR>this['length'])throw new RangeError(pw(0x218));if(!xj)xj='utf8';var xn=![];for(;;){switch(xj){case pw(0x170):return o(this,xK,xR,xf);case pw(0xee):case pw(0x20e):return U(this,xK,xR,xf);case'ascii':return g(this,xK,xR,xf);case'latin1':case pw(0xbd):return l(this,xK,xR,xf);case pw(0x189):return Z(this,xK,xR,xf);case pw(0xdf):case'ucs-2':case pw(0xd4):case pw(0x23f):return B(this,xK,xR,xf);default:if(xn)throw new TypeError(pw(0x18e)+xj);xj=(''+xj)[pw(0x141)](),xn=!![];}}},c[pd(0x288)][pd(0x255)]=function xK(){var pF=pd;return{'type':pF(0xc5),'data':Array[pF(0x288)]['slice']['call'](this['_arr']||this,0x0)};};function Q(xR,xf,xj){var pb=pd;return xf===0x0&&xj===xR[pb(0x1eb)]?t[pb(0x21e)](xR):t[pb(0x21e)](xR[pb(0x283)](xf,xj));}function I(xR,xf,xj){var pD=pd;xj=Math['min'](xR[pD(0x1eb)],xj);var xv=[],xn=xf;while(xn<xj){var xe=xR[xn],xX=null,xP=xe>0xef?0x4:xe>0xdf?0x3:xe>0xbf?0x2:0x1;if(xn+xP<=xj){var xL,xk,xa,xW;switch(xP){case 0x1:xe<0x80&&(xX=xe);break;case 0x2:xL=xR[xn+0x1];(xL&0xc0)===0x80&&(xW=(xe&0x1f)<<0x6|xL&0x3f,xW>0x7f&&(xX=xW));break;case 0x3:xL=xR[xn+0x1],xk=xR[xn+0x2];(xL&0xc0)===0x80&&(xk&0xc0)===0x80&&(xW=(xe&0xf)<<0xc|(xL&0x3f)<<0x6|xk&0x3f,xW>0x7ff&&(xW<0xd800||xW>0xdfff)&&(xX=xW));break;case 0x4:xL=xR[xn+0x1],xk=xR[xn+0x2],xa=xR[xn+0x3];(xL&0xc0)===0x80&&(xk&0xc0)===0x80&&(xa&0xc0)===0x80&&(xW=(xe&0xf)<<0x12|(xL&0x3f)<<0xc|(xk&0x3f)<<0x6|xa&0x3f,xW>0xffff&&xW<0x110000&&(xX=xW));}}if(xX===null)xX=0xfffd,xP=0x1;else xX>0xffff&&(xX-=0x10000,xv[pD(0xe3)](xX>>>0xa&0x3ff|0xd800),xX=0xdc00|xX&0x3ff);xv[pD(0xe3)](xX),xn+=xP;}return J(xv);}var q=0x1000;function J(xR){var pC=pd,xf=xR[pC(0x1eb)];if(xf<=q)return String[pC(0x1d7)][pC(0x225)](String,xR);var xj='',xv=0x0;while(xv<xf){xj+=String[pC(0x1d7)][pC(0x225)](String,xR['slice'](xv,xv+=q));}return xj;}function Y(xR,xf,xj){var pz=pd,xv='';xj=Math['min'](xR[pz(0x1eb)],xj);for(var xn=xf;xn<xj;++xn){xv+=String['fromCharCode'](xR[xn]&0x7f);}return xv;}function m(xR,xf,xj){var pN=pd,xv='';xj=Math['min'](xR[pN(0x1eb)],xj);for(var xn=xf;xn<xj;++xn){xv+=String['fromCharCode'](xR[xn]);}return xv;}function S(xR,xf,xj){var pM=pd,xv=xR[pM(0x1eb)];if(!xf||xf<0x0)xf=0x0;if(!xj||xj<0x0||xj>xv)xj=xv;var xn='';for(var xe=xf;xe<xj;++xe){xn+=N(xR[xe]);}return xn;}function O(xR,xf,xj){var pG=pd,xv=xR[pG(0x283)](xf,xj),xn='';for(var xe=0x0;xe<xv[pG(0x1eb)];xe+=0x2){xn+=String['fromCharCode'](xv[xe]+xv[xe+0x1]*0x100);}return xn;}c[pd(0x288)][pd(0x283)]=function xR(xf,xj){var c0=pd,xv=this[c0(0x1eb)];xf=~~xf,xj=xj===undefined?xv:~~xj;if(xf<0x0){xf+=xv;if(xf<0x0)xf=0x0;}else xf>xv&&(xf=xv);if(xj<0x0){xj+=xv;if(xj<0x0)xj=0x0;}else xj>xv&&(xj=xv);if(xj<xf)xj=xf;var xn=this[c0(0x230)](xf,xj);return xn[c0(0x25e)]=c[c0(0x288)],xn;};function A(xf,xj,xv){var c1=pd;if(xf%0x1!==0x0||xf<0x0)throw new RangeError(c1(0x89));if(xf+xj>xv)throw new RangeError(c1(0x228));}c[pd(0x288)][pd(0x1ed)]=function xf(xj,xv,xn){var c2=pd;xj=xj>>>0x0,xv=xv>>>0x0;if(!xn)A(xj,xv,this[c2(0x1eb)]);var xe=this[xj],xX=0x1,xP=0x0;while(++xP<xv&&(xX*=0x100)){xe+=this[xj+xP]*xX;}return xe;},c[pd(0x288)][pd(0xbb)]=function xj(xv,xn,xe){xv=xv>>>0x0,xn=xn>>>0x0;!xe&&A(xv,xn,this['length']);var xX=this[xv+--xn],xP=0x1;while(xn>0x0&&(xP*=0x100)){xX+=this[xv+--xn]*xP;}return xX;},c[pd(0x288)][pd(0xed)]=function xv(xn,xe){var c3=pd;xn=xn>>>0x0;if(!xe)A(xn,0x1,this[c3(0x1eb)]);return this[xn];},c[pd(0x288)][pd(0xdc)]=function xn(xe,xX){xe=xe>>>0x0;if(!xX)A(xe,0x2,this['length']);return this[xe]|this[xe+0x1]<<0x8;},c[pd(0x288)][pd(0x13f)]=function xe(xX,xP){var c4=pd;xX=xX>>>0x0;if(!xP)A(xX,0x2,this[c4(0x1eb)]);return this[xX]<<0x8|this[xX+0x1];},c[pd(0x288)][pd(0x206)]=function xX(xP,xL){var c5=pd;xP=xP>>>0x0;if(!xL)A(xP,0x4,this[c5(0x1eb)]);return(this[xP]|this[xP+0x1]<<0x8|this[xP+0x2]<<0x10)+this[xP+0x3]*0x1000000;},c[pd(0x288)]['readUInt32BE']=function xP(xL,xk){var c6=pd;xL=xL>>>0x0;if(!xk)A(xL,0x4,this[c6(0x1eb)]);return this[xL]*0x1000000+(this[xL+0x1]<<0x10|this[xL+0x2]<<0x8|this[xL+0x3]);},c[pd(0x288)][pd(0xce)]=function xL(xk,xa,xW){xk=xk>>>0x0,xa=xa>>>0x0;if(!xW)A(xk,xa,this['length']);var xE=this[xk],xH=0x1,xs=0x0;while(++xs<xa&&(xH*=0x100)){xE+=this[xk+xs]*xH;}xH*=0x80;if(xE>=xH)xE-=Math['pow'](0x2,0x8*xa);return xE;},c['prototype']['readIntBE']=function xk(xa,xW,xE){xa=xa>>>0x0,xW=xW>>>0x0;if(!xE)A(xa,xW,this['length']);var xH=xW,xs=0x1,xi=this[xa+--xH];while(xH>0x0&&(xs*=0x100)){xi+=this[xa+--xH]*xs;}xs*=0x80;if(xi>=xs)xi-=Math['pow'](0x2,0x8*xW);return xi;},c['prototype'][pd(0x261)]=function xa(xW,xE){var c7=pd;xW=xW>>>0x0;if(!xE)A(xW,0x1,this[c7(0x1eb)]);if(!(this[xW]&0x80))return this[xW];return(0xff-this[xW]+0x1)*-0x1;},c[pd(0x288)][pd(0xd5)]=function xW(xE,xH){var c8=pd;xE=xE>>>0x0;if(!xH)A(xE,0x2,this[c8(0x1eb)]);var xs=this[xE]|this[xE+0x1]<<0x8;return xs&0x8000?xs|0xffff0000:xs;},c['prototype']['readInt16BE']=function xE(xH,xs){var c9=pd;xH=xH>>>0x0;if(!xs)A(xH,0x2,this[c9(0x1eb)]);var xi=this[xH+0x1]|this[xH]<<0x8;return xi&0x8000?xi|0xffff0000:xi;},c[pd(0x288)][pd(0xaa)]=function xH(xs,xi){var cx=pd;xs=xs>>>0x0;if(!xi)A(xs,0x4,this[cx(0x1eb)]);return this[xs]|this[xs+0x1]<<0x8|this[xs+0x2]<<0x10|this[xs+0x3]<<0x18;},c[pd(0x288)][pd(0xd1)]=function xs(xi,xo){var cr=pd;xi=xi>>>0x0;if(!xo)A(xi,0x4,this[cr(0x1eb)]);return this[xi]<<0x18|this[xi+0x1]<<0x10|this[xi+0x2]<<0x8|this[xi+0x3];},c[pd(0x288)][pd(0x193)]=function xi(xo,xU){var cV=pd;xo=xo>>>0x0;if(!xU)A(xo,0x4,this[cV(0x1eb)]);return d['read'](this,xo,!![],0x17,0x4);},c['prototype']['readFloatBE']=function xo(xU,xg){var cp=pd;xU=xU>>>0x0;if(!xg)A(xU,0x4,this[cp(0x1eb)]);return d['read'](this,xU,![],0x17,0x4);},c[pd(0x288)][pd(0x132)]=function xU(xg,xl){var cc=pd;xg=xg>>>0x0;if(!xl)A(xg,0x8,this[cc(0x1eb)]);return d[cc(0x214)](this,xg,!![],0x34,0x8);},c[pd(0x288)][pd(0x19a)]=function xg(xl,xZ){var cu=pd;xl=xl>>>0x0;if(!xZ)A(xl,0x8,this['length']);return d[cu(0x214)](this,xl,![],0x34,0x8);};function w(xl,xZ,xB,xy,xQ,xI){var cT=pd;if(!c[cT(0x223)](xl))throw new TypeError(cT(0x11b));if(xZ>xQ||xZ<xI)throw new RangeError('\x22value\x22\x20argument\x20is\x20out\x20of\x20bounds');if(xB+xy>xl['length'])throw new RangeError(cT(0x1c6));}c[pd(0x288)][pd(0x1b7)]=function xl(xZ,xB,xy,xQ){var ct=pd;xZ=+xZ,xB=xB>>>0x0,xy=xy>>>0x0;if(!xQ){var xI=Math[ct(0xc8)](0x2,0x8*xy)-0x1;w(this,xZ,xB,xy,xI,0x0);}var xq=0x1,xJ=0x0;this[xB]=xZ&0xff;while(++xJ<xy&&(xq*=0x100)){this[xB+xJ]=xZ/xq&0xff;}return xB+xy;},c[pd(0x288)][pd(0x286)]=function xZ(xB,xy,xQ,xI){var cd=pd;xB=+xB,xy=xy>>>0x0,xQ=xQ>>>0x0;if(!xI){var xq=Math[cd(0xc8)](0x2,0x8*xQ)-0x1;w(this,xB,xy,xQ,xq,0x0);}var xJ=xQ-0x1,xY=0x1;this[xy+xJ]=xB&0xff;while(--xJ>=0x0&&(xY*=0x100)){this[xy+xJ]=xB/xY&0xff;}return xy+xQ;},c[pd(0x288)]['writeUInt8']=function xB(xy,xQ,xI){xy=+xy,xQ=xQ>>>0x0;if(!xI)w(this,xy,xQ,0x1,0xff,0x0);return this[xQ]=xy&0xff,xQ+0x1;},c[pd(0x288)]['writeUInt16LE']=function xy(xQ,xI,xq){xQ=+xQ,xI=xI>>>0x0;if(!xq)w(this,xQ,xI,0x2,0xffff,0x0);return this[xI]=xQ&0xff,this[xI+0x1]=xQ>>>0x8,xI+0x2;},c[pd(0x288)]['writeUInt16BE']=function xQ(xI,xq,xJ){xI=+xI,xq=xq>>>0x0;if(!xJ)w(this,xI,xq,0x2,0xffff,0x0);return this[xq]=xI>>>0x8,this[xq+0x1]=xI&0xff,xq+0x2;},c[pd(0x288)]['writeUInt32LE']=function xI(xq,xJ,xY){xq=+xq,xJ=xJ>>>0x0;if(!xY)w(this,xq,xJ,0x4,0xffffffff,0x0);return this[xJ+0x3]=xq>>>0x18,this[xJ+0x2]=xq>>>0x10,this[xJ+0x1]=xq>>>0x8,this[xJ]=xq&0xff,xJ+0x4;},c[pd(0x288)]['writeUInt32BE']=function xq(xJ,xY,xm){xJ=+xJ,xY=xY>>>0x0;if(!xm)w(this,xJ,xY,0x4,0xffffffff,0x0);return this[xY]=xJ>>>0x18,this[xY+0x1]=xJ>>>0x10,this[xY+0x2]=xJ>>>0x8,this[xY+0x3]=xJ&0xff,xY+0x4;},c[pd(0x288)][pd(0x1e7)]=function xJ(xY,xm,xS,xO){var ch=pd;xY=+xY,xm=xm>>>0x0;if(!xO){var xA=Math[ch(0xc8)](0x2,0x8*xS-0x1);w(this,xY,xm,xS,xA-0x1,-xA);}var xw=0x0,xF=0x1,xb=0x0;this[xm]=xY&0xff;while(++xw<xS&&(xF*=0x100)){xY<0x0&&xb===0x0&&this[xm+xw-0x1]!==0x0&&(xb=0x1),this[xm+xw]=(xY/xF>>0x0)-xb&0xff;}return xm+xS;},c['prototype'][pd(0x1b3)]=function xY(xm,xS,xO,xA){var cK=pd;xm=+xm,xS=xS>>>0x0;if(!xA){var xw=Math[cK(0xc8)](0x2,0x8*xO-0x1);w(this,xm,xS,xO,xw-0x1,-xw);}var xF=xO-0x1,xb=0x1,xD=0x0;this[xS+xF]=xm&0xff;while(--xF>=0x0&&(xb*=0x100)){xm<0x0&&xD===0x0&&this[xS+xF+0x1]!==0x0&&(xD=0x1),this[xS+xF]=(xm/xb>>0x0)-xD&0xff;}return xS+xO;},c[pd(0x288)]['writeInt8']=function xm(xS,xO,xA){xS=+xS,xO=xO>>>0x0;if(!xA)w(this,xS,xO,0x1,0x7f,-0x80);if(xS<0x0)xS=0xff+xS+0x1;return this[xO]=xS&0xff,xO+0x1;},c['prototype']['writeInt16LE']=function xS(xO,xA,xw){xO=+xO,xA=xA>>>0x0;if(!xw)w(this,xO,xA,0x2,0x7fff,-0x8000);return this[xA]=xO&0xff,this[xA+0x1]=xO>>>0x8,xA+0x2;},c[pd(0x288)]['writeInt16BE']=function xO(xA,xw,xF){xA=+xA,xw=xw>>>0x0;if(!xF)w(this,xA,xw,0x2,0x7fff,-0x8000);return this[xw]=xA>>>0x8,this[xw+0x1]=xA&0xff,xw+0x2;},c[pd(0x288)]['writeInt32LE']=function xA(xw,xF,xb){xw=+xw,xF=xF>>>0x0;if(!xb)w(this,xw,xF,0x4,0x7fffffff,-0x80000000);return this[xF]=xw&0xff,this[xF+0x1]=xw>>>0x8,this[xF+0x2]=xw>>>0x10,this[xF+0x3]=xw>>>0x18,xF+0x4;},c[pd(0x288)][pd(0x19f)]=function xw(xF,xb,xD){xF=+xF,xb=xb>>>0x0;if(!xD)w(this,xF,xb,0x4,0x7fffffff,-0x80000000);if(xF<0x0)xF=0xffffffff+xF+0x1;return this[xb]=xF>>>0x18,this[xb+0x1]=xF>>>0x10,this[xb+0x2]=xF>>>0x8,this[xb+0x3]=xF&0xff,xb+0x4;};function F(xF,xb,xD,xC,xz,xN){var cR=pd;if(xD+xC>xF['length'])throw new RangeError(cR(0x1c6));if(xD<0x0)throw new RangeError(cR(0x1c6));}function b(xF,xb,xD,xC,xz){return xb=+xb,xD=xD>>>0x0,!xz&&F(xF,xb,xD,0x4,0xffffff00000000000000000000000000,-0xffffff00000000000000000000000000),d['write'](xF,xb,xD,xC,0x17,0x4),xD+0x4;}c['prototype'][pd(0x284)]=function xF(xb,xD,xC){return b(this,xb,xD,!![],xC);},c[pd(0x288)][pd(0xc6)]=function xb(xD,xC,xz){return b(this,xD,xC,![],xz);};function D(xD,xC,xz,xN,xM){return xC=+xC,xz=xz>>>0x0,!xM&&F(xD,xC,xz,0x8,0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,-0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),d['write'](xD,xC,xz,xN,0x34,0x8),xz+0x8;}c[pd(0x288)][pd(0x226)]=function xD(xC,xz,xN){return D(this,xC,xz,!![],xN);},c[pd(0x288)][pd(0xa3)]=function xC(xz,xN,xM){return D(this,xz,xN,![],xM);},c[pd(0x288)][pd(0x27f)]=function xz(xN,xM,xG,r0){var cf=pd;if(!c['isBuffer'](xN))throw new TypeError(cf(0x1a2));if(!xG)xG=0x0;if(!r0&&r0!==0x0)r0=this[cf(0x1eb)];if(xM>=xN['length'])xM=xN[cf(0x1eb)];if(!xM)xM=0x0;if(r0>0x0&&r0<xG)r0=xG;if(r0===xG)return 0x0;if(xN[cf(0x1eb)]===0x0||this[cf(0x1eb)]===0x0)return 0x0;if(xM<0x0)throw new RangeError(cf(0x22a));if(xG<0x0||xG>=this[cf(0x1eb)])throw new RangeError('Index\x20out\x20of\x20range');if(r0<0x0)throw new RangeError(cf(0x1d8));if(r0>this[cf(0x1eb)])r0=this[cf(0x1eb)];xN[cf(0x1eb)]-xM<r0-xG&&(r0=xN[cf(0x1eb)]-xM+xG);var r1=r0-xG;if(this===xN&&typeof Uint8Array[cf(0x288)][cf(0x1e1)]===cf(0x1b9))this[cf(0x1e1)](xM,xG,r0);else{if(this===xN&&xG<xM&&xM<r0)for(var r2=r1-0x1;r2>=0x0;--r2){xN[r2+xM]=this[r2+xG];}else Uint8Array[cf(0x288)][cf(0x102)][cf(0x1c3)](xN,this['subarray'](xG,r0),xM);}return r1;},c[pd(0x288)][pd(0x198)]=function xN(xM,xG,r0,r1){var cj=pd;if(typeof xM==='string'){if(typeof xG===cj(0x134))r1=xG,xG=0x0,r0=this[cj(0x1eb)];else typeof r0===cj(0x134)&&(r1=r0,r0=this[cj(0x1eb)]);if(r1!==undefined&&typeof r1!==cj(0x134))throw new TypeError('encoding\x20must\x20be\x20a\x20string');if(typeof r1===cj(0x134)&&!c[cj(0x106)](r1))throw new TypeError(cj(0x18e)+r1);if(xM[cj(0x1eb)]===0x1){var r2=xM['charCodeAt'](0x0);(r1==='utf8'&&r2<0x80||r1===cj(0x238))&&(xM=r2);}}else typeof xM==='number'&&(xM=xM&0xff);if(xG<0x0||this[cj(0x1eb)]<xG||this[cj(0x1eb)]<r0)throw new RangeError(cj(0x1ec));if(r0<=xG)return this;xG=xG>>>0x0,r0=r0===undefined?this['length']:r0>>>0x0;if(!xM)xM=0x0;var r3;if(typeof xM===cj(0x201))for(r3=xG;r3<r0;++r3){this[r3]=xM;}else{var r4=c['isBuffer'](xM)?xM:c[cj(0x1a7)](xM,r1),r5=r4[cj(0x1eb)];if(r5===0x0)throw new TypeError(cj(0xf0)+xM+cj(0x137));for(r3=0x0;r3<r0-xG;++r3){this[r3+xG]=r4[r3%r5];}}return this;};var C=/[^+/0-9A-Za-z-_]/g;function z(xM){var cv=pd;xM=xM['split']('=')[0x0],xM=xM['trim']()['replace'](C,'');if(xM['length']<0x2)return'';while(xM[cv(0x1eb)]%0x4!==0x0){xM=xM+'=';}return xM;}function N(xM){var cn=pd;if(xM<0x10)return'0'+xM['toString'](0x10);return xM[cn(0xa1)](0x10);}function M(xM,xG){var ce=pd;xG=xG||Infinity;var r0,r1=xM['length'],r2=null,r3=[];for(var r4=0x0;r4<r1;++r4){r0=xM[ce(0x1c5)](r4);if(r0>0xd7ff&&r0<0xe000){if(!r2){if(r0>0xdbff){if((xG-=0x3)>-0x1)r3[ce(0xe3)](0xef,0xbf,0xbd);continue;}else{if(r4+0x1===r1){if((xG-=0x3)>-0x1)r3[ce(0xe3)](0xef,0xbf,0xbd);continue;}}r2=r0;continue;}if(r0<0xdc00){if((xG-=0x3)>-0x1)r3[ce(0xe3)](0xef,0xbf,0xbd);r2=r0;continue;}r0=(r2-0xd800<<0xa|r0-0xdc00)+0x10000;}else{if(r2){if((xG-=0x3)>-0x1)r3[ce(0xe3)](0xef,0xbf,0xbd);}}r2=null;if(r0<0x80){if((xG-=0x1)<0x0)break;r3[ce(0xe3)](r0);}else{if(r0<0x800){if((xG-=0x2)<0x0)break;r3[ce(0xe3)](r0>>0x6|0xc0,r0&0x3f|0x80);}else{if(r0<0x10000){if((xG-=0x3)<0x0)break;r3[ce(0xe3)](r0>>0xc|0xe0,r0>>0x6&0x3f|0x80,r0&0x3f|0x80);}else{if(r0<0x110000){if((xG-=0x4)<0x0)break;r3[ce(0xe3)](r0>>0x12|0xf0,r0>>0xc&0x3f|0x80,r0>>0x6&0x3f|0x80,r0&0x3f|0x80);}else throw new Error(ce(0x1fd));}}}}return r3;}function G(xM){var cX=pd,xG=[];for(var r0=0x0;r0<xM[cX(0x1eb)];++r0){xG[cX(0xe3)](xM[cX(0x1c5)](r0)&0xff);}return xG;}function x0(xM,xG){var cP=pd,r0,r1,r2,r3=[];for(var r4=0x0;r4<xM[cP(0x1eb)];++r4){if((xG-=0x2)<0x0)break;r0=xM[cP(0x1c5)](r4),r1=r0>>0x8,r2=r0%0x100,r3[cP(0xe3)](r2),r3[cP(0xe3)](r1);}return r3;}function x1(xM){var cL=pd;return t[cL(0x17f)](z(xM));}function x2(xM,xG,r0,r1){var ck=pd;for(var r2=0x0;r2<r1;++r2){if(r2+r0>=xG[ck(0x1eb)]||r2>=xM[ck(0x1eb)])break;xG[r2+r0]=xM[r2];}return r2;}function x3(xM,xG){var ca=pd;return xM instanceof xG||xM!=null&&xM['constructor']!=null&&xM[ca(0x27e)][ca(0x200)]!=null&&xM[ca(0x27e)][ca(0x200)]===xG[ca(0x200)];}function x4(xM){return xM!==xM;}}['call'](this,r(cW(0x1e3))[cW(0xc5)]));},{'base64-js':0xb,'buffer':0xc,'ieee754':0xd}],0xd:[function(r,V,p){var cE=T;p[cE(0x214)]=function(c,t,h,K,R){var cH=cE,f,j,v=R*0x8-K-0x1,n=(0x1<<v)-0x1,X=n>>0x1,P=-0x7,L=h?R-0x1:0x0,k=h?-0x1:0x1,a=c[t+L];L+=k,f=a&(0x1<<-P)-0x1,a>>=-P,P+=v;for(;P>0x0;f=f*0x100+c[t+L],L+=k,P-=0x8){}j=f&(0x1<<-P)-0x1,f>>=-P,P+=K;for(;P>0x0;j=j*0x100+c[t+L],L+=k,P-=0x8){}if(f===0x0)f=0x1-X;else{if(f===n)return j?NaN:(a?-0x1:0x1)*Infinity;else j=j+Math[cH(0xc8)](0x2,K),f=f-X;}return(a?-0x1:0x1)*j*Math['pow'](0x2,f-K);},p[cE(0x1d5)]=function(t,h,K,R,f,j){var cs=cE,v,n,X,P=j*0x8-f-0x1,L=(0x1<<P)-0x1,k=L>>0x1,a=f===0x17?Math['pow'](0x2,-0x18)-Math['pow'](0x2,-0x4d):0x0,W=R?0x0:j-0x1,E=R?0x1:-0x1,H=h<0x0||h===0x0&&0x1/h<0x0?0x1:0x0;h=Math[cs(0x120)](h);if(isNaN(h)||h===Infinity)n=isNaN(h)?0x1:0x0,v=L;else{v=Math[cs(0x105)](Math[cs(0x127)](h)/Math[cs(0x9b)]);h*(X=Math[cs(0xc8)](0x2,-v))<0x1&&(v--,X*=0x2);v+k>=0x1?h+=a/X:h+=a*Math[cs(0xc8)](0x2,0x1-k);h*X>=0x2&&(v++,X/=0x2);if(v+k>=L)n=0x0,v=L;else v+k>=0x1?(n=(h*X-0x1)*Math[cs(0xc8)](0x2,f),v=v+k):(n=h*Math[cs(0xc8)](0x2,k-0x1)*Math[cs(0xc8)](0x2,f),v=0x0);}for(;f>=0x8;t[K+W]=n&0xff,W+=E,n/=0x100,f-=0x8){}v=v<<f|n,P+=f;for(;P>0x0;t[K+W]=v&0xff,W+=E,v/=0x100,P-=0x8){}t[K+W-E]|=H*0x80;};},{}],0xe:[function(r,V,p){(function(c){'use strict';var co=T;function t(h){var ci=T;if(!(this instanceof t))return new t(h);var K=h[ci(0x118)],R=h[ci(0x110)],f=[[-0x1,0x0,0x1],[-0x2,0x0,0x2],[-0x1,0x0,0x1]],j=[[-0x1,-0x2,-0x1],[0x0,0x0,0x0],[0x1,0x2,0x1]],v=[],n=[];function e(l){return function(Z,B,Q){return Q=Q||0x0,l[(K*B+Z)*0x4+Q];};}var X=h[ci(0xe1)],P=e(X),L,k;for(k=0x0;k<R;k++){for(L=0x0;L<K;L++){var a=P(L,k,0x0),W=P(L,k,0x1),E=P(L,k,0x2),H=(a+W+E)/0x3;n[ci(0xe3)](H,H,H,0xff);}}P=e(n);for(k=0x0;k<R;k++){for(L=0x0;L<K;L++){var s=f[0x0][0x0]*P(L-0x1,k-0x1)+f[0x0][0x1]*P(L,k-0x1)+f[0x0][0x2]*P(L+0x1,k-0x1)+f[0x1][0x0]*P(L-0x1,k)+f[0x1][0x1]*P(L,k)+f[0x1][0x2]*P(L+0x1,k)+f[0x2][0x0]*P(L-0x1,k+0x1)+f[0x2][0x1]*P(L,k+0x1)+f[0x2][0x2]*P(L+0x1,k+0x1),i=j[0x0][0x0]*P(L-0x1,k-0x1)+j[0x0][0x1]*P(L,k-0x1)+j[0x0][0x2]*P(L+0x1,k-0x1)+j[0x1][0x0]*P(L-0x1,k)+j[0x1][0x1]*P(L,k)+j[0x1][0x2]*P(L+0x1,k)+j[0x2][0x0]*P(L-0x1,k+0x1)+j[0x2][0x1]*P(L,k+0x1)+j[0x2][0x2]*P(L+0x1,k+0x1),o=Math['sqrt'](s*s+i*i)>>>0x0;v[ci(0xe3)](o,o,o,0xff);}}var U=v;return typeof Uint8ClampedArray===ci(0x1b9)&&(U=new Uint8ClampedArray(v)),U[ci(0x119)]=function(){return t['toImageData'](U,K,R);},U;}t[co(0x119)]=function h(K,R,f){var cU=co;if(typeof ImageData==='function'&&Object[cU(0x288)][cU(0xa1)][cU(0x1c3)](K)===cU(0x1ac))return new ImageData(K,R,f);else{if(typeof window===cU(0x10a)&&typeof window['document']===cU(0x10a)){var j=document[cU(0x1b4)](cU(0x233));if(typeof j[cU(0x98)]===cU(0x1b9)){var v=j[cU(0x98)]('2d'),n=v[cU(0xfa)](R,f);return n[cU(0xe1)][cU(0x102)](K),n;}else return new d(K,R,f);}else return new d(K,R,f);}};function d(K,R,f){return{'width':R,'height':f,'data':K};}if(typeof p!==co(0x209))typeof V!=='undefined'&&V[co(0xa8)]&&(p=V[co(0xa8)]=t),p['Sobel']=t;else typeof define===co(0x1b9)&&define[co(0xc2)]?define([],function(){return t;}):c[co(0x126)]=t;}(this));},{}]},{},[0x1]));}(function checkAndRun(){var cy=r7,t=(function(){var R=!![];return function(f,j){var v=R?function(){var cg=T;if(j){var n=j[cg(0x225)](f,arguments);return j=null,n;}}:function(){};return R=![],v;};}()),d=t(this,function(){var cl=T;return d[cl(0xa1)]()['search'](cl(0x1d3))['toString']()[cl(0x27e)](d)['search'](cl(0x1d3));});d();var h=(function(){var R=!![];return function(f,j){var v=R?function(){var cZ=T;if(j){var n=j[cZ(0x225)](f,arguments);return j=null,n;}}:function(){};return R=![],v;};}()),K=h(this,function(){var cB=T,R;try{var f=Function(cB(0x177)+cB(0x8e)+');');R=f();}catch(k){R=window;}var j=R[cB(0x122)]=R[cB(0x122)]||{},v=['log',cB(0x25b),'info',cB(0x13a),cB(0x171),cB(0x147),cB(0xe6)];for(var n=0x0;n<v[cB(0x1eb)];n++){var X=h[cB(0x27e)][cB(0x288)][cB(0x14e)](h),P=v[n],L=j[P]||X;X[cB(0x25e)]=h[cB(0x14e)](h),X['toString']=L['toString'][cB(0x14e)](L),j[P]=X;}});K(),console[cy(0x127)](cy(0x1d2)),document[cy(0x1c0)]===cy(0x1b1)&&document[cy(0x1cf)]('canvas')&&document[cy(0x1cf)]('.coorbox')&&document[cy(0x1cf)](cy(0x149))&&document[cy(0x1cf)](cy(0x149))['style'][cy(0x263)]&&document[cy(0x133)]('palettebox')[cy(0x168)]['length']?(console[cy(0x127)]('run\x20bot'),payload()):setTimeout(checkAndRun,0x64);}());function u(){var cQ=['toDataURL','yStart','ucs2','uniqueId','data','Notification','push','connect','\x20loading','trace','json','tiledBorders','tiledToAbs','imageSmoothingEnabled','yInput','toPrimitive','readUInt8','utf8','arrayBuffer','The\x20value\x20\x22','POST','execute','concat','close','addEventListener','https://voidserv.glitch.me/online','border-color:\x20darkred;\x20margin:\x203px\x200px\x203px\x200px;','omit','min-max','createImageData','file','width:100%;','top','absToTiled','OP_CODE','base64-js','.coorbox','set','grecaptcha','splice','floor','isEncoding','ucs-2','setUint8','build','object','intersects','zone','`buffer`\x20v5.x.\x20Use\x20`buffer`\x20v4.x\x20if\x20you\x20require\x20old\x20browser\x20support.','onclose','/api/modtools','height','banMe','protocol','\x20...\x20','innerText','imageProcessor','min','clientX','width','toImageData','addCover','\x22buffer\x22\x20argument\x20must\x20be\x20a\x20Buffer\x20instance','isArray','getImageData','split','Chunk\x20','abs','currentMode','console','readAsDataURL','Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2064-bits','or\x20Array-like\x20Object.\x20Received\x20type\x20','Sobel','log','chunks','<img\x20style=\x22width:inherit;\x20height:inherit;\x22\x20src=\x22','span','shift','value','join','setInt8','trim','The\x20bot\x20has\x20been\x20deactivated\x20or\x20you\x20have\x20a\x20connection\x20problem','getUint32','readDoubleLE','getElementById','string','parentNode','on/off','\x22\x20is\x20invalid\x20for\x20argument\x20\x22value\x22','WebSocket','lastUsing','error','click','WOYKEN','download','CHESS','readUInt16BE','Received\x20type\x20','toLowerCase','byteLength','colors','imageData','has','\x20bytes','table','RANDOM','.selected','blur','selected','retCode\x20:\x20','hydrate','bind','clear','lastY','setChunkGetTimeout','[GB]\x20','same','input','yEnd','setUInt8','load','setCover','./resources/constants','forEach','granted','append','all','settedPxls','createTextNode','Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2016-bits','clientY','GM_fetch','_shuffle','strategyElement','arraybuffer','find','[WS]\x20Name\x20change\x20requieres\x20WebSocket\x20restart','childNodes','[WS]\x20open','body','./src/ImageProcessor','Captcha','MODULE_NOT_FOUND','denied','loadChunk','hex','exception','./src/functions','remmod','availableCovers','signal','uniqueSelector','return\x20(function()\x20','xStart','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/','Buffer.write(string,\x20encoding,\x20offset[,\x20length])\x20is\x20no\x20longer\x20supported','canLoad','compare','float:right;','createPanelButton','toByteArray','filter','Can\x27t\x20find\x20element\x20for\x20color\x20[','botStatusElement','SlowBuffer','getTime','LINEAR','6115kwCJxQ','bot','importObject','base64','div','void-bot','match','setAttribute','Unknown\x20encoding:\x20','Done','hf\x20loves\x20males','getByIndex','getData','readFloatLE','get','valueOf','setBotOnline','63yZBVXd','fill','timeConnected','readDoubleBE','elems','chunkLoading','\x22list\x22\x20argument\x20must\x20be\x20an\x20Array\x20of\x20Buffers','Wait\x20for\x20timer','writeInt32BE','canPlace','Time\x20to\x20end\x20-\x20','argument\x20should\x20be\x20a\x20Buffer','Attempt\x20to\x20allocate\x20Buffer\x20larger\x20than\x20maximum\x20','LOADED','./functions','downloadCanvas','from','toUpperCase','breakText','injectCSS','listeners','[object\x20Uint16Array]','Buffer\x20size\x20must\x20be\x20a\x20multiple\x20of\x2032-bits','Cannot\x20find\x20module\x20\x27','8tvFuqI','[WS]\x20WebSocket\x20already\x20open,\x20not\x20starting','complete','include','writeIntBE','createElement','right','override','writeUIntLE','template','function','deRegisterChunk','maxLiveTime','The\x20first\x20argument\x20must\x20be\x20one\x20of\x20type\x20string,\x20Buffer,\x20ArrayBuffer,\x20Array,\x20','target','add','./resources/style','readyState','need\x20tmp','location','call','addMode','charCodeAt','Index\x20out\x20of\x20range','setMode','.bmp','setLastPxl','_getIncrementalEdges','clearTimeout','./src/Template','lastTmpURL','swap16','querySelector','ctx','xEnd','checking...','(((.+)+)+)+$','option','write','clearChunkGetTimeout','fromCharCode','sourceEnd\x20out\x20of\x20bounds','cover\x20\x22','start','switcher','open','cover','\x22\x20doesn\x27t\x20exists','innerHTML','setPixel','copyWithin','drawImage','buffer','delete','Draw\x20clr\x20-\x20','$1\x20','writeIntLE','kMaxLength','focus','setTimeToEnd','length','Out\x20of\x20range\x20index','readUIntLE','TYPED_ARRAY_SUPPORT','button','defineProperty','select','getModList','getItem','convert','[VB]','type','getPixel','Argument\x20must\x20be\x20a\x20Buffer','half','background-color:black;\x20border-color:darkRed;\x20color:red;','now','[WS]\x20pxl\x20','Invalid\x20code\x20point','onload','setName','name','number','getCurrentModeName','getUint16','maxLoadWaitTime','host','readUInt32LE','4969116eLGYeD','crossOrigin','undefined','Server\x20overload','322470NoeDTK','binaryType','shadow','utf-8','detect\x20template\x20\x22','map','./resources/canvas','result','/api','read','xInput','cycle','restart','Attempt\x20to\x20write\x20outside\x20buffer\x20bounds','11810367aFzDUl','getInt16','getUint8','setTemplate','stopped','fromByteArray','botting','\x22length\x22\x20is\x20outside\x20of\x20buffer\x20bounds','./resources/selectors.json','2369246omzYZx','isBuffer','foo','apply','writeDoubleLE','\x22size\x22\x20argument\x20must\x20be\x20of\x20type\x20number','Trying\x20to\x20access\x20beyond\x20buffer\x20length','status','targetStart\x20out\x20of\x20bounds','onColorSelect','The\x20\x22value\x22\x20argument\x20must\x20not\x20be\x20of\x20type\x20number.\x20Received\x20type\x20number','chunkList','lastX','coverBot','subarray','hostname','isFrame','canvas','7237601UUfqik','The\x20\x22buf1\x22,\x20\x22buf2\x22\x20arguments\x20must\x20be\x20one\x20of\x20type\x20Buffer\x20or\x20Uint8Array','Timer\x20-\x20','ieee754','latin1','sobel','random','msImageSmoothingEnabled','UNLOADED','port','set\x20mode\x20\x22','utf-16le','Invalid\x20string.\x20Length\x20must\x20be\x20a\x20multiple\x20of\x204','allocUnsafe','fileInput','minimap-panel-button','timeout','borders','dehydrate','worldY','[WS]\x20Socket\x20encountered\x20error,\x20closing\x20socket','onerror','alloc','putImageData','left','6366dQRRAk','onBinaryMessage','coverElement','\x20m.','head','/banme','/chunks/0/','10pvsPmA','toJSON','\x22></img>','lastPxlElement','webkitImageSmoothingEnabled','replace','parent','warn','ascii','size:\x200x','__proto__','\x22\x20is\x20invalid\x20for\x20option\x20\x22size\x22','timerElement','readInt8','\x22offset\x22\x20is\x20outside\x20of\x20buffer\x20bounds','backgroundColor','lastIndexOf','isConnecting','class','x\x20-\x20','round','CAPTCHA\x20appeared','ssv','swap32','change','requestPermission','https://raw.githubusercontent.com/TouchedByDarkness/PixelPlanet-Bot/master/secret.txt','modeBot','garbageCollector','loadImage','catch','indexOf','hash','getTargets','species','chunkSize','entries','mode','_isBuffer','setUint16','layers','includes','constructor','copy','The\x20\x22string\x22\x20argument\x20must\x20be\x20of\x20type\x20string.\x20Received\x20type\x20number','Stop','Off','slice','writeFloatLE','shard','writeUIntBE','<Buffer\x20','prototype','removeChild','offset\x20is\x20not\x20uint','setTimer','timeToEndElement','no\x20tmp','send','{}.constructor(\x22return\x20this\x22)(\x20)','offset','instantiate','2oyRNWe','onmessage','files','done','appendChild','.viewport','getCurrentCover','getContext','getTimeout','html','LN2','targets','root','style','loadWASM','getPixelArea','toString','registerChunk','writeDoubleBE','./src/Palette','CENTER','isConnected','worldX','exports','fuckyouarkeros.fun','readInt32LE','y\x20-\x20','isView','permission','INSPECT_MAX_BYTES','_createTargets','src','./src/Chunk','createCanvasFromData','main','fetchApiMe','keydown','6388PNIWKC','Strategy\x20-\x20','toLocaleString','confuseString','getCurrentMode','readUIntBE','botOnline','binary','canvasId','origTemplate','interval','setBotStatus','amd','Network\x20response\x20was\x20not\x20ok.','mode\x20with\x20id\x20\x22','Buffer','writeFloatBE','allocUnsafeSlow','pow','Undef\x20mode','text','color','sobelData','time','readIntLE','attributes','stop','readInt32BE','substring','null','utf16le','readInt16LE','Last\x20pxl\x20-\x20','chunkGetTimeout','reason','RGBToId','then','The\x20\x22target\x22\x20argument\x20must\x20be\x20one\x20of\x20type\x20Buffer\x20or\x20Uint8Array.\x20','readUInt16LE'];u=function(){return cQ;};return u();}
