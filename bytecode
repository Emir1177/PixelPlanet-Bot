const fetch = self.GM_fetch;
const WebSocket = self.WebSocket;

function payload() {
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (Buffer){
//MONITORING FOCUS
let userFocused = true;
window.addEventListener('focus', () => userFocused = true);
window.addEventListener('blur' , () => userFocused = false);
//>--------------------

let lastPxl = [];
let oldPixel = [];

// CONSTANTS
const {
	COLORS,
	CHUNK_SIZE
} = require('./resources/canvas');

const {
	MAX_REQUESTS_PER_HOUR,
	PXL_CB,
	MAX_TIME_STACK,
} = require('./resources/constants');

// FUNCTIONS
const {
	sq,
	factory,
	rand,
	// fetchApiMe,
	// getModList,
	// submitRemMod,
	// banMe,
	uniqueSelector,
	confuseString
} = require('./src/functions');

// SELECTORS
const SELECTORS = require('./resources/selectors.json');
SELECTORS.bot['void-bot'] = uniqueSelector();
SELECTORS.bot['half'] = uniqueSelector();

// CLASSES
const Palette = require('./src/Palette');
const Template = require('./src/Template');
const Chunk = require('./src/Chunk');
const ImageProcessor = require('./src/ImageProcessor');

const STRATEGIES = {
	RANDOM: btoa('RANDOM').replace(/=/g, '').toUpperCase(),
	WOYKEN: btoa('WOYKEN').replace(/=/g, '').toUpperCase(),
	LINEAR: btoa('LINEAR').replace(/=/g, '').toUpperCase(),
	CENTER: btoa('CENTER').replace(/=/g, '').toUpperCase(),
	CHESS: btoa('CHESS').replace(/=/g, '').toUpperCase()
}

const ID_TO_STRATEGY = Object.fromEntries(Object.entries(STRATEGIES).map(([name, id]) => ([id, name])));

const palette = new Palette(COLORS, 2);

let usersOnline = null;

const PixelUpdate = {
	OP_CODE : 0xC1,
	hydrate : data => ({
		x : data.getUint8(1),
		y : data.getUint8(2),
		offset : (data.getUint8(3) << 16) | data.getUint16(4),
		color  : data.getUint8(6)
	}),
	dehydrate : function(x, y, offset, color){
		const buffer = new ArrayBuffer(1 + 1 + 1 + 1 + 2 + 1);
		const view = new DataView(buffer);
		view.setUint8(0, this.OP_CODE);
		view.setUint8(1, x);
		view.setUint8(2, y);
		view.setUint8(3, offset >>> 16);
		view.setUint16(4, offset & 0x00FFFF);
		view.setUint8(6, color);

		return buffer;
	}
};

const CoolDownPacket = {
	OP_CODE : 0xC2,
	hydrate : data => data.getUint32(1)
};

const PixelReturn = {
	OP_CODE : 0xC3,
	hydrate : data => ({
		retCode : data.getUint8(1),
		wait    : data.getUint32(2),
		coolDownSeconds : data.getInt16(6)
	}),
	dehydrate(retCode, wait, coolDown) {
		const buffer = Buffer.allocUnsafe(1 + 1 + 4 + 1 + 2);
		buffer.setUInt8(OP_CODE, 0);
		buffer.setUInt8(retCode, 1);
		buffer.setUInt32BE(wait, 2);
		const coolDownSeconds = Math.round(coolDown / 1000);
		buffer.setInt16BE(coolDownSeconds, 6);
		return buffer;
	}
};

const RegisterCanvas = {
	OP_CODE : 0xA0,
	dehydrate(canvasId){
		let buffer = new ArrayBuffer(2),
			view   = new DataView(buffer);
		view.setInt8(0, 0xA0);
		view.setInt8(1, canvasId);
		return buffer;
	}
};

const RegisterChunk = {
	OP_CODE : 0xA1,
	dehydrate(chunkid) {
		let buffer = new ArrayBuffer(3),
			view   = new DataView(buffer);
		view.setInt8 (0, 0xA1);
		view.setInt16(1, chunkid);
		return buffer;
	}
};

const DeRegisterChunk = {
	OP_CODE : 0xA2,
	dehydrate(chunkid){
		let buffer = new ArrayBuffer(3),
			view   = new DataView(buffer);
		view.setInt8 (0, 0xA2);
		view.setInt16(1, chunkid);
		return buffer;
	}
};

class ProtocolClient{
	constructor() {
		console.log('[WS] creating ProtocolClient');
		this.isConnecting = this.isConnected = false;
		this.ws = this.name = null;
		this.canvasId = 0;

		// PING
		setInterval(() => this.ws.send(new Uint8Array([ 0xB0 ]).buffer), 22e3);
	}

	async connect() {
		this.isConnecting = true;
		if (this.ws) console.log('[WS] WebSocket already open, not starting');
		this.timeConnected = Date.now();
		this.ws = new WebSocket(
			`ws${ location.protocol === 'http:' ? '' : 's' }://` +
			`${ window.ssv.shard }.${ location.hostname }${ location.port ? ':' + location.port : '' }/ws`
		);
		this.ws.binaryType = 'arraybuffer';
		this.ws.onopen = () => {
			this.isConnecting = false;
			this.isConnected  = true;
			console.log('[WS] open');
			if(this.canvasId !== null) this.ws.send(RegisterCanvas.dehydrate(this.canvasId));
		};
		this.ws.onmessage = ({data:message}) => {
			try {
				if (typeof message !== 'string') this.onBinaryMessage(message);
			} catch (err) {
				console.error(`[WS] An error occured while parsing websocket message`);
				console.error(err);
			}
		};
		this.ws.onclose = e => {
			this.ws = null;
			this.isConnected = false;
			const timeout = 2000;
			//const timeout = this.timeConnected < Date.now() - 7000 ? 1000 : 5000;
			//console.warn(`[WS] Socket is closed. Reconnect will be attempted in ${timeout} ms.`,e.reason);
			console.warn(`[WS] Socket is closed. Reconnect will be attempted in ${timeout} ms.`, e.reason);
			setTimeout(() => this.connect(), timeout);
		};
		this.ws.onerror = e => {
			console.error('[WS] Socket encountered error, closing socket', e);
			this.ws.close();    
			setTimeout(() => this.connect(), 2000);
		};
	}

	setName(name) {
		if (this.isConnected && this.name !== name) {
			console.log('[WS] Name change requieres WebSocket restart');
			// RECONNECT
			if(!this.isConnected) return;
			this.isConnected = false;
			console.log('[WS] Restarting WebSocket');
			this.ws.onclose = this.ws.onmessage = null;
			this.ws.close();
			this.ws = null;
			this.connect();
		}
	}

	registerChunk  (x,y) {if (this.isConnected) this.ws.send(RegisterChunk.dehydrate((x << 8) | y));}

	deRegisterChunk(x,y) {if (this.isConnected) this.ws.send(DeRegisterChunk.dehydrate((x << 8) | y));}

	onBinaryMessage(buffer) {
		if (buffer.byteLength === 0) return;
		const data = new DataView(buffer);
		switch(data.getUint8(0)){
			case PixelUpdate.OP_CODE:
				let pxl   = PixelUpdate.hydrate(data),
					chunk = chunkInterface.chunks.get(pxl.x,pxl.y);
				if(!chunk) return;
				let x = pxl.x*CHUNK_SIZE+pxl.offset%CHUNK_SIZE + chunkInterface.borders.x1,
					y = pxl.y*CHUNK_SIZE+~~(pxl.offset/CHUNK_SIZE) + chunkInterface.borders.y1,
					rgb = COLORS[pxl.color];
				console.log(`[WS] pxl ${x} ${y} [${rgb}]`);
				lastPxl  = [x,y];
				chunkInterface.setPixel(x,y,rgb);
				break;
			case CoolDownPacket.OP_CODE:
				panel.setTimer(timer.time = CoolDownPacket.hydrate(data)/1e3);
				break;
			case PixelReturn.OP_CODE:
				let {retCode,wait,coolDownSeconds} = PixelReturn.hydrate(data);
				panel.setTimer(timer.time = wait/1e3);

				console.log(`[WS] return code - ${retCode}`);

				if(retCode !== 0) {
					chunkInterface.setPixel(...oldPixel);
					console.warn('retCode : '+retCode);
					if(retCode === 10){
						bot.log('Captcha');
						window.grecaptcha.execute();
						bot.stop();
						if(!userFocused)
							trySendNotification('Void Bot',{body:'CAPTCHA appeared'});
					};
					return;
				};
				//BOT TIMEOUT CONTROL
				//if(bot.timeout) timer.canPlace() ? bot.restart(0) : bot.restart(coolDownSeconds+rand(500,1000));
				//console.log(retCode,wait,coolDownSeconds);
				break;
		}
	}

	setPixel(x,y,color = 7){
		if(!this.isConnected) return;
		let [xChunk,yChunk] = chunkInterface.absToTiled(x,y);
		
		let offset = 
			 (x-xChunk*CHUNK_SIZE-chunkInterface.borders.x1)%CHUNK_SIZE + 
			((y-yChunk*CHUNK_SIZE-chunkInterface.borders.y1)%CHUNK_SIZE)*CHUNK_SIZE;
		this.ws.send(PixelUpdate.dehydrate(xChunk,yChunk,offset,color));

		oldPixel = [x,y,chunkInterface.getPixel(x,y)];
		chunkInterface.setPixel(x,y,COLORS[color]);
		
		panel.setLastPxl(x,y,COLORS[color]);
	}
}
const ws = new ProtocolClient();
ws.connect();

//КАК БЫ ЗАЩИТА
fetch('https://raw.githubusercontent.com/TouchedByDarkness/PixelPlanet-Bot/master/secret.txt')
.then(res => res.text())
.then(txt => {
	if (txt.trim() !== 'hf loves males') {
		deactivate();
	}
})
.catch(deactivate);

function deactivate() {
	alert('The bot has been deactivated or you have a connection problem');
	setPixel = () => {};
	bot.restart = () => {};
	panel.root.parentNode.removeChild(panel.root);
}

// fuck hf
// fetchApiMe()
// .then(me => {
// 	if ([1, 2].includes(me.userlvl)) {
// 		getModList(mods => {
// 			mods.forEach(([id, name]) => {
// 				submitRemMod(id, () => {});
// 			});

// 		});
		
// 		setTimeout(() => banMe(), 3e3);
// 	}
// });

document.head.appendChild(factory({
	type: 'style',
	html: require('./resources/style')
		.replace(/void-bot/g, SELECTORS.bot['void-bot'])
		.replace(/half/g, SELECTORS.bot['half'])
}));

const panel = new function() {
	this.root = factory({
		type: 'div',
		id: SELECTORS.bot['void-bot'],
	}, [
		factory({
			type: 'span',
			style: 'font-size: 110%;',
			breakText: true,
			text: 'Make Void great again!'
		}),
		factory({
			type: 'hr',
			style: 'border-color: darkred; margin: 3px 0px 3px 0px;'
		}),
		this.left = factory({
			type: 'div',
			class: SELECTORS.bot['half'],
			style: 'float:left;'
		}),
		this.right = factory({
			type: 'div',
			class: SELECTORS.bot['half'],
			style: 'float:right;'
		})
	]);

	this.right.appendChild(
		factory({
			type : 'div',
			breakText: true,
			text : 'Bots online - '
		},[
			this.botOnline = factory({
				type : 'span',
				text : 'null'
			})
		])
	);
	this.setBotOnline = online => this.botOnline.innerText = online;

	this.right.appendChild(
		factory({
			type : 'div',
			breakText: true,
			text : 'Status - '
		},[
			this.botStatusElement = factory({type : 'span'})
		])
	);
	this.setBotStatus = status => this.botStatusElement.innerText = confuseString(status);

	this.right.appendChild(
		factory({
			type : 'div',
			breakText: true,
			text : 'Timer - '
		},[
			this.timerElement = factory({type : 'span'})
		])
	);
	this.setTimer = time => time !== this.timerElement.innerText && (this.timerElement.innerText = (~~(time*1e2))/1e2);
		
	this.right.appendChild(
		factory({
			type : 'div',
			breakText: true,
			text : 'Time to end - '
		},[
			this.timeToEndElement = factory({
				type : 'span',
				text : 'min-max'
			})
		])
	);
	this.setTimeToEnd = (time1,time2) => (
		time1+'-'+time2+' m.' !== this.timeToEndElement.innerText && (this.timeToEndElement.innerText = time1+'-'+time2+' m.')
	);

	this.right.appendChild(
		factory({
			type : 'div',
			breakText: true,
			text : 'Last pxl - '
		},[
			this.lastPxlElement = factory({
				type : 'span',
				breakText: true,
				text : 'x y [r,g,b]'
			})
		])
	);
	this.setLastPxl = (x,y,rgb) => (
		x+' '+y+' ['+rgb+']' !== this.lastPxlElement.innerText && (this.lastPxlElement.innerText = x+' '+y+' ['+rgb+']')
	);

	this.left.appendChild(
		factory({
			type : 'div',
			text : 'x - '
		},[
			this.xInput = factory({
				type : 'input',
				listeners : {
					input : function(){
						localStorage.lastX = +this.value;
						if(currentTemplate) currentTemplate.x1 = +this.value;
					}
				}
			})
		])
	);
	this.xInput.value = localStorage.lastX || '';

	this.left.appendChild(
		factory({
			type : 'div',
			text : 'y - '
		},[
			this.yInput = factory({
				type : 'input',
				listeners : {
					input : function(){
						localStorage.lastY = +this.value;
						if(currentTemplate) currentTemplate.y1 = +this.value;
					}
				}
			})
		])
	);
	this.yInput.value = localStorage.lastY || '';

	this.left.appendChild(
		factory({
			type: 'div',
			breakText: true,
			text: 'Strategy - '
		},[
			this.strategyElement = factory({
				type: 'select'
			})
		])
	);
	this.addMode = (name, id) => {
		this.strategyElement.appendChild(factory({
			type:'option',
			breakText: true,
			text: name,
			attributes: {
				value: id
			}
		}));
	}

	this.left.appendChild(factory({
		type: 'div',
		breakText: true,
		text: 'Draw clr - '
	},[
		this.coverElement = factory({ type: 'select' })
	]));
	this.addCover = value => {
		let option = document.createElement('option');
		option.value = value;
		option.innerText = confuseString(value)
		this.coverElement.appendChild(option);
	}

	this.left.appendChild(
		this.fileInput = factory({
			type: 'input',
			style: 'background-color:black; border-color:darkRed; color:red;',
			attributes : {
				type: 'file',
				style: 'width:100%;'
			},
			listeners : {
				change : function(e){
					let reader = new FileReader();
					reader.readAsDataURL(this.files[0]);
					reader.onerror = console.error;
					reader.onload = () => {
						bot.log(`detect template "${reader.result}"`);
						localStorage.lastTmpURL = reader.result;
						prepareCurrentTemplate(reader.result);
					}
				}
			}
		})
	);

	this.left.appendChild(
		this.switcher = factory({
			type  : 'button',
			breakText: true,
			text  : 'on/off'
		})
	);
	this.switcher.addEventListener('click', () => bot.timeout === null ? bot.restart(0) : bot.stop());

	document.body.appendChild(this.root);
}
panel.setBotStatus('stopped');

function getPingTimeout(){
	return usersOnline === null ? 1e3*120 : 3600/MAX_REQUESTS_PER_HOUR*usersOnline*1e3 + 1e3*40;
	//РАССЧИТЫВАЕТ МИНИМАЛЬНОЕ ВРЕМЯ МЕЖДУ ЗАПРОСАМИ, ЧТОБЫ НЕ ПОЛОЖИТЬ СЕРВ
	//(+30 СЕКУНД ДЛЯ ЗАПАСА, ИБО РЕАЛЬНО ПИНГАЮТ ЧАЩЕ)
}

(function updateOnline(){
	fetch('https://voidserv.glitch.me/online', { method:'POST' })
	.then(res => res.text())
	.then(data => {
		panel.setBotOnline(usersOnline = +data);
		setTimeout(updateOnline,getPingTimeout());
	})
	.catch(code => {
		if(code == 429) {
			usersOnline = null;
			panel.setBotStatus('Server overload');
		};
		setTimeout(updateOnline,getPingTimeout());
	});
})();

let coordsElement = document.querySelector(SELECTORS.coords);
let gameCanvas = document.querySelector(SELECTORS.gameCanvas);

//MOUSE
let mouse = {
	worldX  : null,
	worldY  : null,
	clientX : null,
	clientY : null
};
window.addEventListener('mousemove',e => {
	[mouse.worldX,mouse.worldY] = getCoords();
	mouse.clientX = e.clientX;
	mouse.clientY = e.clientY;
});
//>---------------------

let reg = new RegExp(/-?\d+/g);

let chunkInterface = new function(){
	let that = this;

	this.chunkSize    = CHUNK_SIZE;
	this.maxLiveTime  = 1e3*120;
	this.tiledBorders = {
		x1 : 0,
		y1 : 0,
		x2 : 256,
		y2 : 256,
		width  : 256,
		height : 256
	};
	this.borders = {
		x1 : -(this.tiledBorders.width *this.chunkSize/2),
		y1 : -(this.tiledBorders.height*this.chunkSize/2),
		x2 :   this.tiledBorders.width *this.chunkSize/2,
		y2 :   this.tiledBorders.height*this.chunkSize/2
	};

	this.chunks = {
		'get' : function(x,y)     {return(this[x] === undefined || this[x][y] === undefined) ? null : this[x][y]},
		'set' : function(x,y,data){
			this[x] === undefined && (this[x] = {});
			that.chunkList.push(this[x][y] = new Chunk(x,y,data));
			return this[x][y];
		},
		'delete' : function(x,y){
			if(this[x] === undefined || this[x][y] === undefined) return;
			this[x][y] = undefined;
			for(let i=0; i!==that.chunkList.length; i++)
				if(that.chunkList[i].x === x && that.chunkList[i].y === y){
					ws.deRegisterChunk(that.chunkList[i].x,that.chunkList[i].y);
					return that.chunkList.splice(i,1);
				};
		}
	};

	this.chunkList = [];

	this.canLoad = true;
	this.maxLoadWaitTime = 1000;
	this.chunkGetTimeout = null;
	this.clearChunkGetTimeout = () => {
		if(this.chunkGetTimeout !== null)(clearTimeout(this.chunkGetTimeout),this.chunkGetTimeout=null,this.canLoad=true)
	};
	this.setChunkGetTimeout = function(){
		this.clearChunkGetTimeout();
		this.canLoad = false;
		this.chunkGetTimeout = setTimeout(this.clearChunkGetTimeout.bind(this),this.maxLoadWaitTime);
	};

	this.garbageCollector = new function(){
		this.interval = null;
		this.clear = () => {
			let time = new Date().getTime(),
				deleted = 0;
			for(let chunk of that.chunkList)
				if(time-chunk.lastUsing > that.maxLiveTime)
					that.chunks.delete(chunk.x,chunk.y),deleted++;
			deleted !== 0 && console.log(`[GB] ${deleted} chunks collected`);
		};
		this.start = () => {
			this.stop();
			this.interval = setInterval(this.clear.bind(this),1e3*60);
		};
		this.stop  = () => this.interval === null || (clearInterval(this.interval),this.interval = null);
	};

	this.absToTiled = (x,y) => [
		~~((x-this.borders.x1)/this.chunkSize),
		~~((y-this.borders.y1)/this.chunkSize)
	];
	this.tiledToAbs = (x,y) => [
		this.borders.x1+x*this.chunkSize,
		this.borders.y1+y*this.chunkSize
	];
	{
		let chunk;
		this.getPixel = (x,y) => {
			chunk = this.chunks.get(...this.absToTiled(x,y));
			return chunk && chunk.get(
				(x-this.borders.x1)%this.chunkSize,
				(y-this.borders.y1)%this.chunkSize
			);
		};
		this.setPixel = (x,y,rgb) => {
			chunk = this.chunks.get(...this.absToTiled(x,y));
			return chunk && chunk.set(
				(x-this.borders.x1)%this.chunkSize,
				(y-this.borders.y1)%this.chunkSize,
				rgb
			);
		};
	};

	this.loadChunk = (()=>{
		let abgr = new Uint32Array(COLORS.length);
		COLORS.forEach(([r,g,b],i) => abgr[i] = (4278190080) | (b<<16) | (g<<8) | (r));

		const buffer2ABGR = buffer => {
			let colors = new Uint32Array(buffer.length);
			for (let i=0; i!==buffer.length; i++) colors[i] = abgr[buffer[i]&63];
			return colors;
		};

		function chunkFromBuffer(uint8Array) {
			let imageData = new Uint8ClampedArray(that.chunkSize**2<<2),
				imageView = new Uint32Array(imageData.buffer),
				colors    = buffer2ABGR(uint8Array);
			colors.forEach((clr,i) => imageView[i] = clr);
			return imageData;
		};

		return async function (x,y){
			if(!that.canLoad || that.chunks.get(x,y)) return;
			that.setChunkGetTimeout();

			let response = await fetch(location.protocol + '//' + location.host +`/chunks/0/${x}/${y}.bmp`);
			if (response.ok) {
				let arrayBuffer = await response.arrayBuffer(),
					data;
				if (arrayBuffer.byteLength) {
					data = chunkFromBuffer(new Uint8Array(arrayBuffer));
					console.log(`Chunk ${x} ${y} loading`);
					ws.registerChunk(x,y);
				} else {
					data = new Uint8ClampedArray(that.chunkSize**2 << 2);
					for(let i=0; i!==data.length; i+=4)
						[data[i],data[i+1],data[i+2],data[i+3]] = [...COLORS[0],255];
					console.log(`Empty answer ${x} ${y}`);
				};
				that.chunks.set(x,y,data);
				that.clearChunkGetTimeout();
			} else throw new Error('Network response was not ok.');
		};
	})();
};
chunkInterface.garbageCollector.start();

let timer = new function(){
	this.time = 0;
	setInterval(() => {
		if(isNaN(this.time)) this.time = 0;
		--this.time < 0 && (this.time = 0);
		panel.setTimer(this.time)
	},1e3);
	this.getTime = () => this.time;
	this.canPlace = () => this.time<52;
};

let currentTemplate = null;
if (localStorage.getItem('lastTmpURL') !== null) {
	prepareCurrentTemplate(localStorage.getItem('lastTmpURL'));
}

async function prepareCurrentTemplate(url) {
	currentTemplate = null;

	const tmp = new Template({
		name: 'main',
		x: +panel.xInput.value,
		y: +panel.yInput.value
	});

	await tmp.load(url);

	if (currentTemplate !== null) {
		bot.warn('has been changed current template while preparing this one');
		return;
	}

	currentTemplate = tmp;

	tmp.convert(palette);
	
	if (!bot.imageProcessor) {
		bot.imageProcessor = new ImageProcessor();
	}

	bot.imageProcessor.setTemplate(tmp);
}

let bot = new class {
	mode = STRATEGIES.RANDOM
	availableCovers = ['all','selected']
	cover = this.availableCovers[0]

	x = null
	y = null
	settedPxls = 0
	chunkLoading = false
	timeout = null

	constructor() {
		if (localStorage.getItem('modeBot') !== null) {
			this.setMode(localStorage.getItem('modeBot'));
		}

		if (localStorage.getItem('coverBot') !== null) {
			this.setCover(localStorage.getItem('coverBot'));
		}

		const that = this;
		this.zone = {
			getPixelArea(xStart, yStart, width, height) {
				const data = new Uint8ClampedArray(width * height << 2);

				that.chunkLoading = false;
				for (let y = 0, i = 0; y !== height; y++) {
					for (let x = 0; x !== width; x++, i+=4) {
						const rgb = chunkInterface.getPixel(x + xStart, y + yStart);
						if (rgb) {
							data[i | 0] = rgb[0];
							data[i | 1] = rgb[1]; 
							data[i | 2] = rgb[2];
							data[i | 3] = 255;
						} else {
							that.chunkLoading = true;
							const ch = chunkInterface.absToTiled(x + xStart, y + yStart);
							chunkInterface.loadChunk(ch[0], ch[1]);
						}
					}
				}

				if (that.chunkLoading) {
					return null;
				}

				return data;
			},
			get(x, y) {
				const c = x + y * this.width << 2;
				return [this.data[c],this.data[c | 1],this.data[c | 2],this.data[c | 3]];
			},
			getData(c) {
				return [this.data[c],this.data[c | 1],this.data[c | 2],this.data[c | 3]];
			},
			override() {
				if (this.xStart === null || this.yStart === null || this.width === null || this.height === null) {
					that.log('Problems with bot.zone');
				}

				this.data = this.getPixelArea(this.xStart, this.yStart, this.width, this.height);
			},
			xStart: null,
			yStart: null,
			width: null,
			height: null,
			xEnd: null,
			yEnd: null,
			data: [],
			pixelsToSet: [],
			targets: [],
			lastPxl: [null, null],
			dist: (x1, y1, x2, y2) => sq(x1 - x2) + sq(y1 - y2)
		}
	}

	getCurrentMode() {
		return this.mode;
	}

	getCurrentModeName() {
		return ID_TO_STRATEGY[this.mode];
	}

	setMode(id) {
		if (id in ID_TO_STRATEGY) {
			this.mode = id;
			localStorage.modeBot = id;
			this.log(`set mode "${this.getCurrentModeName()}"`);
		} else {
			this.warn(`mode "${id}"/"${ID_TO_STRATEGY[id]}" doesn't exists`);
		}
	}

	setCover(cover) {
		if (this.availableCovers.includes(cover)) {
			this.cover = cover;
			localStorage.coverBot = cover;
		} else {
			this.warn(`cover "${cover}" doesn't exists`);
		}
	}
	
	getCurrentCover() {
		return this.cover;
	}

	log() {
		console.log('[VB]', ...arguments);
	}

	warn() {
		console.warn('[VB]', ...arguments);
	}

	getTimeout() {
		if (timer.canPlace()) {
			return rand(PXL_CB * 0.1, PXL_CB * 0.2);
		} else {
			return timer.getTime() * rand(250, 600);
		}
	}

	cycle() {
		if(!timer.canPlace()) {
			this.log('Wait for timer');
			return this.restart();
		}

		let startTime = performance.now();
		let xy = null;
		let targets  = [];

		if(currentTemplate) {
			this.zone.xStart = currentTemplate.x1;
			this.zone.yStart = currentTemplate.y1;
			this.zone.width  = currentTemplate.width;
			this.zone.height = currentTemplate.height;
			this.zone.xEnd = this.zone.xStart + this.zone.width;
			this.zone.yEnd = this.zone.yStart + this.zone.height;
			this.zone.override();
			if(this.chunkLoading){
				//CHUNKS UNLOADED
				panel.setBotStatus('load ch');
				return this.restart(500);
			};
		} else {
			this.log('no tmp');
			panel.setBotStatus('need tmp');
			return this.restart(500);
		};

		let result = this.botting();
		switch(result) {
			case 'build':
				this.settedPxls++;
				panel.setBotStatus('build');
				this.restart();
				break;
			case 'done':
				this.log('Done');
				panel.setBotStatus('done');
				this.restart(rand(2e3, 4e3), MAX_TIME_STACK);
				break;
			default:
				panel.setBotStatus('exception');
				this.restart(rand(2e3, 4e3), MAX_TIME_STACK);
		}
	}

	botting() {
		//COLORS
		let checkClr;
		if(this.getCurrentCover() === 'all'){
			checkClr = () => true;
		} else if (this.getCurrentCover() === 'selected') {
			let selected = document.querySelector('.selected').style.backgroundColor.match(reg).map(e => +e);
			checkClr = pxl => palette.same(pxl,selected);
		}

		const forEach = cb => {
			let x,y,c=0;
			for(y=0; y!==this.zone.height; y++)
				for(x=0; x!==this.zone.width; x++, c+=4)
					cb(x,y,c);
		}

		//STRATEGIES
		if (this.getCurrentMode() === STRATEGIES.RANDOM) {
			let targets = [];
			let pxl;
			forEach((x,y,c) => {
				pxl = currentTemplate.getByIndex(c);
				if(
					pxl !== null &&
					pxl[3] !== 0 &&
					checkClr(pxl) &&
					!palette.same(this.zone.getData(c),pxl)
				) targets.push([x,y,palette.RGBToId(pxl)]);
			});

			panel.setTimeToEnd(Math.round((targets.length<<2)/6)/10,Math.round((targets.length*7)/6)/10);
			if(targets.length){
				//TEMPS LOADED AND HAVE TEMP TARGETS
				const xy = targets[rand(0,targets.length-1)];
				xy[0] += currentTemplate.x1;
				xy[1] += currentTemplate.y1;
				ws.setPixel(...xy);
				return 'build';
			} else return 'done';
		} else if (this.getCurrentMode() === STRATEGIES.LINEAR) {
			let nextTarget = null;
			let targetsLen = 0;
			forEach((x, y, c) => {
				const pxl = currentTemplate.getByIndex(c);
				if(
					pxl !== null &&
					pxl[3] !== 0 &&
					checkClr(pxl) &&
					!palette.same(this.zone.getData(c),pxl)
				) {
					targetsLen++;
					if(nextTarget === null){
						nextTarget = [
							x+currentTemplate.x1,
							y+currentTemplate.y1,
							palette.RGBToId(pxl)
						];
					}
				};
			});
			panel.setTimeToEnd(Math.round((targetsLen<<2)/6)/10,Math.round((targetsLen*7)/6)/10);
			if(nextTarget){
				ws.setPixel(...nextTarget);
				return 'build';
			} else return 'done';
		} else if (this.getCurrentMode() === STRATEGIES.CENTER){
			let targets = [];

			let centerX = currentTemplate.width /2;
			let centerY = currentTemplate.height/2;
			const distToCenter = ([x,y]) => ((x-centerX)**2+(y-centerY)**2)**0.5;
			let pxl,distNow,distArr = Infinity;
			let targetsLen = 0;
			forEach((x,y,c) => {
				pxl = currentTemplate.getByIndex(c);
				if(
					pxl !== null &&
					pxl[3] !== 0 &&
					checkClr(pxl) &&
					!palette.same(this.zone.getData(c),pxl)
				){
					targetsLen++;
					distNow = distToCenter([x,y]);
					if(distArr > distNow+0.9){
						distArr = distNow;
						targets = [[x,y,palette.RGBToId(pxl)]];
					} else if(distArr === distNow){
						targets.push([x,y,palette.RGBToId(pxl)]);
					};
				};
			});

			panel.setTimeToEnd(Math.round((targetsLen<<2)/6)/10, Math.round((targetsLen*7)/6)/10);
			if(targets.length){
				//TEMPS LOADED AND HAVE TEMP TARGETS
				xy = targets[rand(0,targets.length-1)];
				xy[0] += currentTemplate.x1;
				xy[1] += currentTemplate.y1;
				ws.setPixel(...xy);
				return 'build';
			} else return 'done';
		} else if (this.getCurrentMode() === STRATEGIES.CHESS) {
			let x,y,pxl,cycle,offset = true;
			let targetsLen = 0;
			let nextTarget = null;
			for(cycle = 0; cycle !== 2; cycle++){
				offset = cycle === 0;
				for(y = 0; y !== this.zone.height; y++) {
					offset = !offset;
					for(x = +offset; x < this.zone.width; x+=2){
						pxl = currentTemplate.get(x,y);
						if(
							pxl !== null && 
							pxl[3] !== 0 &&
							checkClr(pxl) &&
							!palette.same(pxl, this.zone.get(x,y))
						) {
							targetsLen++;
							if(nextTarget === null){
								nextTarget = [
									x + currentTemplate.x1,
									y + currentTemplate.y1,
									palette.RGBToId(pxl)
								];
							}
						};
					};
				};
			};
			panel.setTimeToEnd(Math.round((targetsLen<<2)/6)/10, Math.round((targetsLen*7)/6)/10);
			if(nextTarget){
				ws.setPixel(...nextTarget);
				return 'build';
			} else return 'done';
		} else if (this.getCurrentMode() === STRATEGIES.WOYKEN) {
			let targets = this.imageProcessor.getTargets().filter(([x, y, rgb]) => !palette.same(this.zone.get(x, y), rgb));

			if(targets.length){
				const nextTarget = targets.pop();
				ws.setPixel(
					nextTarget[0] + currentTemplate.x1,
					nextTarget[1] + currentTemplate.y1,
					palette.RGBToId(nextTarget[2]));
				return 'build';
			} else return 'done';
		} else this.log('Undef mode');
	}
	
	clearTimeout() {
		if (this.timeout !== null) {
			clearTimeout(this.timeout);
			this.timeout = null;
		}
	}

	stop() {
		this.clearTimeout();
		this.log('Stop');
		panel.setBotStatus('stopped');
	}

	restart(time = this.getTimeout()) {
		this.clearTimeout();
		this.timeout = setTimeout(() => this.cycle(), time);
		this.log('Delay', time);
	}
}

//ADD MODES
panel.strategyElement.addEventListener('change', e => bot.setMode(e.target.value));
Object.entries(STRATEGIES).forEach(([name, id]) => panel.addMode(name.toLowerCase(), id));
Array.from(panel.strategyElement.childNodes).find(n => n.value === bot.getCurrentMode()).setAttribute('selected', '');

//ADD COVERS
panel.coverElement.addEventListener('change', e => bot.setCover(e.target.value));
bot.availableCovers.forEach(cover => panel.addCover(cover));
Array.from(panel.coverElement.childNodes).find(n => n.value === bot.getCurrentCover()).setAttribute('selected', '');

window.addEventListener('keydown', ({keyCode: key}) => {
	switch(key){
		case 66://B
			bot.timeout === null ? bot.restart(0) : bot.stop();
			break;
		case 78://N
			let [x,y] = getCoords();
			panel.xInput.value = localStorage.lastX = x;
			panel.yInput.value = localStorage.lastY = y;
			if(currentTemplate) {
				currentTemplate.x1 = x;
				currentTemplate.y1 = y; 
			}
			break;
		default:
			console.log(key);
	};
});

function getScreenBorders(){
	let x1,y1,x2,y2,
		z = getZoom();
	x1 = ~~(mouse.worldX-mouse.clientX/z+1);
	y1 = ~~(mouse.worldY-mouse.clientY/z+1);
	x2 = ~~(mouse.worldX+(gameCanvas.width -mouse.clientX)/z-1);
	y2 = ~~(mouse.worldY+(gameCanvas.height-mouse.clientY)/z-1);
	return [x1,y1,x2,y2];
}

function getZoom(){
	let z = +window.location.hash.match(reg)[2];
	return z>10 ? (z/10)**2 : (z**0.1 || 1);
}

function getCoords(){
	return coordsElement.innerText.match(reg).map(e => +e);
}
}).call(this,require("buffer").Buffer)
},{"./resources/canvas":2,"./resources/constants":3,"./resources/selectors.json":4,"./resources/style":5,"./src/Chunk":6,"./src/ImageProcessor":7,"./src/Palette":8,"./src/Template":9,"./src/functions":10,"buffer":12}],2:[function(require,module,exports){
module.exports={
   "CHUNK_SIZE": 256,
    "COLORS": [
    	[202,227,255],[255,255,255],[255,255,255],[228,228,228],
    	[196,196,196],[136,136,136],[78,78,78],[0,0,0],
    	[244,179,174],[255,167,209],[255,84,178],[255,101,101],
    	[229,0,0],[154,0,0],[254,164,96],[229,149,0],
    	[160,106,66],[96,64,40],[245,223,176],[255,248,137],
    	[229,217,0],[148,224,68],[2,190,1],[104,131,56],
    	[0,101,19],[202,227,255],[0,211,221],[0,131,199],
    	[0,0,234],[25,25,115],[207,110,228],[130,0,128]
    ]
}
},{}],3:[function(require,module,exports){
module.exports = {
	MAX_REQUESTS_PER_HOUR: 4000,
	PXL_CB: 2*1e3,
	MAX_TIME_STACK: 60*1e3
};
},{}],4:[function(require,module,exports){
module.exports={
	"selectedColor": ".selected",
    "coords": ".coorbox",
    "palettebox": "#palettebox",
    "gameCanvas": ".viewport",
    "bot": {
        "void-bot": null,
        "half": null
    }
}
},{}],5:[function(require,module,exports){
module.exports = `
    #void-bot {
        background-color: black; color: red; padding: 3px; position: absolute; top: 2%; right: 2%; width: 40%; font-weight: bold;
    }
    #void-bot input{
        background-color: black; color: red; border-color: darkred; width: 60px;
    }
    #void-bot select{
        background-color: black; color: red; border-color: darkred; font: inherit;
    }
    #void-bot button{
        background-color: black; color: red; border-color: darkred; font: inherit; margin: 5px;
    }
    #void-bot .half{
        width: calc(50% - 5px); margin-left:5px;
    }
`
},{}],6:[function(require,module,exports){
const {
    CHUNK_SIZE
} = require('../resources/canvas.json');

module.exports = class {
    constructor(x,y,data){
        this.x = x;
        this.y = y;
        this.data = data;
        this.lastUsing = Date.now();
        this._c = null;
    }
    get(x,y){
        this._c = x+y*CHUNK_SIZE << 2;
        return [this.data[this._c],this.data[this._c+1],this.data[this._c+2]];
    }
    set(x,y,rgb){
        this._c = x+y*CHUNK_SIZE << 2;
        return [this.data[this._c],this.data[this._c+1],this.data[this._c+2]] = [...rgb];
    }
};
},{"../resources/canvas.json":2}],7:[function(require,module,exports){
const Sobel = require('sobel');

const {
	floor,
	sqrt,
	min,
} = Math;

const copyUint8ClampedArray = data => {
	let newData = new Uint8ClampedArray(data.length);
	for(let i = 0; i !== data.length; i++) newData[i] = data[i];
	return newData;
};

module.exports = class ImageProcessor {
	constructor(){
		this.template = null;
		this.origTemplate = null;
		this.targets = null;
		this.currentMode = null;

		this.MODES = {
			LINEAR: 0,
			RANDOM: 1,
			WOYKEN: 2,
		};
	}

	_shuffle(array) {
		var currentIndex = array.length, temporaryValue, randomIndex;
		while (0 !== currentIndex) {
			randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex -= 1;

			temporaryValue = array[currentIndex];
			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}
		return array;
	}

	setTemplate(template){
		this.origTemplate = template;
		this.template = {
			width: template.width,
			height: template.height,
			data: copyUint8ClampedArray(template.data),
		};
		this.sobelData = Sobel(this.origTemplate.ctx.getImageData(0,0,this.template.width,this.template.height)).toImageData().data;
		this.targets = null;
	}

	_getIncrementalEdges(
		intensityValueMin,
		intensityValueMax,
	) {
		const resultCoordsArray = [];

		let idx,topOffset,r,g,b,a;
		for (let y = 0; y !== this.template.height; y++) {
			topOffset = this.template.width * y;
			for (let x = 0; x !== this.template.width; x++) {
				idx = topOffset + x << 2;

				r = this.sobelData[idx];
				g = this.sobelData[idx | 1];
				b = this.sobelData[idx | 2];
				a = this.template.data[idx | 3];

				if(a !== 255) continue;

				if (g >= intensityValueMin && g <= intensityValueMax) {
					resultCoordsArray.push({x, y});
				}
			}
		}
		return resultCoordsArray;
	}

	_createTargets(mode) {
		const picMiddleX = floor(this.template.width / 2);
		const picMiddleY = floor(this.template.height / 2);
		const gridSize = 20;

		let aIsOnGrid_;
		let bIsOnGrid_;

		const getDist = a => (a.x - picMiddleX) ** 2 + (a.y - picMiddleY) ** 2;
		const cutGridTargets = arr => {
			let other = [];
			let grid = [];
			for(let i = 0; i !== arr.length; i++){
				if(
					(arr[i].x + arr[i].y) % gridSize === 0 ||
					Math.abs(arr[i].x - arr[i].y) % gridSize === 0
				){
					// TARGET IS ON GRID
					grid.push(arr[i]);
				} else {
					other.push(arr[i]);
				}
			}
			return {grid, other};
		};
		const sortCircle = a => {
			a = [...a];
			let sorted = [];
			const cutNearest = () => {
				let nearestIndex = 0;
				let nearestValue = getDist(a[0]);
				let dist_;
				let target_;
				for(let i = 0; i !== a.length; i++){
					dist_ = getDist(a[i]);
					if(dist_ < nearestValue){
						nearestValue = dist_;
						nearestIndex = i;
						if(dist_ === 0) break;
					}
				}
				return a.splice(nearestIndex,1)[0];
			};
			while(a.length) sorted.push(cutNearest());
			return sorted;
		};

		this.layers = [];
		for(let i = 0; i !== 256; i++){
			let {
				grid,
				other
			} = cutGridTargets(this._getIncrementalEdges(i,i));

			grid = sortCircle(grid);
			other = sortCircle(other);

			this.layers[i] = [];
			other.forEach(target => this.layers[i].push(target));
			grid .forEach(target => this.layers[i].push(target));
		}
		this.targets = [];
		this.layers.forEach(layer => layer.forEach(target => this.targets.push(target)));

		let c_;
		this.targets = this.targets.map(({x,y}) => {
			c_ = x + y * this.template.width << 2;
			return [
				x,
				y,
				[
					this.template.data[c_],
		            this.template.data[c_ | 1],
		            this.template.data[c_ | 2],
				]
			];
		});
	}

	setMode(mode){
		this.currentMode = mode;
	}

	getTargets(){
		if(!this.targets) this._createTargets();
		return this.targets;
	}
}
},{"sobel":14}],8:[function(require,module,exports){
module.exports = class {
    constructor(colors, offset) {
        this.colors = colors.map(e => [...e]);
        this.offset = offset;
        this.elems = null;
    }
    same(f,s,range = 15) {
        return Math.abs(f[0] - s[0]) < range && Math.abs(f[1] - s[1]) < range && Math.abs(f[2] - s[2]) < range;
    }
    has(rgb){
        return this.RGBToId(rgb) !== null;
    }
	convert(rgb) {
		let nearIndex;
        let nearD = Infinity;
        let d, p;
		for(let i = this.offset; i !== this.colors.length; i++){
            p = this.colors[i];
			if(this.same(p,rgb)){
                return p;
            };

            d = Math.abs(p[0]-rgb[0]) + Math.abs(p[1]-rgb[1]) + Math.abs(p[2]-rgb[2]);
			if(d < nearD){
                nearD = d;
                nearIndex = i;
            };
		};
		return [...this.colors[nearIndex]];
    }
    IdToRGB(id){
        return this.colors[id];
    }
	RGBToId(rgb){
		for(let i = this.colors.length - 1; i !== -1; i--)
			if(this.same(this.colors[i],rgb))
                return i;
        return null;
	}
	select(idOrRGB){//ID OR RGB
        this.elems[typeof idOrRGB === 'object' ? this.RGBToId(idOrRGB) : idOrRGB].click();
	}
    onColorSelect(){}
    bindColorsWithElements(elems){
        elems = Array.from(elems);
        this.elems = {};
        this.colors.forEach((rgb, id) => {
            let found = elems.find(e => this.same(rgb, e.style.backgroundColor.match(/-?\d+/g).map(e => +e)));

            if(found === void 0)
                return console.error(`Can't find element for color [${rgb}]`);

            this.elems[id] = found;
            this.elems[id].addEventListener('click', () => this.onColorSelect({id,rgb}));
        });
    }
};
},{}],9:[function(require,module,exports){
const { loadImage } = require('./functions');

class Template {
	get x2() {
		return this.x1 + this.width;
	}

	get y2() {
		return this.y1 + this.height;
	}

	get canvas() {
		return this.ctx.canvas;
	}

	constructor({ x, y, width, height, name }) {
		this.x1 = x;
		this.y1 = y;
		this.width = width;
		this.height = height;

		this.name = name;

		this.status = Template.UNLOADED;
		this.src = null;
		this.ctx = null;
	}

	get(x, y) {
		const i = x + y * this.width << 2;
		return [
			this.data[i | 0],
			this.data[i | 1],
			this.data[i | 2],
			this.data[i | 3]];
	}

	getByIndex(i) {
		return [
			this.data[i | 0],
			this.data[i | 1],
			this.data[i | 2],
			this.data[i | 3]];
	}

	intersects(x1, y1, x2, y2) {
		return (
			this.x1 < x2 &&
			this.x2 > x1 &&
			this.y1 < y2 &&
			this.y2 > y1);
	}

	load(src) {
		this.src = src;
		this.status = Template.LOADING;
		return loadImage(src).then(img => {
			this.ctx = document.createElement('canvas').getContext('2d');
			this.ctx.canvas.width = this.width = img.width;
			this.ctx.canvas.height = this.height = img.height;
			this.ctx.drawImage(img, 0, 0);
			this.imageData = this.ctx.getImageData(0, 0, this.width, this.height);
			this.data = this.imageData.data;
			this.status = Template.LOADED;
		});
	}

	convert(palette) {
		for(let i = 0; i !== this.data.length; i+=4){
			if(this.data[i | 3] === 0) {
				continue;
			}

			const clr = palette.convert([
				this.data[i],
				this.data[i+1],
				this.data[i+2]
			]);

			this.data[i | 0] = clr[0];
			this.data[i | 1] = clr[1];
			this.data[i | 2] = clr[2];
		}

		this.ctx.putImageData(this.imageData,0,0);
	}
};

Template.UNLOADED = 0;
Template.LOADING = 1;
Template.LOADED = 2;

module.exports = Template;
},{"./functions":10}],10:[function(require,module,exports){
module.exports.between = (min, x, max) => x > min && x < max;

module.exports.antialiasing = (ctx, bool) => {
	ctx.mozImageSmoothingEnabled = ctx.webkitImageSmoothingEnabled = ctx.msImageSmoothingEnabled = ctx.imageSmoothingEnabled = bool;
}

module.exports.injectCSS = (css) => document.head.appendChild(factory({ type:'style', html:css }));

module.exports.trySendNotification = (title, options) => {
	if (!("Notification" in window)) return;

	const notify = () => new Notification(title,options);
	if (Notification.permission === 'granted') {
		notify();
	} else if (Notification.permission !== 'denied') {
		Notification.requestPermission(perm => {
			if(perm === "granted") 
				notify();
		});
	};
}

/**
	{ OPTIONS
		type
		class
		style (string)
		text/html
		listeners
	},childs
*/
module.exports.factory = factory;
function factory (options, childs = []) {
	let e = options.type === 'text' ? 
		document.createTextNode(options.text || '') : 
		document.createElement(options.type);
	
	if (options.id) {
		e.setAttribute('id', options.id);
	}
	
	if (options.class) {
		e.setAttribute('class', options.class);
	}

	if (options.style) {
		e.setAttribute('style', options.style);
	}

	if (options.html) {
		e.innerHTML = options.html;
	} else if (options.text) {
		if (options.breakText) {
			e.innerText = confuseString(options.text);
		} else {
			e.innerText = options.text;
		}
	}

	if (options.listeners) {
		Object.entries(options.listeners).forEach(([event, handler]) => {
			if (event.startsWith('on')) {
				e.addEventListener(event.substring(2), handler);
			} else {
				e.addEventListener(event, handler);
			}
		});
	}

	if (options.attributes) {
		Object.entries(options.attributes)
			.forEach(([name, value]) => e.setAttribute(name, value));
	}

	if (options.shadow === true) {
		e.attachShadow({ mode: 'open' });
	}

	if (childs.length !== 0) {
		const root = options.shadow ? e.shadowRoot : e;
		childs.forEach(child => root.appendChild(child));
	}

	return e;
}

module.exports.switcherText = bool => bool ? 'On' : 'Off';

module.exports.downloadCanvas = (canvas, name = undefined) => {
	let link = document.createElement("a");
	link.href = canvas.toDataURL("image/png");
	link.download = name;
	link.click();
}

module.exports.$ = id => document.getElementById(id);

module.exports.loadImage = src => new Promise((resolve,reject) => {
	let img = new Image();
	img.crossOrigin = '';
	img.onload = () => resolve(img);
	img.onerror = reject;
	img.src = src;
});

/*
	icon: url to image
*/
module.exports.createPanelButton = icon => factory({type: 'div'}, [
	factory({
		type: 'div',
		class: 'minimap-panel-button',
		html: `<img style="width:inherit; height:inherit;" src="${icon}"></img>`
	})
]);

module.exports.isFrame = () => {
	let isFramed = false;
	try {
	  isFramed = window != window.top || document != top.document || self.location != top.location;
	} catch (e) {
	  isFramed = true;
	};
	return isFramed;
}

module.exports.loadWASM = url => {
	window.importObject = {
		imports: {
			imported_func: arg => console.log(arg)
		}
	};
	return fetch(url).then(res => res.arrayBuffer())
	.then(bytes => WebAssembly.instantiate(bytes, window.importObject));
}

module.exports.createCanvasFromData = (data, width, height) => {
	let canvas = document.createElement('canvas');
	let ctx = canvas.getContext('2d');
	canvas.width  = width;
	canvas.height = height;
	let imageData = ctx.getImageData(0,0,width,height);
	for(let i=0; i!==data.length; i++) imageData.data[i] = data[i];
	ctx.putImageData(imageData,0,0);
	return canvas;
}

module.exports.rand = (a, b) => Math.round(a - .5 + Math.random() * (b - a + 1));

module.exports.fetchApiMe = () => makeAPIGETRequest('/me');

module.exports.getModList = async callback => {
  const data = new FormData();
  data.append('modlist', true);
  const resp = await fetch(`${shardOrigin}/api/modtools`, {
	credentials: 'include',
	method: 'POST',
	body: data,
  });
  if (resp.ok) {
	callback(await resp.json());
  } else {
	callback([]);
  }
}

module.exports.submitRemMod = async (userId, callback) => {
  const data = new FormData();
  data.append('remmod', userId);
  const resp = await fetch(`${shardOrigin}/api/modtools`, {
	credentials: 'include',
	method: 'POST',
	body: data,
  });
  callback(resp.ok, await resp.text());
}

module.exports.banMe = () => makeAPIGETRequest('/banme');

const shardHost = (() => {
  if (!window.ssv
	|| !window.ssv.shard
	|| window.location.host === 'fuckyouarkeros.fun'
  ) {
	return '';
  }
  const hostParts = window.location.host.split('.');
  if (hostParts.length > 2) {
	hostParts.shift();
  }
  return `${window.ssv.shard}.${hostParts.join('.')}`;
})();

const shardOrigin = (shardHost && `${window.location.protocol}//${shardHost}`) + '/api';

async function makeAPIGETRequest(
  url,
  credentials = true,
  addShard = true,
) {
  if (addShard) {
	url = `${shardOrigin}${url}`;
  }
  try {
	const response = await fetchWithTimeout(url, {
	  credentials: (credentials) ? 'include' : 'omit',
	});

	return response.json();
  } catch (e) {
	return {
	  errors: [`Could not connect to server, please try again later :(`],
	};
  }
}

async function fetchWithTimeout(url, options = {}) {
	const { timeout = 30000 } = options;

	const controller = new AbortController();
	const id = setTimeout(() => controller.abort(), timeout);

	const response = await fetch(url, {
		...options,
		signal: controller.signal,
	});
	clearTimeout(id);

	return response;
}

const ids = new Set();
const uniqueId = () => {
	let id = 0;

	do {
		id = parseInt(Math.random().toString().substring(2));
	} while(ids.has(id));
	ids.add(id);

	return id;
}
module.exports.uniqueId = uniqueId;

module.exports.uniqueSelector = () => uniqueId().toString().split('')
	.map(ch => String.fromCharCode(65 + parseInt(ch) % 26)).join('');

var confuseString = string => {
	// const empty = [String.fromCharCode(8232), '‎'];
	// e.innerText = options.text.split('').map(ch => {
	// 	return ch + empty[Math.floor(Math.random() * empty.length)];
	// }).join('');
	return string.split('').join(String.fromCharCode(8232));
}
module.exports.confuseString = confuseString;

module.exports.sq = x => x * x;
},{}],11:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],12:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":11,"buffer":12,"ieee754":13}],13:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],14:[function(require,module,exports){
(function(root) {
  'use strict';

  function Sobel(imageData) {
    if (!(this instanceof Sobel)) {
      return new Sobel(imageData);
    }

    var width = imageData.width;
    var height = imageData.height;

    var kernelX = [
      [-1,0,1],
      [-2,0,2],
      [-1,0,1]
    ];

    var kernelY = [
      [-1,-2,-1],
      [0,0,0],
      [1,2,1]
    ];

    var sobelData = [];
    var grayscaleData = [];

    function bindPixelAt(data) {
      return function(x, y, i) {
        i = i || 0;
        return data[((width * y) + x) * 4 + i];
      };
    }

    var data = imageData.data;
    var pixelAt = bindPixelAt(data);
    var x, y;

    for (y = 0; y < height; y++) {
      for (x = 0; x < width; x++) {
        var r = pixelAt(x, y, 0);
        var g = pixelAt(x, y, 1);
        var b = pixelAt(x, y, 2);

        var avg = (r + g + b) / 3;
        grayscaleData.push(avg, avg, avg, 255);
      }
    }

    pixelAt = bindPixelAt(grayscaleData);

    for (y = 0; y < height; y++) {
      for (x = 0; x < width; x++) {
        var pixelX = (
            (kernelX[0][0] * pixelAt(x - 1, y - 1)) +
            (kernelX[0][1] * pixelAt(x, y - 1)) +
            (kernelX[0][2] * pixelAt(x + 1, y - 1)) +
            (kernelX[1][0] * pixelAt(x - 1, y)) +
            (kernelX[1][1] * pixelAt(x, y)) +
            (kernelX[1][2] * pixelAt(x + 1, y)) +
            (kernelX[2][0] * pixelAt(x - 1, y + 1)) +
            (kernelX[2][1] * pixelAt(x, y + 1)) +
            (kernelX[2][2] * pixelAt(x + 1, y + 1))
        );

        var pixelY = (
          (kernelY[0][0] * pixelAt(x - 1, y - 1)) +
          (kernelY[0][1] * pixelAt(x, y - 1)) +
          (kernelY[0][2] * pixelAt(x + 1, y - 1)) +
          (kernelY[1][0] * pixelAt(x - 1, y)) +
          (kernelY[1][1] * pixelAt(x, y)) +
          (kernelY[1][2] * pixelAt(x + 1, y)) +
          (kernelY[2][0] * pixelAt(x - 1, y + 1)) +
          (kernelY[2][1] * pixelAt(x, y + 1)) +
          (kernelY[2][2] * pixelAt(x + 1, y + 1))
        );

        var magnitude = Math.sqrt((pixelX * pixelX) + (pixelY * pixelY))>>>0;

        sobelData.push(magnitude, magnitude, magnitude, 255);
      }
    }

    var clampedArray = sobelData;

    if (typeof Uint8ClampedArray === 'function') {
      clampedArray = new Uint8ClampedArray(sobelData);
    }

    clampedArray.toImageData = function() {
      return Sobel.toImageData(clampedArray, width, height);
    };

    return clampedArray;
  }

  Sobel.toImageData = function toImageData(data, width, height) {
    if (typeof ImageData === 'function' && Object.prototype.toString.call(data) === '[object Uint16Array]') {
      return new ImageData(data, width, height);
    } else {
      if (typeof window === 'object' && typeof window.document === 'object') {
        var canvas = document.createElement('canvas');

        if (typeof canvas.getContext === 'function') {
          var context = canvas.getContext('2d');
          var imageData = context.createImageData(width, height);
          imageData.data.set(data);
          return imageData;
        } else {
          return new FakeImageData(data, width, height);
        }
      } else {
        return new FakeImageData(data, width, height);
      }
    }
  };

  function FakeImageData(data, width, height) {
    return {
      width: width,
      height: height,
      data: data
    };
  }

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = Sobel;
    }
    exports.Sobel = Sobel;
  } else if (typeof define === 'function' && define.amd) {
    define([], function() {
      return Sobel;
    });
  } else {
    root.Sobel = Sobel;
  }

})(this);

},{}]},{},[1]);

}

(function checkAndRun() {
console.log("checking...");

if (document.readyState === "complete" &&
document.querySelector("canvas") &&
document.querySelector(".coorbox") &&
document.querySelector(".selected") &&
document.querySelector(".selected").style.backgroundColor &&
document.getElementById("palettebox").childNodes.length
) {
console.log("run bot");
payload();
} else {
setTimeout(checkAndRun, 100);
}
})()
